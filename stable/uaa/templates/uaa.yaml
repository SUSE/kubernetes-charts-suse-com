---
# The uaa role contains the following jobs:
#
# - global-uaa-properties: Dummy BOSH job used to host global parameters that
#   are required to configure SCF / fissile
#
# - wait-for-database: This is a pre-start job to delay starting the rest of the
#   role until a database connection is ready. Currently it only checks that a
#   response can be obtained from the server, and not that it responds
#   intelligently.
#
#
# - uaa: The UAA is the identity management service for Cloud Foundry. It's
#   primary role is as an OAuth2 provider, issuing tokens for client
#   applications to use when they act on behalf of Cloud Foundry users. It can
#   also authenticate users with their Cloud Foundry credentials, and can act as
#   an SSO service using those credentials (or others). It has endpoints for
#   managing user accounts and for registering OAuth2 clients, as well as
#   various other management functions.

{{- if gt (int .Values.sizing.uaa.count) 65535 }}
_maxReplicas: {{ fail "uaa cannot have more than 65535 instances" }}
{{- end }}

{{- if and .Values.config.HA (and (ne (int .Values.sizing.uaa.count) 1) (lt (int .Values.sizing.uaa.count) 2)) }}
_minHAReplicas: {{ fail "uaa must have at least 2 instances for HA" }}
{{- end }}

{{- if lt (int .Values.sizing.uaa.count) 1 }}
_minReplicas: {{ fail "uaa must have at least 1 instances" }}
{{- end }}

{{- if .Values.sizing.HA }}
_moved_sizing_HA: {{ fail "Bad use of moved variable sizing.HA. The new name to use is config.HA" }}
{{- end }}

{{- if .Values.sizing.cpu }}
_moved_sizing_cpu_limits: {{ if .Values.sizing.cpu.limits }} {{ fail "Bad use of moved variable sizing.cpu.limits. The new name to use is config.cpu.limits" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.cpu }}
_moved_sizing_cpu_requests: {{ if .Values.sizing.cpu.requests }} {{ fail "Bad use of moved variable sizing.cpu.requests. The new name to use is config.cpu.requests" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.memory }}
_moved_sizing_memory_limits: {{ if .Values.sizing.memory.limits }} {{ fail "Bad use of moved variable sizing.memory.limits. The new name to use is config.memory.limits" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.memory }}
_moved_sizing_memory_requests: {{ if .Values.sizing.memory.requests }} {{ fail "Bad use of moved variable sizing.memory.requests. The new name to use is config.memory.requests" }} {{else}} ok {{end}}
{{- end }}

apiVersion: "apps/v1beta1"
kind: "StatefulSet"
metadata:
  name: "uaa"
  labels:
    skiff-role-name: "uaa"
spec:
  podManagementPolicy: "OrderedReady"
  replicas: {{ if and .Values.config.HA (eq (int .Values.sizing.uaa.count) 1) -}} 2 {{- else -}} {{ .Values.sizing.uaa.count }} {{- end }}
  serviceName: "uaa-set"
  template:
    metadata:
      name: "uaa"
      labels:
        skiff-role-name: "uaa"
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
    spec:
      containers:
      - env:
        - name: "AEK_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "aek-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "DOMAIN"
          value: {{if ne (typeOf .Values.env.DOMAIN) "<nil>"}}{{if has (kindOf .Values.env.DOMAIN) (list "map" "slice")}}{{.Values.env.DOMAIN | toJson | quote}}{{else}}{{.Values.env.DOMAIN | quote}}{{end}}{{else}}{{fail "env.DOMAIN has not been set"}}{{end}}

        {{- if not .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.INTERNAL_CA_KEY }}
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_KEY }}
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.JWT_SIGNING_CERT }}
        - name: "JWT_SIGNING_CERT"
          valueFrom:
            secretKeyRef:
              key: "jwt-signing-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.JWT_SIGNING_CERT }}
        - name: "JWT_SIGNING_CERT"
          valueFrom:
            secretKeyRef:
              key: "jwt-signing-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.JWT_SIGNING_KEY }}
        - name: "JWT_SIGNING_KEY"
          valueFrom:
            secretKeyRef:
              key: "jwt-signing-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.JWT_SIGNING_KEY }}
        - name: "JWT_SIGNING_KEY"
          valueFrom:
            secretKeyRef:
              key: "jwt-signing-key"
              name: "secrets"
        {{- end }}

        - name: "KUBERNETES_CLUSTER_DOMAIN"
          value: {{if ne (typeOf .Values.env.KUBERNETES_CLUSTER_DOMAIN) "<nil>"}}{{if has (kindOf .Values.env.KUBERNETES_CLUSTER_DOMAIN) (list "map" "slice")}}{{.Values.env.KUBERNETES_CLUSTER_DOMAIN | toJson | quote}}{{else}}{{.Values.env.KUBERNETES_CLUSTER_DOMAIN | quote}}{{end}}{{else}}""{{end}}
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "LOG_LEVEL"
          value: {{if ne (typeOf .Values.env.LOG_LEVEL) "<nil>"}}{{if has (kindOf .Values.env.LOG_LEVEL) (list "map" "slice")}}{{.Values.env.LOG_LEVEL | toJson | quote}}{{else}}{{.Values.env.LOG_LEVEL | quote}}{{end}}{{else}}{{fail "env.LOG_LEVEL has not been set"}}{{end}}

        {{- if not .Values.secrets.MONIT_PASSWORD }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MONIT_PASSWORD }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets"
        {{- end }}

        {{- if .Values.secrets.SAML_SERVICEPROVIDER_CERT }}
        - name: "SAML_SERVICEPROVIDER_CERT"
          valueFrom:
            secretKeyRef:
              key: "saml-serviceprovider-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.SAML_SERVICEPROVIDER_CERT }}
        - name: "SAML_SERVICEPROVIDER_CERT"
          valueFrom:
            secretKeyRef:
              key: "saml-serviceprovider-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.SAML_SERVICEPROVIDER_KEY }}
        - name: "SAML_SERVICEPROVIDER_KEY"
          valueFrom:
            secretKeyRef:
              key: "saml-serviceprovider-key"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.SAML_SERVICEPROVIDER_KEY }}
        - name: "SAML_SERVICEPROVIDER_KEY"
          valueFrom:
            secretKeyRef:
              key: "saml-serviceprovider-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        - name: "SCF_LOG_HOST"
          value: {{if ne (typeOf .Values.env.SCF_LOG_HOST) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_HOST) (list "map" "slice")}}{{.Values.env.SCF_LOG_HOST | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_HOST | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_PORT"
          value: {{if ne (typeOf .Values.env.SCF_LOG_PORT) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_PORT) (list "map" "slice")}}{{.Values.env.SCF_LOG_PORT | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_PORT | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_PROTOCOL"
          value: {{if ne (typeOf .Values.env.SCF_LOG_PROTOCOL) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_PROTOCOL) (list "map" "slice")}}{{.Values.env.SCF_LOG_PROTOCOL | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_PROTOCOL | quote}}{{end}}{{else}}{{fail "env.SCF_LOG_PROTOCOL has not been set"}}{{end}}

        {{- if not .Values.secrets.UAADB_PASSWORD }}
        - name: "UAADB_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "uaadb-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.UAADB_PASSWORD }}
        - name: "UAADB_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "uaadb-password"
              name: "secrets"
        {{- end }}

        - name: "UAA_ADMIN_CLIENT_SECRET"
          valueFrom:
            secretKeyRef:
              key: "uaa-admin-client-secret"
              name: "secrets"

        {{- if not .Values.secrets.UAA_SERVER_CERT }}
        - name: "UAA_SERVER_CERT"
          valueFrom:
            secretKeyRef:
              key: "uaa-server-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.UAA_SERVER_CERT }}
        - name: "UAA_SERVER_CERT"
          valueFrom:
            secretKeyRef:
              key: "uaa-server-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.UAA_SERVER_KEY }}
        - name: "UAA_SERVER_KEY"
          valueFrom:
            secretKeyRef:
              key: "uaa-server-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.UAA_SERVER_KEY }}
        - name: "UAA_SERVER_KEY"
          valueFrom:
            secretKeyRef:
              key: "uaa-server-key"
              name: "secrets"
        {{- end }}

        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/uaa-uaa:44757b334551f0db4de92fdca5e72320267d258b"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "uaa"
        ports:
        - containerPort: 8080
          name: "uaa"
          protocol: "TCP"
        - containerPort: 8443
          name: "uaa-ssl"
          protocol: "TCP"
        readinessProbe:
          exec:
            command:
            - "/opt/fissile/readiness-probe.sh"
            - "curl --resolve uaa:8443:$(getent hosts ${HOSTNAME} | awk '{ print $1 }') --fail -H 'Host: uaa' -H 'Accept: application/json' https://uaa:8443/info"
        resources:
          requests:
            {{- if and .Values.config.memory.requests .Values.sizing.uaa.memory.request }}
            memory: "{{ int .Values.sizing.uaa.memory.request }}Mi"
            {{- end }}

            {{- if and .Values.config.cpu.requests .Values.sizing.uaa.cpu.request }}
            cpu: "{{ int .Values.sizing.uaa.cpu.request }}m"
            {{- end }}

          limits:
            {{- if and .Values.config.memory.limits .Values.sizing.uaa.memory.limit }}
            memory: "{{ int .Values.sizing.uaa.memory.limit }}Mi"
            {{- end }}

            {{- if and .Values.config.cpu.limits .Values.sizing.uaa.cpu.limit }}
            cpu: "{{ int .Values.sizing.uaa.cpu.limit }}m"
            {{- end }}

        securityContext:
          {{- if has "ALL" .Values.sizing.uaa.capabilities }}
          privileged: true
          {{- end }}

          {{- if not (has "ALL" .Values.sizing.uaa.capabilities) }}
          capabilities:
            add:
            {{- range .Values.sizing.uaa.capabilities }}
            - {{ . | upper }}
            {{- end }}
          {{- end }}

        volumeMounts: ~
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
      terminationGracePeriodSeconds: 600
      volumes: ~
  {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 7)) }}
  updateStrategy:
    type: "RollingUpdate"
  {{- end }}
---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "uaa-set"
  spec:
    clusterIP: "None"
    ports:
    - name: "uaa"
      port: 8080
      protocol: "TCP"
      targetPort: 0
    - name: "uaa-ssl"
      port: 2793
      protocol: "TCP"
      targetPort: 0
    selector:
      skiff-role-name: "uaa"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "uaa"
  spec:
    ports:
    - name: "uaa"
      port: 8080
      protocol: "TCP"
      targetPort: "uaa"
    - name: "uaa-ssl"
      port: 2793
      protocol: "TCP"
      targetPort: "uaa-ssl"
    selector:
      skiff-role-name: "uaa"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "uaa-public"
  spec:
    {{- if not .Values.services.loadbalanced }}
    externalIPs: {{ .Values.kube.external_ips | toJson }}
    {{- end }}

    ports:
    - name: "uaa-ssl"
      port: 2793
      protocol: "TCP"
      targetPort: "uaa-ssl"
    selector:
      skiff-role-name: "uaa"

    {{- if .Values.services.loadbalanced }}
    type: "LoadBalancer"
    {{- end }}

kind: "List"
