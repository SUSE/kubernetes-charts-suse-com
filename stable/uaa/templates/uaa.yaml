---
# The uaa role contains the following jobs:
#
# - global-properties: Dummy BOSH job used to host global parameters that are
#   required to configure SCF / fissile
#
# - uaa: The UAA is the identity management service for Cloud Foundry. It's
#   primary role is as an OAuth2 provider, issuing tokens for client
#   applications to use when they act on behalf of Cloud Foundry users. It can
#   also authenticate users with their Cloud Foundry credentials, and can act as
#   an SSO service using those credentials (or others). It has endpoints for
#   managing user accounts and for registering OAuth2 clients, as well as
#   various other management functions.

{{- if gt (int .Values.sizing.uaa.count) 65535 }}
_maxReplicas: {{ fail "uaa cannot have more than 65535 instances" }}
{{- end }}

{{- if lt (int .Values.sizing.memory.limit_factor) 1 }}
_minLimitFactor: {{ fail "The memory limit factor must be at least 1" }}
{{- end }}

{{- if lt (int .Values.sizing.uaa.count) 1 }}
_minReplicas: {{ fail "uaa must have at least 1 instances" }}
{{- end }}

apiVersion: "extensions/v1beta1"
kind: "Deployment"
metadata:
  name: "uaa"
  labels:
    skiff-role-name: "uaa"
spec:
  replicas: {{ .Values.sizing.uaa.count }}
  selector:
    matchLabels:
      skiff-role-name: "uaa"
  template:
    metadata:
      name: "uaa"
      labels:
        skiff-role-name: "uaa"
    spec:
      containers:
      - env:
        - name: "DOMAIN"
          value: {{ required "DOMAIN configuration missing" .Values.env.DOMAIN | quote }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secret-{{ .Release.Revision }}"
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secret-{{ .Release.Revision }}"
        - name: "JWT_SIGNING_CERT"
          valueFrom:
            secretKeyRef:
              key: "jwt-signing-cert"
              name: "secret-{{ .Release.Revision }}"
        - name: "JWT_SIGNING_KEY"
          valueFrom:
            secretKeyRef:
              key: "jwt-signing-key"
              name: "secret-{{ .Release.Revision }}"
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "KUBE_SERVICE_DOMAIN_SUFFIX"
          value: {{ .Values.env.KUBE_SERVICE_DOMAIN_SUFFIX | quote }}
        - name: "LOG_LEVEL"
          value: {{ required "LOG_LEVEL configuration missing" .Values.env.LOG_LEVEL | quote }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secret-{{ .Release.Revision }}"
        - name: "RELEASE_REVISION"
          value: {{ .Release.Revision | quote }}
        - name: "SAML_SERVICEPROVIDER_CERT"
          valueFrom:
            secretKeyRef:
              key: "saml-serviceprovider-cert"
              name: "secret-{{ .Release.Revision }}"
        - name: "SAML_SERVICEPROVIDER_KEY"
          valueFrom:
            secretKeyRef:
              key: "saml-serviceprovider-key"
              name: "secret-{{ .Release.Revision }}"
        - name: "UAADB_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "uaadb-password"
              name: "secret-{{ .Release.Revision }}"
        - name: "UAA_ADMIN_CLIENT_SECRET"
          valueFrom:
            secretKeyRef:
              key: "uaa-admin-client-secret"
              name: "secret-{{ .Release.Revision }}"
        - name: "UAA_SERVER_CERT"
          valueFrom:
            secretKeyRef:
              key: "uaa-server-cert"
              name: "secret-{{ .Release.Revision }}"
        - name: "UAA_SERVER_KEY"
          valueFrom:
            secretKeyRef:
              key: "uaa-server-key"
              name: "secret-{{ .Release.Revision }}"
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/uaa-uaa:c83570ccc02d53aa7c86c6483fedfcb95a1d29f2"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "uaa"
        ports:
        - containerPort: 8080
          name: "uaa"
          protocol: "TCP"
        - containerPort: 8443
          name: "uaa-ssl"
          protocol: "TCP"
        readinessProbe:
          failureThreshold: 0
          httpGet:
            httpHeaders:
            - name: "Host"
              value: "uaa"
            - name: "Accept"
              value: "application/json"
            path: "/info"
            port: 8443
            scheme: "HTTPS"
          initialDelaySeconds: 0
          periodSeconds: 0
          successThreshold: 0
          timeoutSeconds: 0
        resources:
          {{- if .Values.sizing.memory.requests }}
          requests:
            memory: "{{ int .Values.sizing.uaa.memory }}Mi"
          {{- end }}

          {{- if .Values.sizing.memory.limits }}
          limits:
            memory: "{{ (mul (int .Values.sizing.memory.limit_factor) (int .Values.sizing.uaa.memory)) }}Mi"
          {{- end }}

        securityContext: ~
        volumeMounts: ~
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
      terminationGracePeriodSeconds: 600
---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "uaa"
  spec:
    ports:
    - name: "uaa"
      port: 8080
      protocol: "TCP"
      targetPort: "uaa"
    - name: "uaa-ssl"
      port: 2793
      protocol: "TCP"
      targetPort: "uaa-ssl"
    selector:
      skiff-role-name: "uaa"
    type: {{ if .Values.services.loadbalanced }} LoadBalancer {{ else }} ClusterIP {{ end }}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "uaa-public"
  spec:
    externalIPs: {{ 				default 					( append .Values.kube.external_ips 						( .Values.kube.external_ip ) 					) 					.Values.kube.external_ips 				| toJson 			}}
    ports:
    - name: "uaa-ssl"
      port: 2793
      protocol: "TCP"
      targetPort: "uaa-ssl"
    selector:
      skiff-role-name: "uaa"
    type: {{ if .Values.services.loadbalanced }} LoadBalancer {{ else }} ClusterIP {{ end }}
kind: "List"
