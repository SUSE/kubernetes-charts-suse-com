---
{{- if .Values.enable.mysql }}
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "mysql-set"
    labels:
      app.kubernetes.io/component: "mysql-set"
      skiff-role-name: "mysql-set"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "mysql-set"
      {{- end }}
  spec:
    clusterIP: "None"
    ports:
    - name: "pxc-mysql"
      port: 3306
      protocol: "TCP"
      targetPort: 0
    - name: "galera-tcp"
      port: 4567
      protocol: "TCP"
      targetPort: 0
    - name: "galera-agent"
      port: 9200
      protocol: "TCP"
      targetPort: 0
    selector:
      app.kubernetes.io/component: "mysql"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "mysql-pxc-mysql-set"
    labels:
      app.kubernetes.io/component: "mysql-pxc-mysql-set"
      skiff-role-name: "mysql-pxc-mysql-set"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "mysql-pxc-mysql-set"
      {{- end }}
  spec:
    clusterIP: "None"
    ports:
    - name: "pxc-mysql"
      port: 3306
      protocol: "TCP"
      targetPort: 0
    - name: "galera-tcp"
      port: 4567
      protocol: "TCP"
      targetPort: 0
    - name: "galera-agent"
      port: 9200
      protocol: "TCP"
      targetPort: 0
    selector:
      app.kubernetes.io/component: "mysql"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "mysql-pxc-mysql"
    labels:
      app.kubernetes.io/component: "mysql-pxc-mysql"
      skiff-role-name: "mysql-pxc-mysql"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "mysql-pxc-mysql"
      {{- end }}
  spec:
    ports:
    - name: "pxc-mysql"
      port: 3306
      protocol: "TCP"
      targetPort: 3306
    - name: "galera-tcp"
      port: 4567
      protocol: "TCP"
      targetPort: 4567
    - name: "galera-agent"
      port: 9200
      protocol: "TCP"
      targetPort: 9200
    selector:
      app.kubernetes.io/component: "mysql"
kind: "List"
{{- end }}
---
# The mysql instance group contains the following jobs:
#
# - global-uaa-properties: Dummy BOSH job used to host global parameters that
#   are required to configure SCF / fissile
#
# - patch-properties: Dummy BOSH job used to host parameters that are used in
#   SCF patches for upstream bugs
#
# Also: pxc-mysql, galera-agent, gra-log-purger, cluster-health-logger,
# bootstrap, mysql, and bpm
{{- if .Values.enable.mysql }}

{{- if and (ne (typeOf .Values.sizing.mysql.count) "<nil>") (gt (int .Values.sizing.mysql.count) 7) }}
_maxReplicas: {{ fail "mysql cannot have more than 7 instances" }}
{{- end }}

{{- if and .Values.config.HA .Values.config.HA_strict (ne (typeOf .Values.sizing.mysql.count) "<nil>") (lt (int .Values.sizing.mysql.count) 3) }}
_minHAReplicas: {{ fail "mysql must have at least 3 instances for HA" }}
{{- end }}

{{- if and (ne (typeOf .Values.sizing.mysql.count) "<nil>") (lt (int .Values.sizing.mysql.count) 1) }}
_minReplicas: {{ fail "mysql must have at least 1 instances" }}
{{- end }}

{{- if .Values.sizing.HA }}
_moved_sizing_HA: {{ fail "Bad use of moved variable sizing.HA. The new name to use is config.HA" }}
{{- end }}

{{- if .Values.sizing.cpu }}
_moved_sizing_cpu_limits: {{ if .Values.sizing.cpu.limits }} {{ fail "Bad use of moved variable sizing.cpu.limits. The new name to use is config.cpu.limits" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.cpu }}
_moved_sizing_cpu_requests: {{ if .Values.sizing.cpu.requests }} {{ fail "Bad use of moved variable sizing.cpu.requests. The new name to use is config.cpu.requests" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.memory }}
_moved_sizing_memory_limits: {{ if .Values.sizing.memory.limits }} {{ fail "Bad use of moved variable sizing.memory.limits. The new name to use is config.memory.limits" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.memory }}
_moved_sizing_memory_requests: {{ if .Values.sizing.memory.requests }} {{ fail "Bad use of moved variable sizing.memory.requests. The new name to use is config.memory.requests" }} {{else}} ok {{end}}
{{- end }}

{{- if and (ne (typeOf .Values.sizing.mysql.count) "<nil>") (eq (mod (int .Values.sizing.mysql.count) 2) 0) }}
_oddReplicas: {{ fail "mysql must have an odd instance count" }}
{{- end }}

apiVersion: {{ if (.Capabilities.APIVersions.Has "apps/v1") }}apps/v1{{ else }}apps/v1beta1{{ end }}
kind: "StatefulSet"
metadata:
  name: "mysql"
  labels:
    app.kubernetes.io/component: "mysql"
    skiff-role-name: "mysql"
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}

    {{- if .Values.config.use_istio }}
    app: "mysql"
    {{- end }}

    {{- if .Values.config.use_istio }}
    version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    {{- end }}

spec:
  podManagementPolicy: "OrderedReady"
  replicas: {{ if (ne (typeOf .Values.sizing.mysql.count) "<nil>") }}{{ .Values.sizing.mysql.count }}{{ else }}{{ if .Values.config.HA }}{{ 3 }}{{ else }}{{ 1 }}{{ end }}{{ end }}
  selector:
    matchLabels:
      skiff-role-name: "mysql"
  serviceName: "mysql-set"
  template:
    metadata:
      name: "mysql"
      labels:
        app.kubernetes.io/component: "mysql"
        skiff-role-name: "mysql"
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
        app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
        helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}

        {{- if .Values.config.use_istio }}
        app: "mysql"
        {{- end }}

        {{- if .Values.config.use_istio }}
        version: {{ default .Chart.Version .Chart.AppVersion | quote }}
        {{- end }}

      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if .Values.config.use_istio }}
        sidecar.istio.io/inject: "false"
        {{- end }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app.kubernetes.io/component"
                  operator: "In"
                  values:
                  - "mysql"
              topologyKey: "beta.kubernetes.io/os"
            weight: 100
        {{- if .Values.sizing.mysql.affinity.nodeAffinity }}
        nodeAffinity: {{ toJson .Values.sizing.mysql.affinity.nodeAffinity }}
        {{- end }}
      containers:
      - env:
        {{- if not .Values.secrets.GALERA_SERVER_CERT }}
        - name: "GALERA_SERVER_CERT"
          valueFrom:
            secretKeyRef:
              key: "galera-server-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.GALERA_SERVER_CERT }}
        - name: "GALERA_SERVER_CERT"
          valueFrom:
            secretKeyRef:
              key: "galera-server-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.GALERA_SERVER_CERT_KEY }}
        - name: "GALERA_SERVER_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "galera-server-cert-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.GALERA_SERVER_CERT_KEY }}
        - name: "GALERA_SERVER_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "galera-server-cert-key"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets"
        {{- end }}

        - name: "KUBERNETES_CLUSTER_DOMAIN"
          value: {{if ne (typeOf .Values.env.KUBERNETES_CLUSTER_DOMAIN) "<nil>"}}{{if has (kindOf .Values.env.KUBERNETES_CLUSTER_DOMAIN) (list "map" "slice")}}{{.Values.env.KUBERNETES_CLUSTER_DOMAIN | toJson | quote}}{{else}}{{.Values.env.KUBERNETES_CLUSTER_DOMAIN | quote}}{{end}}{{else}}""{{end}}
        - name: "KUBERNETES_CONTAINER_NAME"
          value: "mysql"
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"

        {{- if .Values.secrets.MONIT_PASSWORD }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MONIT_PASSWORD }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_ADMIN_PASSWORD }}
        - name: "MYSQL_ADMIN_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-admin-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_ADMIN_PASSWORD }}
        - name: "MYSQL_ADMIN_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-admin-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_CLUSTER_HEALTH_PASSWORD }}
        - name: "MYSQL_CLUSTER_HEALTH_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-cluster-health-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_CLUSTER_HEALTH_PASSWORD }}
        - name: "MYSQL_CLUSTER_HEALTH_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-cluster-health-password"
              name: "secrets"
        {{- end }}

        {{- if .Values.secrets.MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD }}
        - name: "MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-galera-healthcheck-endpoint-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD }}
        - name: "MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-galera-healthcheck-endpoint-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_SERVER_CERT }}
        - name: "MYSQL_SERVER_CERT"
          valueFrom:
            secretKeyRef:
              key: "mysql-server-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_SERVER_CERT }}
        - name: "MYSQL_SERVER_CERT"
          valueFrom:
            secretKeyRef:
              key: "mysql-server-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_SERVER_CERT_KEY }}
        - name: "MYSQL_SERVER_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "mysql-server-cert-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_SERVER_CERT_KEY }}
        - name: "MYSQL_SERVER_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "mysql-server-cert-key"
              name: "secrets"
        {{- end }}

        - name: "SCF_LOG_HOST"
          value: {{if ne (typeOf .Values.env.SCF_LOG_HOST) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_HOST) (list "map" "slice")}}{{.Values.env.SCF_LOG_HOST | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_HOST | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_PORT"
          value: {{if ne (typeOf .Values.env.SCF_LOG_PORT) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_PORT) (list "map" "slice")}}{{.Values.env.SCF_LOG_PORT | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_PORT | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_PROTOCOL"
          value: {{if ne (typeOf .Values.env.SCF_LOG_PROTOCOL) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_PROTOCOL) (list "map" "slice")}}{{.Values.env.SCF_LOG_PROTOCOL | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_PROTOCOL | quote}}{{end}}{{else}}{{fail "env.SCF_LOG_PROTOCOL has not been set"}}{{end}}

        {{- if not .Values.secrets.UAADB_PASSWORD }}
        - name: "UAADB_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "uaadb-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.UAADB_PASSWORD }}
        - name: "UAADB_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "uaadb-password"
              name: "secrets"
        {{- end }}

        - name: "VCAP_HARD_NPROC"
          value: {{ .Values.kube.limits.nproc.hard | quote }}
        - name: "VCAP_SOFT_NPROC"
          value: {{ .Values.kube.limits.nproc.soft | quote }}
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/uaa-mysql:0a5d7be2172357cf33df2061dd44e6b15087621d"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "mysql"
        ports:
        - containerPort: 3306
          name: "pxc-mysql"
          protocol: "TCP"
        - containerPort: 4567
          name: "galera-tcp"
          protocol: "TCP"
        - containerPort: 9200
          name: "galera-agent"
          protocol: "TCP"
        readinessProbe:
          exec:
            command:
            - "/opt/fissile/readiness-probe.sh"
            - "[[ $(curl --silent http://${HOSTNAME}:9200/api/v1/status | jq '.healthy') == true ]]"
        resources:
          requests:
            {{- if and .Values.config.memory.requests .Values.sizing.mysql.memory.request }}
            memory: "{{ int .Values.sizing.mysql.memory.request }}Mi"
            {{- end }}

            {{- if and .Values.config.cpu.requests .Values.sizing.mysql.cpu.request }}
            cpu: "{{ int .Values.sizing.mysql.cpu.request }}m"
            {{- end }}

          limits:
            {{- if and .Values.config.memory.limits .Values.sizing.mysql.memory.limit }}
            memory: "{{ int .Values.sizing.mysql.memory.limit }}Mi"
            {{- end }}

            {{- if and .Values.config.cpu.limits .Values.sizing.mysql.cpu.limit }}
            cpu: "{{ int .Values.sizing.mysql.cpu.limit }}m"
            {{- end }}

        securityContext:
          allowPrivilegeEscalation: true
          privileged: true
        volumeMounts:
        - mountPath: "/var/vcap/store"
          name: "mysql-data"
          readOnly: false
        - mountPath: "/opt/fissile/config"
          name: "deployment-manifest"
          readOnly: true
      dnsPolicy: "ClusterFirst"

      {{- if ne .Values.kube.registry.username "" }}
      imagePullSecrets:
      - name: "registry-credentials"
      {{- end }}

      restartPolicy: "Always"

      {{- if and (eq (printf "%s" .Values.kube.auth) "rbac") (.Capabilities.APIVersions.Has "rbac.authorization.k8s.io/v1") }}
      serviceAccountName: "default"
      {{- end }}

      terminationGracePeriodSeconds: 600
      volumes:
      - name: "deployment-manifest"
        secret:
          secretName: "deployment-manifest"
          items:
          - key: "deployment-manifest"
            path: "deployment-manifest.yml"
  {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 7)) }}
  updateStrategy:
    type: "RollingUpdate"
  {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: "mysql-data"
      annotations:
        volume.beta.kubernetes.io/storage-class: {{ .Values.kube.storage_class.persistent | quote }}
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "{{ .Values.sizing.mysql.disk_sizes.mysql_data }}G"
{{- end }}
