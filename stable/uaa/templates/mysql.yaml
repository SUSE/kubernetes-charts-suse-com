---
# The mysql role contains the following jobs:
#
# - global-uaa-properties: Dummy BOSH job used to host global parameters that
#   are required to configure SCF / fissile
#
# - patch-properties: Dummy BOSH job used to host parameters that are used in
#   SCF patches for upstream bugs
#
# Also: mysql

{{- if gt (int .Values.sizing.mysql.count) 3 }}
_maxReplicas: {{ fail "mysql cannot have more than 3 instances" }}
{{- end }}

{{- if and .Values.config.HA (and (ne (int .Values.sizing.mysql.count) 1) (lt (int .Values.sizing.mysql.count) 2)) }}
_minHAReplicas: {{ fail "mysql must have at least 2 instances for HA" }}
{{- end }}

{{- if lt (int .Values.sizing.mysql.count) 1 }}
_minReplicas: {{ fail "mysql must have at least 1 instances" }}
{{- end }}

{{- if .Values.sizing.HA }}
_moved_sizing_HA: {{ fail "Bad use of moved variable sizing.HA. The new name to use is config.HA" }}
{{- end }}

{{- if .Values.sizing.cpu }}
_moved_sizing_cpu_limits: {{ if .Values.sizing.cpu.limits }} {{ fail "Bad use of moved variable sizing.cpu.limits. The new name to use is config.cpu.limits" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.cpu }}
_moved_sizing_cpu_requests: {{ if .Values.sizing.cpu.requests }} {{ fail "Bad use of moved variable sizing.cpu.requests. The new name to use is config.cpu.requests" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.memory }}
_moved_sizing_memory_limits: {{ if .Values.sizing.memory.limits }} {{ fail "Bad use of moved variable sizing.memory.limits. The new name to use is config.memory.limits" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.memory }}
_moved_sizing_memory_requests: {{ if .Values.sizing.memory.requests }} {{ fail "Bad use of moved variable sizing.memory.requests. The new name to use is config.memory.requests" }} {{else}} ok {{end}}
{{- end }}

apiVersion: "apps/v1beta1"
kind: "StatefulSet"
metadata:
  name: "mysql"
  labels:
    skiff-role-name: "mysql"
spec:
  podManagementPolicy: "OrderedReady"
  replicas: {{ if and .Values.config.HA (eq (int .Values.sizing.mysql.count) 1) -}} 2 {{- else -}} {{ .Values.sizing.mysql.count }} {{- end }}
  serviceName: "mysql-set"
  template:
    metadata:
      name: "mysql"
      labels:
        skiff-role-name: "mysql"
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
    spec:
      containers:
      - env:
        - name: "KUBERNETES_CLUSTER_DOMAIN"
          value: {{if ne (typeOf .Values.env.KUBERNETES_CLUSTER_DOMAIN) "<nil>"}}{{if has (kindOf .Values.env.KUBERNETES_CLUSTER_DOMAIN) (list "map" "slice")}}{{.Values.env.KUBERNETES_CLUSTER_DOMAIN | toJson | quote}}{{else}}{{.Values.env.KUBERNETES_CLUSTER_DOMAIN | quote}}{{end}}{{else}}""{{end}}
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"

        {{- if .Values.secrets.MONIT_PASSWORD }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MONIT_PASSWORD }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_ADMIN_PASSWORD }}
        - name: "MYSQL_ADMIN_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-admin-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_ADMIN_PASSWORD }}
        - name: "MYSQL_ADMIN_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-admin-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_CLUSTER_HEALTH_PASSWORD }}
        - name: "MYSQL_CLUSTER_HEALTH_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-cluster-health-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_CLUSTER_HEALTH_PASSWORD }}
        - name: "MYSQL_CLUSTER_HEALTH_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-cluster-health-password"
              name: "secrets"
        {{- end }}

        {{- if .Values.secrets.MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD }}
        - name: "MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-galera-healthcheck-endpoint-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD }}
        - name: "MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-galera-healthcheck-endpoint-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        - name: "SCF_LOG_HOST"
          value: {{if ne (typeOf .Values.env.SCF_LOG_HOST) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_HOST) (list "map" "slice")}}{{.Values.env.SCF_LOG_HOST | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_HOST | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_PORT"
          value: {{if ne (typeOf .Values.env.SCF_LOG_PORT) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_PORT) (list "map" "slice")}}{{.Values.env.SCF_LOG_PORT | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_PORT | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_PROTOCOL"
          value: {{if ne (typeOf .Values.env.SCF_LOG_PROTOCOL) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_PROTOCOL) (list "map" "slice")}}{{.Values.env.SCF_LOG_PROTOCOL | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_PROTOCOL | quote}}{{end}}{{else}}{{fail "env.SCF_LOG_PROTOCOL has not been set"}}{{end}}

        {{- if not .Values.secrets.UAADB_PASSWORD }}
        - name: "UAADB_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "uaadb-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.UAADB_PASSWORD }}
        - name: "UAADB_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "uaadb-password"
              name: "secrets"
        {{- end }}

        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/uaa-mysql:f9bcf803e6f846e511bb7d81c9b570f96193f59f"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "mysql"
        ports:
        - containerPort: 3306
          name: "mysql"
          protocol: "TCP"
        - containerPort: 4567
          name: "galera-tcp"
          protocol: "TCP"
        - containerPort: 4567
          name: "galera-udp"
          protocol: "UDP"
        - containerPort: 4568
          name: "galera-ist"
          protocol: "TCP"
        - containerPort: 9200
          name: "healthcheck"
          protocol: "TCP"
        - containerPort: 4444
          name: "xtrabackup"
          protocol: "TCP"
        readinessProbe:
          exec:
            command:
            - "/opt/fissile/readiness-probe.sh"
            - "curl --silent --fail http://${HOSTNAME}:9200/"
        resources:
          requests:
            {{- if and .Values.config.memory.requests .Values.sizing.mysql.memory.request }}
            memory: "{{ int .Values.sizing.mysql.memory.request }}Mi"
            {{- end }}

            {{- if and .Values.config.cpu.requests .Values.sizing.mysql.cpu.request }}
            cpu: "{{ int .Values.sizing.mysql.cpu.request }}m"
            {{- end }}

          limits:
            {{- if and .Values.config.memory.limits .Values.sizing.mysql.memory.limit }}
            memory: "{{ int .Values.sizing.mysql.memory.limit }}Mi"
            {{- end }}

            {{- if and .Values.config.cpu.limits .Values.sizing.mysql.cpu.limit }}
            cpu: "{{ int .Values.sizing.mysql.cpu.limit }}m"
            {{- end }}

        securityContext:
          {{- if has "ALL" .Values.sizing.mysql.capabilities }}
          privileged: true
          {{- end }}

          {{- if not (has "ALL" .Values.sizing.mysql.capabilities) }}
          capabilities:
            add:
            {{- range .Values.sizing.mysql.capabilities }}
            - {{ . | upper }}
            {{- end }}
          {{- end }}

        volumeMounts:
        - mountPath: "/var/vcap/store"
          name: "mysql-data"
          readOnly: false
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
      terminationGracePeriodSeconds: 600
      volumes: ~
  {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 7)) }}
  updateStrategy:
    type: "RollingUpdate"
  {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: "mysql-data"
      annotations:
        volume.beta.kubernetes.io/storage-class: {{ .Values.kube.storage_class.persistent | quote }}
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "{{ .Values.sizing.mysql.disk_sizes.mysql_data }}G"
---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "mysql-set"
  spec:
    clusterIP: "None"
    ports:
    - name: "mysql"
      port: 3306
      protocol: "TCP"
      targetPort: 0
    - name: "galera-tcp"
      port: 4567
      protocol: "TCP"
      targetPort: 0
    - name: "galera-udp"
      port: 4567
      protocol: "UDP"
      targetPort: 0
    - name: "galera-ist"
      port: 4568
      protocol: "TCP"
      targetPort: 0
    - name: "healthcheck"
      port: 9200
      protocol: "TCP"
      targetPort: 0
    - name: "xtrabackup"
      port: 4444
      protocol: "TCP"
      targetPort: 0
    selector:
      skiff-role-name: "mysql"
kind: "List"
