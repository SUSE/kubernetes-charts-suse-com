---
# Service account "secret-generator" is used by the following instance groups:
# - secret-generation
{{- if and (eq (printf "%s" .Values.kube.auth) "rbac") (.Capabilities.APIVersions.Has "rbac.authorization.k8s.io/v1") }}
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  name: "secret-generator"
  labels:
    app.kubernetes.io/component: "secret-generator"
    skiff-role-name: "secret-generator"
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
{{- end }}
---
# Role binding for service account "secret-generator" and role "configgin-role"
{{- if and (eq (printf "%s" .Values.kube.auth) "rbac") (.Capabilities.APIVersions.Has "rbac.authorization.k8s.io/v1") }}
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "RoleBinding"
metadata:
  name: "secret-generator-configgin-role-binding"
  labels:
    app.kubernetes.io/component: "secret-generator-configgin-role-binding"
    skiff-role-name: "secret-generator-configgin-role-binding"
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
subjects:
- kind: "ServiceAccount"
  name: "secret-generator"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "Role"
  name: "configgin-role"
{{- end }}
---
# Role "secrets-role" only used by account "[- secret-generator]"
{{- if and (eq (printf "%s" .Values.kube.auth) "rbac") (.Capabilities.APIVersions.Has "rbac.authorization.k8s.io/v1") }}
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "Role"
metadata:
  name: "secrets-role"
  labels:
    app.kubernetes.io/component: "secrets-role"
    skiff-role-name: "secrets-role"
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
rules:
- apiGroups:
  - ""
  resources:
  - "configmaps"
  - "secrets"
  verbs:
  - "create"
  - "get"
  - "list"
  - "patch"
  - "update"
  - "delete"
{{- end }}
---
# Role binding for service account "secret-generator" and role "secrets-role"
{{- if and (eq (printf "%s" .Values.kube.auth) "rbac") (.Capabilities.APIVersions.Has "rbac.authorization.k8s.io/v1") }}
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "RoleBinding"
metadata:
  name: "secret-generator-secrets-role-binding"
  labels:
    app.kubernetes.io/component: "secret-generator-secrets-role-binding"
    skiff-role-name: "secret-generator-secrets-role-binding"
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
subjects:
- kind: "ServiceAccount"
  name: "secret-generator"
roleRef:
  apiGroup: "rbac.authorization.k8s.io"
  kind: "Role"
  name: "secrets-role"
{{- end }}
---
# Cluster role binding for service account "secret-generator" and cluster role
# "nonprivileged"
{{- if and (eq (printf "%s" .Values.kube.auth) "rbac") (.Capabilities.APIVersions.Has "rbac.authorization.k8s.io/v1") }}
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  name: {{ template "fissile.SanitizeName" (printf "%s-secret-generator-nonprivileged-cluster-binding" .Release.Namespace) }}
  labels:
    app.kubernetes.io/component: {{ template "fissile.SanitizeName" (printf "%s-secret-generator-nonprivileged-cluster-binding" .Release.Namespace) }}
    skiff-role-name: {{ template "fissile.SanitizeName" (printf "%s-secret-generator-nonprivileged-cluster-binding" .Release.Namespace) }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
subjects:
- kind: "ServiceAccount"
  name: "secret-generator"
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: "ClusterRole"
  apiGroup: "rbac.authorization.k8s.io"
  name: {{ template "fissile.SanitizeName" (printf "%s-cluster-role-nonprivileged" .Release.Namespace) }}
{{- end }}
---
# The secret-generation instance group contains the following jobs:
#
# - generate-secrets: This job will generate the secrets for the cluster
apiVersion: "batch/v1"
kind: "Job"
metadata:
  name: "secret-generation-{{ .Release.Revision }}"
  labels:
    app.kubernetes.io/component: "secret-generation-{{ .Release.Revision }}"
    skiff-role-name: "secret-generation-{{ .Release.Revision }}"
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
spec:
  template:
    metadata:
      name: "secret-generation"
      labels:
        app.kubernetes.io/component: "secret-generation"
        skiff-role-name: "secret-generation"
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
        app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
        helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}

        {{- if .Values.config.use_istio }}
        app: "secret-generation"
        {{- end }}

        {{- if .Values.config.use_istio }}
        version: {{ default .Chart.Version .Chart.AppVersion | quote }}
        {{- end }}

      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
    spec:
      containers:
      - env:
        - name: "CERT_EXPIRATION"
          value: {{if ne (typeOf .Values.env.CERT_EXPIRATION) "<nil>"}}{{if has (kindOf .Values.env.CERT_EXPIRATION) (list "map" "slice")}}{{.Values.env.CERT_EXPIRATION | toJson | quote}}{{else}}{{.Values.env.CERT_EXPIRATION | quote}}{{end}}{{else}}""{{end}}
        - name: "DOMAIN"
          value: {{if ne (typeOf .Values.env.DOMAIN) "<nil>"}}{{if has (kindOf .Values.env.DOMAIN) (list "map" "slice")}}{{.Values.env.DOMAIN | toJson | quote}}{{else}}{{.Values.env.DOMAIN | quote}}{{end}}{{else}}{{fail "env.DOMAIN has not been set"}}{{end}}
        - name: "HELM_IS_INSTALL"
          value: {{ .Release.IsInstall | quote }}
        - name: "KUBERNETES_CLUSTER_DOMAIN"
          value: {{if ne (typeOf .Values.env.KUBERNETES_CLUSTER_DOMAIN) "<nil>"}}{{if has (kindOf .Values.env.KUBERNETES_CLUSTER_DOMAIN) (list "map" "slice")}}{{.Values.env.KUBERNETES_CLUSTER_DOMAIN | toJson | quote}}{{else}}{{.Values.env.KUBERNETES_CLUSTER_DOMAIN | quote}}{{end}}{{else}}""{{end}}
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "KUBE_SECRETS_GENERATION_COUNTER"
          value: {{ .Values.kube.secrets_generation_counter | quote }}
        - name: "KUBE_SECRETS_GENERATION_NAME"
          value: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "SCF_LOG_HOST"
          value: {{if ne (typeOf .Values.env.SCF_LOG_HOST) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_HOST) (list "map" "slice")}}{{.Values.env.SCF_LOG_HOST | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_HOST | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_PORT"
          value: {{if ne (typeOf .Values.env.SCF_LOG_PORT) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_PORT) (list "map" "slice")}}{{.Values.env.SCF_LOG_PORT | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_PORT | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_PROTOCOL"
          value: {{if ne (typeOf .Values.env.SCF_LOG_PROTOCOL) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_PROTOCOL) (list "map" "slice")}}{{.Values.env.SCF_LOG_PROTOCOL | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_PROTOCOL | quote}}{{end}}{{else}}{{fail "env.SCF_LOG_PROTOCOL has not been set"}}{{end}}
        - name: "VCAP_HARD_NPROC"
          value: {{ .Values.kube.limits.nproc.hard | quote }}
        - name: "VCAP_SOFT_NPROC"
          value: {{ .Values.kube.limits.nproc.soft | quote }}
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/uaa-secret-generation:dfc4d082a5e5c350cd6a3fcdf1c0a3fe40ec4017"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "secret-generation"
        ports: ~
        readinessProbe: ~
        resources:
          requests:
            {{- if and .Values.config.memory.requests .Values.sizing.secret_generation.memory.request }}
            memory: "{{ int .Values.sizing.secret_generation.memory.request }}Mi"
            {{- end }}

            {{- if and .Values.config.cpu.requests .Values.sizing.secret_generation.cpu.request }}
            cpu: "{{ int .Values.sizing.secret_generation.cpu.request }}m"
            {{- end }}

          limits:
            {{- if and .Values.config.memory.limits .Values.sizing.secret_generation.memory.limit }}
            memory: "{{ int .Values.sizing.secret_generation.memory.limit }}Mi"
            {{- end }}

            {{- if and .Values.config.cpu.limits .Values.sizing.secret_generation.cpu.limit }}
            cpu: "{{ int .Values.sizing.secret_generation.cpu.limit }}m"
            {{- end }}

        securityContext:
          {{- if has "ALL" .Values.sizing.secret_generation.capabilities }}
          privileged: true
          {{- end }}

          {{- if not (has "ALL" .Values.sizing.secret_generation.capabilities) }}
          capabilities:
            add:
            {{- range .Values.sizing.secret_generation.capabilities }}
            - {{ . | upper }}
            {{- end }}
          {{- end }}

          allowPrivilegeEscalation: {{ if has "ALL" .Values.sizing.secret_generation.capabilities -}} true {{- else -}} false {{- end }}
        volumeMounts:
        - mountPath: "/opt/fissile/config"
          name: "deployment-manifest"
          readOnly: true
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "OnFailure"
      {{- if and (eq (printf "%s" .Values.kube.auth) "rbac") (.Capabilities.APIVersions.Has "rbac.authorization.k8s.io/v1") }}
      serviceAccountName: "secret-generator"
      {{- end }}
      terminationGracePeriodSeconds: 600
      volumes:
      - name: "deployment-manifest"
        secret:
          secretName: "deployment-manifest"
          items:
          - key: "deployment-manifest"
            path: "deployment-manifest.yml"
