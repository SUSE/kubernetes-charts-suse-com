{{- include "_config.load" $ }}
{{- if .Values.kube.image_pull_secrets }}
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
  name: patch-sa
  namespace: {{ .Release.Namespace | quote }}
rules:
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
  name: patch-sa
  namespace: {{ .Release.Namespace | quote }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: patch-sa
subjects:
- kind: ServiceAccount
  name: default
  namespace: {{ .Release.Namespace | quote }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: patch-sa
  namespace: {{ .Release.Namespace | quote }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: sa
        {{- with $image := $.Values.releases.kubecf_kubectl.image }}
        image: {{ printf "%s:%s" $image.repository $image.tag | quote }}
        {{- end }}
        imagePullPolicy: IfNotPresent
        # Patch serviceaccount with image_pull_secret_name list. If imagepullsecrets
        # exists within a serviceaccount, a patch just adds the rest in.
        {{- $image_pull_secret_names := list }}
        {{- range $secret_name := $.Values.kube.image_pull_secrets }}
          {{- $image_pull_secret_names = append $image_pull_secret_names (dict "name" $secret_name) }}
        {{- end }}
        command: ["/bin/sh", "-c"]
        args:
        - |
          kubectl patch serviceaccount default -p '{"imagePullSecrets": {{ $image_pull_secret_names | toJson }} }' -n {{ .Release.Namespace }}
{{- end }}