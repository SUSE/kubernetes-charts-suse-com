{{- include "_config.load" $ }}
{{- if .Values.features.eirini.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: bits
type: Opaque
stringData:
  bits-config-key: |
    logging:
      level: debug
    private_endpoint: "https://bits.{{ .Release.Namespace }}.svc"
    public_endpoint: "https://127.0.0.1:{{ .Values.bits.services.nodePort }}"
    # The registry endpoint must not include the port
    registry_endpoint: "https://127.0.0.1"
    cert_file: /workspace/jobs/bits-service/certs/certificate
    key_file: /workspace/jobs/bits-service/certs/private_key
    port: 6666
    enable_http: true
    http_port: 8888
    secret:  {{ .Values.bits.secrets.BITS_SERVICE_SECRET }}
    skip_cert_verify: true
    max_body_size: 2M
    signing_users:
      - username: admin
        password:  {{ .Values.bits.secrets.BITS_SERVICE_SIGNING_USER_PASSWORD }}
    app_stash_config:
      maximum_size: 512M
      minimum_size: 64K
    {{- if eq $.Values.features.blobstore.provider "singleton" }}
    buildpacks:
      blobstore_type: webdav
      webdav_config: &webdav_config
        directory_key: cc-buildpacks
        {{- $blobstore_service := .Values.bits.blobstore.serviceName }}
        {{- if contains "." $blobstore_service | not }}
        {{- $blobstore_service = printf "%s.%s.svc" $blobstore_service .Release.Namespace }}
        {{- end }}
        private_endpoint: https://{{ $blobstore_service }}:4443
        public_endpoint: "https://127.0.0.1:{{ .Values.bits.services.nodePort }}"
        username: {{ .Values.bits.blobstore.userName }}
        password: {{ .Values.bits.secrets.BLOBSTORE_PASSWORD  }}
        # TODO: provide proper cert file here
        ca_cert_path: /workspace/jobs/bits-service/certs/ca
        # TODO: remove this skip, when we have propert cert file above
        skip_cert_verify: true
    droplets:
      blobstore_type: webdav
      webdav_config:
        <<: *webdav_config
        directory_key: cc-droplets
    packages:
      blobstore_type: webdav
      webdav_config:
        <<: *webdav_config
        directory_key: cc-packages
    app_stash:
      blobstore_type: webdav
      webdav_config:
        <<: *webdav_config
        directory_key: cc-resources
    {{- else if eq $.Values.features.blobstore.fog.connection.provider "AWS" }}
    buildpacks:
      blobstore_type: aws
      s3_config: &s3_config
        bucket: {{ $.Values.features.blobstore.fog.buildpack_directory_key }}
        access_key_id: {{ $.Values.features.blobstore.fog.connection.aws_access_key_id }}
        secret_access_key: {{ $.Values.features.blobstore.fog.connection.aws_secret_access_key }}
        region: {{ $.Values.features.blobstore.fog.connection.region }}
        {{- with $.Values.features.blobstore.fog.connection.endpoint }}
        host: {{ . }}
        {{- end }}
        {{- with $.Values.features.blobstore.fog.connection.aws_signature_version }}
        signature_version: {{ . }}
        {{- end }}
        {{- with $.Values.features.blobstore.fog.connection.path_style }}
          {{- include "_config.fail" "path_style bucket addresses are not supported by bits-service" }}
        {{- end }}
    droplets:
      blobstore_type: aws
      s3_config:
        <<: *s3_config
        bucket: {{ $.Values.features.blobstore.fog.droplet_directory_key }}
    packages:
      blobstore_type: aws
      s3_config:
        <<: *s3_config
        bucket: {{ $.Values.features.blobstore.fog.app_package_directory_key }}
    app_stash:
      blobstore_type: aws
      s3_config:
        <<: *s3_config
        bucket: {{ $.Values.features.blobstore.fog.resource_directory_key }}
    {{- else if eq $.Values.features.blobstore.fog.connection.provider "Google" }}
    buildpacks:
      blobstore_type: google
      gcp_config: &gcp_config
        bucket: {{ $.Values.features.blobstore.fog.buildpack_directory_key }}
        private_key_id: {{ $.Values.features.blobstore.fog.google_storage_access_key_id }}
        private_key: {{ $.Values.features.blobstore.fog.google_storage_secret_access_key }}
    droplets:
      blobstore_type: google
      gcp_config:
        <<: *gcp_config
        bucket: {{ $.Values.features.blobstore.fog.droplet_directory_key }}
    packages:
      blobstore_type: google
      gcp_config:
        <<: *gcp_config
        bucket: {{ $.Values.features.blobstore.fog.app_package_directory_key }}
    app_stash:
      blobstore_type: google
      gcp_config:
        <<: *gcp_config
        bucket: {{ $.Values.features.blobstore.fog.resource_directory_key }}
    {{- else if eq $.Values.features.blobstore.fog.connection.provider "AzureRM" }}
    buildpacks:
      blobstore_type: azure
      azure_config: &azure_config
        container_name: {{ $.Values.features.blobstore.fog.buildpack_directory_key }}
        account_name: {{ $.Values.features.blobstore.fog.azure_storage_account_name }}
        account_key: {{ $.Values.features.blobstore.fog.azure_storage_access_key }}
        environment: {{ $.Values.features.blobstore.fog.environment }}
    droplets:
      blobstore_type: azure
      azure_config: &azure_config
        <<: *azure_config
        container_name: {{ $.Values.features.blobstore.fog.droplet_directory_key }}
    packages:
      blobstore_type: azure
      azure_config: &azure_config
        <<: *azure_config
        container_name: {{ $.Values.features.blobstore.fog.app_package_directory_key }}
    app_stash:
      blobstore_type: azure
      azure_config: &azure_config
        <<: *azure_config
        container_name: {{ $.Values.features.blobstore.fog.resource_directory_key }}
    {{- else }}
      {{- include "_config.fail" (printf "Blobstore provider %q is not supported by bits-service" $.Values.features.blobstore.fog.provider) }}
    {{- end }}
    enable_registry: true
{{- end }}
