{{- include "_config.load" $ }}
{{- $root := . }}
---
apiVersion: quarks.cloudfoundry.org/v1alpha1
kind: BOSHDeployment
metadata:
  name: {{ include "kubecf.deployment-name" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ include "kubecf.chart" . }}
spec:
  manifest:
    name: cf-deployment
    type: configmap
{{- if gt (len .Values.credentials) 0}}
  vars:
{{- $creds := dict }}
{{- range $name, $value := .Values.credentials }}
  {{- $parts := splitList "." $name }}
  {{- $_ := set $creds (first $parts) nil }}
{{- end }}
{{- range $name, $value := $creds }}
  - name: {{ $name | quote }}
    secret: {{ printf "cred-%s" ($name | replace "_" "-" | replace "." "-") | quote }}
{{- end }}
{{- else }}
  vars: []
{{- end }}
  ops:

# Job moving operations
{{- range $path, $_ := .Files.Glob "assets/operations/job_moving/*" }}
  - name: {{ include "kubecf.ops-name" (dict "ReleaseName" $root.Release.Name "Path" $path) }}
    type: configmap
{{- end }}

{{- if eq .Values.features.blobstore.provider "s3" }}
# S3 blobstore operations
  - name: {{ include "kubecf.ops-name" (dict "Path" "assets/use-external-blobstore.yml") }}
    type: configmap
  - name: {{ include "kubecf.ops-name" (dict "Path" "assets/use-s3-blobstore.yml") }}
    type: configmap
{{- if .Values.features.eirini.enabled }}
  - name: {{ include "kubecf.ops-name" (dict "Path" "assets/configure-bits-service-s3.yml") }}
    type: configmap
{{- end }}
{{- end }}

# Instance group operations
{{- range $path, $bytes := .Files.Glob "assets/operations/instance_groups/*" }}
  - name: {{ include "kubecf.ops-name" (dict "Path" $path) }}
    type: configmap
{{- end }}

# General operations
{{- /* We want to have specific order here, hence the extra work */}}
{{- $ops := list }}
{{- /* `.Files.Glob` results can't be piped to `keys` for some reason */}}
{{- range $path, $_ := .Files.Glob "assets/operations/*" }}
  {{- $ops = append $ops $path }}
{{- end }}
{{- $ops = sortAlpha $ops }}
{{- /* Put sizing.yaml and azs.yaml at the start, then the rest */}}
{{- $ops = prepend $ops "assets/operations/sizing.yaml" }}
{{- $ops = prepend $ops "assets/operations/azs.yaml" }}
{{- range $path := uniq $ops }}
  - name: {{ include "kubecf.ops-name" (dict "Path" $path) }}
    type: configmap
{{- end }}

# Pod/container sizing
{{- range $path, $_ := .Files.Glob "assets/operations/sizing/*" }}
  - name: {{ include "kubecf.ops-name" (dict "ReleaseName" $root.Release.Name "Path" $path) }}
    type: configmap
{{- end }}

# To support multi-clusters
{{- if or .Values.features.multiple_cluster_mode.control_plane.enabled .Values.features.multiple_cluster_mode.cell_segment.enabled }}
  - name: multiple-cluster-mode-operations
    type: configmap
{{- end }}

# Custom operations
{{- range $_, $ops := .Values.operations.custom }}
  - name: {{ $ops | quote }}
    type: configmap
{{- end }}
{{- if gt (len .Values.operations.inline) 0 }}
  - name: user-provided-inline-operations
    type: configmap
{{- end }}
  - name: user-provided-properties
    type: configmap
