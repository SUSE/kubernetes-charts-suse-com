{{- if .Values.features.embedded_database.enabled }}

---
apiVersion: quarks.cloudfoundry.org/v1alpha1
kind: QuarksSecret
metadata:
  name: var-pxc-root-password
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ include "kubecf.chart" . }}
spec:
  type: password
  secretName: var-pxc-root-password
---
apiVersion: quarks.cloudfoundry.org/v1alpha1
kind: QuarksSecret
metadata:
  name: var-pxc-password
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ include "kubecf.chart" . }}
spec:
  type: password
  secretName: var-pxc-password
---
apiVersion: quarks.cloudfoundry.org/v1alpha1
kind: QuarksSecret
metadata:
  name: var-xtrabackup-password
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ include "kubecf.chart" . }}
spec:
  type: password
  secretName: var-xtrabackup-password
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: database-config-files
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ include "kubecf.chart" . }}
data:
  ssl.cnf: |+
    [mysqld]
    ssl-ca=/etc/mysql/tls/certs/ca
    ssl-cert=/etc/mysql/tls/certs/certificate
    ssl-key=/etc/mysql/tls/certs/private_key
  node.cnf: |
    [mysqld]
    datadir=/var/lib/mysql
    default_storage_engine=InnoDB
    binlog_format=ROW
    innodb_flush_log_at_trx_commit  = 0
    innodb_flush_method             = O_DIRECT
    innodb_file_per_table           = 1
    innodb_autoinc_lock_mode=2
    bind_address = 0.0.0.0
    wsrep_slave_threads=2
    wsrep_cluster_address=gcomm://
    wsrep_provider=/usr/lib/galera3/libgalera_smm.so
    wsrep_sst_method=xtrabackup-v2
  charset.cnf: |-
    [client]
    default_character_set           = utf8

    [mysql]
    default_character_set           = utf8

    [mysqld]
    # Ignore the client information and use the default server character set.
    character_set_client_handshake  = false

    character_set_server            = utf8
    collation_server                = utf8_unicode_ci

    [mysqld_safe]
    default_character_set           = utf8
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: database-startup-scripts
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ include "kubecf.chart" . }}
data:
  entrypoint.sh: |
    {{- .Files.Get "assets/scripts/jobs/pxc/entrypoint.sh" | nindent 4 }}
  functions.sh: |
    {{- .Files.Get "assets/scripts/jobs/pxc/functions.sh" | nindent 4 }}
---
apiVersion: v1
kind: Service
metadata:
  name: database
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: database
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ include "kubecf.chart" . }}
spec:
  ports:
  - name: mysql
    port: 3306
    targetPort: mysql
  selector:
    app: database
    app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    quarks.cloudfoundry.org/pod-active: active
---
apiVersion: v1
kind: Service
metadata:
  name: database-repl
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: database
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ include "kubecf.chart" . }}
spec:
  clusterIP: None
  ports:
  - name: galera
    port: 4567
  - name: state-xfer
    port: 4568
  - name: state-snap
    port: 4444
  selector:
    app: database
    app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
---
apiVersion: quarks.cloudfoundry.org/v1alpha1
kind: QuarksStatefulSet
metadata:
  name: database
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: database
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ include "kubecf.chart" . }}
spec:
  updateOnConfigChange: true
  activePassiveProbes:
    database:
      periodSeconds: 5
      exec:
        command:
          - /bin/bash
          - -c
          - |
            {{- .Files.Get "assets/scripts/jobs/pxc/active_passive_probe.sh" | nindent 12 }}
  template:
    metadata:
      name: database
      namespace: {{ .Release.Namespace | quote }}
      labels:
        app: database
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
        app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
        helm.sh/chart: {{ include "kubecf.chart" . }}
    spec:
      {{- with $replicas := default 1 .Values.sizing.database.instances }}
      {{- if eq (mod $replicas 2) 0 }}
      {{- fail "The number of database instances must be odd to avoid split-brain" }}
      {{- end }}
      replicas: {{ $replicas }}
      {{- end }}
      selector:
        matchLabels:
          app: database
          app.kubernetes.io/instance: {{ .Release.Name | quote }}
          app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
          app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
          app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
          helm.sh/chart: {{ include "kubecf.chart" . }}
      serviceName: database
      template:
        metadata:
          labels:
            app: database
            app.kubernetes.io/instance: {{ .Release.Name | quote }}
            app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
            app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
            app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
            helm.sh/chart: {{ include "kubecf.chart" . }}
        spec:
          initContainers:
          - name: remove-lost-found
            {{- with $image := .Values.releases.pxc.image }}
            image: {{ printf "%s:%s" $image.repository $image.tag | quote }}
            imagePullPolicy: {{ $image.pullPolicy | quote }}
            {{- end }}
            command: ["rm", "-fr", "/var/lib/mysql/lost+found"]
            volumeMounts:
            - name: pxc-data
              mountPath: /var/lib/mysql
          containers:
          - name: database
            {{- with $image := .Values.releases.pxc.image }}
            image: {{ printf "%s:%s" $image.repository $image.tag | quote }}
            imagePullPolicy: {{ $image.pullPolicy | quote }}
            {{- end }}
            command: ["/bin/bash", "/startup-scripts/entrypoint.sh"]
            env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: var-pxc-root-password
                  key: password
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: var-pxc-password
                  key: password
            - name: XTRABACKUP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: var-xtrabackup-password
                  key: password
            - name: ALLOW_ROOT_FROM
              value: "%"
            - name: CLUSTER_NAME
              value: {{ .Release.Name }}-database
            - name: SHORT_CLUSTER_NAME
              value: {{ .Release.Name }}-database
            - name: K8S_SERVICE_NAME
              value: database-repl
            - name: PXC_STRICT_MODE
              value: ENFORCING
            ports:
            - name: mysql
              containerPort: 3306
            - name: galera-repl
              containerPort: 4567
            - name: state-transfer
              containerPort: 4568
            - name: state-snapshot
              containerPort: 4444
            livenessProbe:
              exec:
                command:
                  - "/bin/bash"
                  - "-c"
                  - "mysqladmin ping || test -e /var/lib/mysql/sst_in_progress"
              initialDelaySeconds: 30
              timeoutSeconds: 2
            readinessProbe:
              exec:
                command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
              initialDelaySeconds: 30
              timeoutSeconds: 2
            volumeMounts:
            - name: pxc-tls
              mountPath: /etc/mysql/tls/certs
            - name: pxc-data
              mountPath: /var/lib/mysql
            - name: pxc-config-files
              mountPath: /etc/mysql/conf.d
            - name: pxc-startup-scripts
              mountPath: /startup-scripts
            - name: slash-root
              mountPath: /root
            - name: var-log
              mountPath: /var/log
          - name: "logs"
            {{- with $image := .Values.releases.pxc.image }}
            image: {{ printf "%s:%s" $image.repository $image.tag | quote }}
            imagePullPolicy: {{ $image.pullPolicy | quote }}
            {{- end }}
            command: ["tail", "-f", "/var/log/mysqld.log"]
            volumeMounts:
            - name: var-log
              mountPath: /var/log
          volumes:
          - name: slash-root
            emptyDir: {}
          - name: var-log
            emptyDir: {}
          - name: pxc-config-files
            configMap:
              name: database-config-files
          - name: pxc-startup-scripts
            configMap:
              name: database-startup-scripts
          - name: pxc-tls
            secret:
              secretName: var-pxc-tls
      volumeClaimTemplates:
      - metadata:
          name: pxc-data
        spec:
          accessModes: ["ReadWriteOnce"]
          storageClassName: {{ default "" .Values.kube.storage_class }}
          resources:
            requests:
              storage: {{ .Values.sizing.database.persistence.size | quote }}
---
{{- $databases := (list "" | compact) }}
{{- $databases = append $databases (dict "name" "cloud-controller" "path" "cloud_controller" "secretName" "cc") }}
{{- $databases = append $databases (dict "name" "diego" "path" "diego" "secretName" "diego") }}
{{- $databases = append $databases (dict "name" "network-connectivity" "path" "network_connectivity" "secretName" "network-connectivity") }}
{{- $databases = append $databases (dict "name" "network-policy" "path" "network_policy" "secretName" "network-policy") }}
{{- $databases = append $databases (dict "name" "uaa" "path" "uaa" "secretName" "uaa") }}
{{- $databases = append $databases (dict "name" "locket" "path" "locket" "secretName" "locket") }}

{{- if .Values.features.credhub.enabled }}
{{- $databases = append $databases (dict "name" "credhub" "path" "credhub" "secretName" "credhub") }}
{{- end }}

{{- if .Values.features.routing_api.enabled }}
{{- $databases = append $databases (dict "name" "routing-api" "path" "routing-api" "secretName" "routing-api") }}
{{- end }}

apiVersion: quarks.cloudfoundry.org/v1alpha1
kind: QuarksJob
metadata:
  name: database-seeder
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ include "kubecf.chart" . }}
spec:
  trigger:
    strategy: once
  updateOnConfigChange: true
  template:
    spec:
      template:
        spec:
          containers:
          - name: seeder
            {{- with $image := .Values.releases.pxc.image }}
            image: {{ printf "%s:%s" $image.repository $image.tag | quote }}
            imagePullPolicy: {{ $image.pullPolicy | quote }}
            {{- end }}
            env:
            - name: DATABASE_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: var-pxc-root-password
                  key: password
            - name: DATABASE_HOST
              value: {{ printf "database.%s" .Release.Namespace | quote }}
            - name: CHARACTER_SET
              value: utf8
            - name: COLLATE
              value: utf8_unicode_ci
            - name: DATABASES
              value: |-
                {{- range $database := $databases }}
                {{- get $database "path" | nindent 16 }}
                {{- end }}
            volumeMounts:
            {{- range $database := $databases }}
            - name: {{ printf  "%s-database-password" (get $database "name") | quote }}
              mountPath: {{ printf "/passwords/%s" (get $database "path") | quote }}
              readOnly: true
            {{- end }}
            command:
            - "/bin/bash"
            - "-c"
            - |-
              {{- .Files.Get "assets/scripts/jobs/pxc/seeder.sh" | nindent 14 }}

          volumes:
          {{- range $database := $databases }}
          - name: {{ printf  "%s-database-password" (get $database "name") | quote }}
            secret:
              secretName: {{ printf "var-%s-database-password" (get $database "secretName") | quote }}
          {{- end }}
          restartPolicy: Never

---
apiVersion: quarks.cloudfoundry.org/v1alpha1
kind: QuarksJob
metadata:
  name: database-migrate-charset
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ include "kubecf.fullname" . }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ include "kubecf.chart" . }}
spec:
  trigger:
    strategy: manual
  updateOnConfigChange: true
  template:
    spec:
      template:
        spec:
          containers:
          - name: migrate-charset
            {{- with $image := .Values.releases.pxc.image }}
            image: {{ printf "%s:%s" $image.repository $image.tag | quote }}
            imagePullPolicy: {{ $image.pullPolicy | quote }}
            {{- end }}
            env:
            - name: DATABASE_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: var-pxc-root-password
                  key: password
            - name: DATABASE_HOST
              value: {{ printf "database.%s" .Release.Namespace | quote }}
            - name: CHARACTER_SET
              value: utf8
            - name: COLLATE
              value: utf8_unicode_ci
            - name: DATABASES
              value: |-
                {{- range $database := $databases }}
                {{- get $database "path" | nindent 16 }}
                {{- end }}
            volumeMounts:
            {{- range $database := $databases }}
            - name: {{ printf  "%s-database-password" (get $database "name") | quote }}
              mountPath: {{ printf "/passwords/%s" (get $database "path") | quote }}
              readOnly: true
            {{- end }}
            command:
            - "/bin/bash"
            - "-c"
            - |-
              {{- .Files.Get "assets/scripts/jobs/pxc/migrate_charset.sh" | nindent 14 }}

          volumes:
          {{- range $database := $databases }}
          - name: {{ printf  "%s-database-password" (get $database "name") | quote }}
            secret:
              secretName: {{ printf "var-%s-database-password" (get $database "secretName") | quote }}
          {{- end }}
          restartPolicy: Never

{{- end }}
