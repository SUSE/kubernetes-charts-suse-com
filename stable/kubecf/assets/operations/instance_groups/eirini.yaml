{{- if .Values.features.eirini.enabled }}

# Add the eirini BOSH DNS alias.
- type: replace
  path: /addons/name=bosh-dns-aliases/jobs/name=bosh-dns-aliases/properties/aliases/-
  value:
    domain: eirini.service.cf.internal
    targets:
    - deployment: cf
      domain: bosh
      instance_group: eirini
      network: default
      query: '*'

- type: replace
  path: /instance_groups/name=nats:after
  value:
    name: configure-eirini
    lifecycle: auto-errand
    release: eirini
    instances: 1
    stemcell: default
    env:
      bosh:
        agent:
          settings:
            serviceAccountName: eirini
            disable_log_sidecar: true
    jobs:
    - name: configure-eirini-scf
      release: eirini
      properties:
        quarks:
          bpm:
            processes:
            - name: configure-eirini
              executable: /bin/bash
              args:
                - -c
                - /var/vcap/jobs/configure-eirini-scf/bin/run
        capi:
          cc_uploader:
            mutual_tls:
              server_cert: "((cc_bridge_cc_uploader_server.certificate))"
              server_key: "((cc_bridge_cc_uploader_server.private_key))"
        opi:
          registry_address: 127.0.0.1:{{ .Values.features.eirini.registry.service.nodePort }}
          kube_namespace: {{ .Release.Namespace }}-eirini
          certs_secret_name: eirini-staging-secret
          cc_cert: ((cc_bridge_tps.certificate))
          cc_key: ((cc_bridge_tps.private_key))
          cc_ca: ((service_cf_internal_ca.certificate))
        cc:
          opi:
            client_cert: ((eirini_tls_client_cert.certificate))
            client_key: ((eirini_tls_client_cert.private_key))

# Add eirini
- type: replace
  path: /instance_groups/name=configure-eirini:after
  value:
    name: eirini
    release: eirini
    instances: 1
    stemcell: default
    update:
      serial: true
    env:
      bosh:
        agent:
          settings:
            serviceAccountName: eirini
    jobs:
    - name: eirini-persi-broker
      release: eirini
      properties:
        eirini-persi-broker:
          namespace: {{ .Release.Namespace }}-eirini
          backend_host: "0.0.0.0"
          backend_port: 8999
          auth_password: ((eirini_persi_broker_auth_password))
    - name: eirini-persi
      release: eirini
      properties:
        eirini-persi:
          namespace: {{ .Release.Namespace }}-eirini
          operator_webhook_host: "0.0.0.0"
          operator_webhook_port: 8443
          operator_webhook_servicename: eirini-persi
          operator_webhook_namespace: {{ .Release.Namespace }}
    - name: eirini-ssh-proxy
      release: eirini
      properties:
        eirini-ssh-proxy:
          api_url: "https://cloud-controller-ng.service.cf.internal:9024"
          port: "2222"
          host_key: '((eirini_ssh_proxy_key.private_key))'
          kube_namespace: {{ .Release.Namespace }}-eirini
          sshd_port: 2222
          ssl:
            skip_cert_verify: false
          cc:
            ca_cert: "((cc_tls.ca))"
          uaa:
            ca_cert: '((uaa_ssl.ca))'
        uaa:
          clients:
            ssh-proxy:
              secret: '((uaa_clients_ssh-proxy_secret))'
          url: "https://uaa.service.cf.internal:8443"
    - name: eirini-ssh-extension
      release: eirini
      properties:
        eirini-ssh-extension:
          namespace: {{ .Release.Namespace }}-eirini
          operator_webhook_host: "0.0.0.0"
          operator_webhook_port: 2999
          operator_webhook_servicename: eirini-ssh
          operator_webhook_namespace: {{ .Release.Namespace }}
    - name: eirini-loggregator-bridge
      release: eirini
      properties:
        quarks:
          envs:
          - name: EIRINI_LOGGREGATOR_BRIDGE_LOGLEVEL
            value: WARN
        eirini-loggregator-bridge:
          loggregator_ca: '((loggregator_ca.certificate))'
          loggregator_cert: '((loggregator_tls_agent.certificate))'
          loggregator_key: '((loggregator_tls_agent.private_key))'
          loggregator_endpoint: "doppler.service.cf.internal:8082"
          namespace: '{{ .Release.Namespace }}-eirini'
    - name: opi
      release: eirini
      properties:
        opi:
          server_cert: ((eirini_tls_server_cert.certificate))
          server_key: ((eirini_tls_server_cert.private_key))
          client_ca: ((service_cf_internal_ca.certificate))
          kube_namespace: {{ .Release.Namespace }}-eirini
          kube_service_host: ""
          kube_service_port: ""
          registry_address: 127.0.0.1:{{ .Values.features.eirini.registry.service.nodePort }}
          registry_username: admin
          registry_password: ((bits_service_signing_password))
          nats_password: ((nats_password))
          nats_ip: nats.service.cf.internal
          certs_secret_name: eirini-staging-secret
          cc_internal_api: https://cloud-controller-ng.service.cf.internal:9023
          eirini_address: {{ printf "https://eirini.%s:8484" .Release.Namespace }}
          downloader_image: "eirini/recipe-downloader@sha256:80c213363762d3171fe401c331c480f0e8eb34fe781798eda95de1e7427b2771"
          uploader_image: "eirini/recipe-uploader@sha256:cb70f76035866bf280e710247751f2f620c4c6e6e6950a6e730bde01535bebf1"
          executor_image: "eirini/recipe-executor@sha256:c072f828b86766778d027041e394eaad9cfb55c3b5f652a50be8455d1dad3bf4"
          # TODO: make this configurable
          metrics_source_address: ""
          loggregator_address: localhost:3458
          loggregator_cert: ((loggregator_tls_agent.certificate))
          loggregator_key: ((loggregator_tls_agent.private_key))
          loggregator_ca: ((loggregator_tls_agent.certificate))
          cc_cert: ((cc_bridge_tps.certificate))
          cc_key: ((cc_bridge_tps.private_key))
          cc_ca: ((service_cf_internal_ca.certificate))
          cc_uploader_ip: "" # TODO: remove once we bump Eirini to a version that doesn't require this.
        quarks:
          ports:
          - name: https
            protocol: TCP
            internal: 8484

# Add eirinifs job to the bits-service to copy the tarball into the bits-service VM
- type: replace
  path: /instance_groups/name=bits/jobs/name=eirinifs?
  value:
    name: eirinifs
    release: eirini

# Set the correct addresses to be reached by the Eirini apps namespace.
{{- if eq .Values.features.blobstore.provider "singleton" }}
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/cc/buildpacks?/webdav_config/private_endpoint
  value: &blobstore_url {{ printf "https://singleton-blobstore.%s:4443" .Release.Namespace }}
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/cc/droplets?/webdav_config/private_endpoint
  value: *blobstore_url
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/cc/packages?/webdav_config/private_endpoint
  value: *blobstore_url
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/cc/resource_pool?/webdav_config/private_endpoint
  value: *blobstore_url
- type: replace
  path: /variables/name=blobstore_tls/options/alternative_names?/-
  value: singleton-blobstore
- type: replace
  path: /variables/name=blobstore_tls/options/alternative_names?/-
  value: {{ printf "singleton-blobstore.%s" .Release.Namespace }}
{{- end }}
- type: replace
  path: /instance_groups/name=api/jobs/name=cc_uploader/properties/internal_hostname?
  value: {{ printf "api.%s" .Release.Namespace }}
- type: replace
  path: /variables/name=cc_bridge_cc_uploader_server/options/alternative_names?/-
  value: {{ printf "api.%s" .Release.Namespace }}

# Enable OPI in CC
# cloud_controller_ng
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/cc/opi?/enabled?
  value: true
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/cc/opi?/url?
  value: https://eirini.service.cf.internal:8484
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/cc/opi?/opi_staging?
  value: true
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/cc/opi?/client_cert?
  value: ((eirini_tls_client_cert.certificate))
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/cc/opi?/client_key?
  value: ((eirini_tls_client_cert.private_key))
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/cc/opi?/ca_cert?
  value: ((eirini_tls_server_cert.ca))

# cloud_controller_worker
- type: replace
  path: /instance_groups/name=cc-worker/jobs/name=cloud_controller_worker/properties/cc/opi?/enabled?
  value: true
- type: replace
  path: /instance_groups/name=cc-worker/jobs/name=cloud_controller_worker/properties/cc/opi?/url?
  value: https://eirini.service.cf.internal:8484
- type: replace
  path: /instance_groups/name=cc-worker/jobs/name=cloud_controller_worker/properties/cc/opi?/opi_staging?
  value: true
- type: replace
  path: /instance_groups/name=cc-worker/jobs/name=cloud_controller_worker/properties/cc/opi?/client_cert?
  value: ((eirini_tls_client_cert.certificate))
- type: replace
  path: /instance_groups/name=cc-worker/jobs/name=cloud_controller_worker/properties/cc/opi?/client_key?
  value: ((eirini_tls_client_cert.private_key))
- type: replace
  path: /instance_groups/name=cc-worker/jobs/name=cloud_controller_worker/properties/cc/opi?/ca_cert?
  value: ((eirini_tls_server_cert.ca))

# cloud_controller_clock
- type: replace
  path: /instance_groups/name=scheduler/jobs/name=cloud_controller_clock/properties/cc/opi?/enabled?
  value: true
- type: replace
  path: /instance_groups/name=scheduler/jobs/name=cloud_controller_clock/properties/cc/opi?/url?
  value: https://eirini.service.cf.internal:8484
- type: replace
  path: /instance_groups/name=scheduler/jobs/name=cloud_controller_clock/properties/cc/opi?/opi_staging?
  value: true
- type: replace
  path: /instance_groups/name=scheduler/jobs/name=cloud_controller_clock/properties/cc/opi?/client_cert?
  value: ((eirini_tls_client_cert.certificate))
- type: replace
  path: /instance_groups/name=scheduler/jobs/name=cloud_controller_clock/properties/cc/opi?/client_key?
  value: ((eirini_tls_client_cert.private_key))
- type: replace
  path: /instance_groups/name=scheduler/jobs/name=cloud_controller_clock/properties/cc/opi?/ca_cert?
  value: ((eirini_tls_server_cert.ca))

- type: replace
  path: /variables/name=eirini_tls_server_cert?
  value:
    name: eirini_tls_server_cert
    type: certificate
    options:
      ca: service_cf_internal_ca
      common_name: eirini
      alternative_names:
      - eirini
      - {{ printf "eirini.%s" .Release.Namespace }}
      - eirini.service.cf.internal
      extended_key_usage:
      - server_auth
- type: replace
  path: /variables/name=eirini_tls_client_cert?
  value:
    name: eirini_tls_client_cert
    type: certificate
    options:
      ca: service_cf_internal_ca
      common_name: cloud_controller
      extended_key_usage:
      - client_auth
- type: replace
  path: /variables/name=eirini_persi_broker_auth_password?
  value:
    type: password
    name: eirini_persi_broker_auth_password
- type: replace
  path: /variables/name=eirini_ssh_proxy_key?
  value:
    type: ssh
    name: eirini_ssh_proxy_key

- type: replace
  path: /instance_groups/name=bits/jobs/name=eirinifs/properties?/quarks?
  value:
    bpm:
      processes: []
# Make loggregator agent cert validate correctly for fluentd in k8s nodes
- type: replace
  path: /variables/name=loggregator_tls_agent/options/alternative_names?
  value:
    - localhost
    - metron
- type: replace
  path: /variables/name=loggregator_tls_doppler/options/alternative_names?/-
  value: metron

# Add necessary labels to the eirini instance group so that the service can select it to create the endpoint for ssh-proxy
- type: replace
  path: /instance_groups/name=eirini/env?/bosh/agent/settings/labels/app.kubernetes.io~1component
  value: "ssh-proxy"
- type: replace
  path: /instance_groups/name=eirini/env?/bosh/agent/settings/labels/app.kubernetes.io~1instance
  value: {{ .Release.Name | quote }}
- type: replace
  path: /instance_groups/name=eirini/env?/bosh/agent/settings/labels/app.kubernetes.io~1version
  value: {{ default .Chart.Version .Chart.AppVersion | quote }}

# Set the ssh-proxy key fingerprint
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/app_ssh/host_key_fingerprint?
  value: '((eirini_ssh_proxy_key.public_key_fingerprint))'

# Remove the whole diego-cell instance group.
- type: remove
  path: /instance_groups/name=diego-cell

# Remove bbs from diego-api.
# TODO: remove bbs in the future - when the clock and worker no longer need it.
# - type: remove
#   path: /instance_groups/name=diego-api/jobs/name=bbs

# Remove auctioneer, tps and ssh_proxy from scheduler.
- type: remove
  path: /instance_groups/name=auctioneer
- type: remove
  path: /instance_groups/name=scheduler/jobs/name=tps
- type: remove
  path: /instance_groups/name=scheduler/jobs/name=ssh_proxy

{{- range $bytes := .Files.Glob "assets/operations/pre_render_scripts/eirini_*" }}
{{ $bytes | toString }}
{{- end }}

{{- end }}
