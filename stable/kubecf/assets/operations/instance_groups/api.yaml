{{- if .Values.testing.brain_tests.enabled}}
# For brain tests, allow CC access to the insecure registry they will create.
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/cc/diego/insecure_docker_registry_list?/-
  value: "tcp.((system_domain)):20005"
{{- end}}

{{- if .Values.features.credhub.enabled }}
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/credhub_api?/external_url
  value: https://credhub.((system_domain))
{{- end }}

# These operations set the default values explicitly in order to get the rotate-cc-database-key
# errand working. Without them, the rotate-cc-database-key errand is not able to resolve the CC BOSH
# link correctly.
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/ccdb/max_connections?
  value: 25
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/ccdb/pool_timeout?
  value: 10
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/ccdb/ssl_verify_hostname?
  value: true
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/ccdb/read_timeout?
  value: 3600
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/ccdb/connection_validation_timeout?
  value: 3600

{{- range $keyLabel := .Values.ccdb.encryption.rotation.key_labels }}
{{- if not (regexMatch "^[a-zA-Z]+[a-zA-Z0-9_]*[a-zA-Z0-9]+$" $keyLabel) }}
{{- include "_config.fail" "One or more items in ccdb.encryption.rotation.key_labels don't match the regex /^[a-zA-Z]+[a-zA-Z0-9_]*[a-zA-Z0-9]+$/" }}
{{- end }}
{{- if gt (len $keyLabel) 240 }}
{{- include "_config.fail" "One or more items in ccdb.encryption.rotation.key_labels exceed the maximum length of 240 characters" }}
{{- end }}
- type: replace
  path: /variables/-
  value:
    {{- /* Don't double-prefix labels that already have the prefix because they are
           imported from an earlier version of kubecf.  This allows upgrades to the
           new (verbatim) label naming scheme while retaining access to old key values. */}}
    name: ccdb_key_label_{{ $keyLabel | trimPrefix "ccdb_key_label_" | lower }}
    type: password
{{- end }}

# Set cc/database_encryption property in all CAPI jobs
{{- $db_enc := dict "current_key_label" $.Values.ccdb.encryption.rotation.current_key_label "keys" dict }}
{{- range $keyLabel := $.Values.ccdb.encryption.rotation.key_labels }}
  {{- $_ := set $db_enc.keys $keyLabel (printf "((ccdb_key_label_%s))" ($keyLabel | trimPrefix "ccdb_key_label_" | lower)) }}
{{- end }}
{{- include "_capi.setProperty" (list "database_encryption" $db_enc) }}

# core_file_pattern should be disabled as CC is not running on a VM.
{{- include "_capi.setProperty" (list "core_file_pattern" false) }}

# Disable tuning /proc/sys kernel parameters as file_server is running on a container.
- type: replace
  path: /instance_groups/name=api/jobs/name=file_server/properties/set_kernel_parameters?
  value: false

# We don't have a /var/vcap/job/*/packages directory, so we point to all the packages.
- type: replace
  path: /instance_groups/name=api/jobs/name=file_server/properties/diego?/file_server/static_directory
  value: "/var/vcap/packages/"

# Enable volume services
{{- include "_capi.setProperty" (list "volume_services_enabled" true) }}

# Add quarks properties for cloud_controller_ng.
- type: replace
  path: /instance_groups/name=api/jobs/name=cloud_controller_ng/properties/quarks?
  value:
    ports:
    - name: api
      protocol: TCP
      internal: 9022
    - name: api-tls
      protocol: TCP
      internal: 9023
    - name: api-mutual-tls
      protocol: TCP
      internal: 9024
    run:
      healthcheck:
        ccng_monit_http_healthcheck:
          readiness:
            # This job exists just to healthcheck cloud_controller_ng; we're
            # already doing that separately.
            exec:
              command: [/bin/true]
          liveness:
            exec:
              command:
              - /usr/bin/pgrep
              - --full
              - --exact
              - bash /var/vcap/jobs/cloud_controller_ng/bin/ccng_monit_http_healthcheck
        cloud_controller_ng:
          readiness: &cloud_controller_ng_readiness
            exec:
              command:
              - curl
              - --fail
              - --head
              - --silent
              - --unix-socket
              - /var/vcap/data/cloud_controller_ng/cloud_controller.sock
              - http:/healthz
          # We don't want a liveness probe here as we do migration here, and we
          # do not want to interrupt that.  We may want to consider using a
          # startupProbe in the future (once that feature stabilizes).
          liveness: ~
  {{- range $process := $.Values.jobs.api.cloud_controller_ng.processes }}
    {{- if hasPrefix "local_worker_" $process }}
        {{ $process }}:
          readiness:
            exec:
              command: [/usr/bin/pgrep, --full, cc_api_worker]
    {{- end }}
  {{- end }}
        nginx:
          readiness:
            httpGet:
              httpHeaders:
              - name: Host
                value: api
              path: /healthz
              port: 9024
              scheme: HTTPS
          liveness:
            exec:
              command: [/usr/bin/pgrep, --full, "nginx: master process"]
    post_start:
      condition:
        exec:
          command: ["curl", "--fail", "--head", "--silent", "http://127.0.0.1:9022/healthz"]

# Add quarks properties for cc_uploader.
- type: replace
  path: /instance_groups/name=api/jobs/name=cc_uploader/properties/quarks?
  value:
    ports:
    - name: http
      protocol: TCP
      internal: 9090
    - name: https
      protocol: TCP
      internal: 9091
    run:
      healthcheck:
        cc_uploader:
          readiness:
            # cc-uploader does not have a health check endpoint; just use a TCP
            # socket.
            tcpSocket:
              port: 9091

# Add quarks properties for file_server.
- type: replace
  path: /instance_groups/name=api/jobs/name=file_server/properties/quarks?
  value:
    ports:
    - name: file-server
      protocol: TCP
      internal: &file-server-port 8080
    run:
      healthcheck:
        file_server:
          readiness:
            httpGet:
              path: /v1/static/file_server/bin/file-server
              port: *file-server-port

# Add quarks properties for statsd_injector.
- type: replace
  path: /instance_groups/name=api/jobs/name=statsd_injector/properties/quarks?/run/healthcheck/statsd_injector/readiness/exec/command
  value:
  - /bin/sh
  - -c
  - ss -nlu src localhost:8125 | grep :8125

# Add quarks properties for policy-server.
- type: replace
  path: /instance_groups/name=api/jobs/name=policy-server/properties/quarks?
  value:
    ports:
    - name: policy-server
      protocol: TCP
      internal: 4002
    run:
      healthcheck:
        policy-server:
          readiness:
            httpGet:
              port: 4002
              scheme: HTTPS
    post_start:
      condition:
        exec:
          # policy-server doesn't support HTTP HEAD requests
          command: ["curl", "--insecure", "--fail", "--silent", "https://localhost:4002/"]

# Add quarks properties for policy-server-internal.
- type: replace
  path: /instance_groups/name=api/jobs/name=policy-server-internal/properties/quarks?
  value:
    run:
      healthcheck:
        policy-server-internal:
          readiness: &policy_server_internal_readiness
            httpGet:
              port: 31946
    post_start:
      condition:
        exec:
          # policy-server-internal doesn't support HTTP HEAD requests
          command: ["curl", "--fail", "--silent", "http://localhost:31946/"]

- type: replace
  path: /instance_groups/name=api/jobs/name=route_registrar/properties/quarks?/run/healthcheck/route_registrar
  value:
    readiness: ~
      # The route registrar doesn't expose anything to indicate if the
      # routes are healthy

- type: replace
  path: /instance_groups/name=api/jobs/name=loggr-udp-forwarder/properties/quarks?
  value:
    run:
      healthcheck:
        loggr-udp-forwarder:
          readiness:
            exec:
              command: ["sh", "-c", "ss -nlu sport = 3457 | grep :3457"]
    envs:
    - name: INDEX
      valueFrom:
        fieldRef:
          fieldPath: metadata.labels['statefulset.kubernetes.io/pod-name']
    - name: IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP

{{- range $path, $bytes := .Files.Glob "assets/operations/pre_render_scripts/api_*" }}
{{ $bytes | toString }}
{{- end }}
