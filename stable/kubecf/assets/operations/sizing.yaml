{{- $instance_groups := list }}

{{- /* Core instance groups that always exist */}}
{{- $instance_groups = append $instance_groups "api" }}
{{- $instance_groups = append $instance_groups "cc-worker" }}
{{- $instance_groups = append $instance_groups "diego-api" }}
{{- $instance_groups = append $instance_groups "doppler" }}
{{- $instance_groups = append $instance_groups "log-api" }}
{{- $instance_groups = append $instance_groups "nats" }}
{{- $instance_groups = append $instance_groups "router" }}
{{- $instance_groups = append $instance_groups "scheduler" }}
{{- $instance_groups = append $instance_groups "uaa" }}

{{- /* Autoscaler-only instance groups */}}
{{- if .Values.features.autoscaler.enabled }}
{{- $instance_groups = append $instance_groups "asapi" }}
{{- $instance_groups = append $instance_groups "asactors" }}
{{- $instance_groups = append $instance_groups "asmetrics" }}
{{- $instance_groups = append $instance_groups "asnozzle" }}
{{- end }}{{/* if autoscaler */}}

{{- /* CredHub */}}
{{- if .Values.features.credhub.enabled }}
{{- $instance_groups = append $instance_groups "credhub" }}
{{- end }}{{/* if credhub */}}

{{- /* Routing-api and tcp-router instance groups */}}
{{- if .Values.features.routing_api.enabled }}
{{- $instance_groups = append $instance_groups "routing-api" }}
{{- $instance_groups = append $instance_groups "tcp-router" }}
{{- end }}{{/* if routing_api */}}

{{- /* Instances groups where existence depends on whether Eirini is enabled */}}
{{- if not .Values.features.eirini.enabled }}
{{- $instance_groups = append $instance_groups "auctioneer" }}
{{- if not .Values.features.multiple_cluster_mode.control_plane.enabled }}
{{- $instance_groups = append $instance_groups "diego-cell" }}
{{- end }}{{/* if control_plane */}}
{{- end }}{{/* if eirini */}}

{{- range $instance_group := $instance_groups }}
  {{- $sizing := snakecase $instance_group | index $.Values.sizing }}
  {{- if $sizing.instances | kindIs "invalid" | not }}
- type: replace
  path: /instance_groups/name={{ $instance_group }}/instances
  value: {{ $sizing.instances }}
  {{- else if not $.Values.high_availability }}
- type: replace
  path: /instance_groups/name={{ $instance_group }}/instances
  value: 1
  {{- end }}{{/* with $instances */}}

  {{- with $affinity := $sizing.affinity }}
- type: replace
  path: /instance_groups/name={{ $instance_group }}/env?/bosh/agent/settings/affinity
  value: {{ toJson $affinity }}
  {{- else }}
- type: replace
  path: /instance_groups/name={{ $instance_group }}/env?/bosh/agent/settings/affinity
  value:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      {{- /* Each instance group has anti-affinity to itself */}}
      {{- $anti_groups := list $instance_group }}
      {{- if eq $instance_group "diego-cell" }}
        {{- /* diego-cell has also anti-affinity to router */}}
        {{- $anti_groups = append $anti_groups "router" }}
      {{- end }}
      {{- if eq $instance_group "router" }}
        {{- /* router has also anti-affinity to diego-cell */}}
        {{- $anti_groups = append $anti_groups "diego-cell" }}
      {{- end }}
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: quarks.cloudfoundry.org/quarks-statefulset-name
              operator: In
              values: {{- $anti_groups | toYaml | nindent 14 }}
          topologyKey: kubernetes.io/hostname
  {{- end }}{{/* with $affinity */}}

  {{- with $tolerations := $sizing.tolerations }}
- type: replace
  path: /instance_groups/name={{ $instance_group }}/env?/bosh/agent/settings/tolerations
  value: {{- $tolerations | toYaml | nindent 2 }}
  {{- end }}

{{- end }}{{/* range $instance_group */}}
