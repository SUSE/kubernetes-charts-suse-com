# The `jobs` tree associates feature flag conditions with jobs
# in instance groups. It further allows the specification of the
# processes of a job, for jobs where job and process names differ from
# each other, and jobs with more than one process.

# Some cf-deployment jobs are moved to different instance groups;
# the job name remains unchanged.

move_jobs:
  api:
    routing-api: routing-api
  scheduler:
    auctioneer: auctioneer
  doppler:
    log-cache: log-cache
    log-cache-gateway: log-cache
    log-cache-nozzle: log-cache
    log-cache-cf-auth-proxy: log-cache
    route_registrar: log-cache

# Include default settings for `number_of_worker` properties because
# they are not set in cf-deployment, and spec files are not available
# to the helm chart. The values are required to dynamically generate
# process entries for all worker processes at deployment time.

properties:
  api:
    cloud_controller_ng:
      cc:
        jobs:
          local:
            number_of_workers: 2
  cc-worker:
    cloud_controller_worker:
      cc:
        jobs:
          generic:
            number_of_workers: 1

# Definition of all addons; jobs and processes will be filled in by _jobs.update.
# Format is the same as the `jobs` tree. Addons can be disabled by setting their
# `condition` to `false`.

addon_jobs:
  bosh-dns-aliases:
    '$default': false
  bpm:
    '$default': false
  metrics-agent:
    '$default': false
  metrics-discovery-registrar:
    '$default': false

# `jobs` contains a map of instance groups to jobs.
#
# Each job has a `condition` and a list of `processes`. Jobs can inherit
# their condition from the special "$defaults" entry of their instance group.
# If neither is set, the condition defaults to `true`. For convenience
#
#   jobs:
#     some_ig:
#       some_job: some_condition
#
# is equivalent to
#
#   jobs:
#     some_ig:
#       some_job:
#         condition: some_condition
#         processes: ~
#
# _jobs.update will fill in additional jobs from the cf-deployment manifest.
# They will inherit the "$default" condition of their instance group.
# If the job doesn't yet have a process list, it will be given a default one
# with a single process of the same name as the job.

jobs:

  # Autoscaler instance groups. They need to include the full list of jobs because
  # this information is not available from the cf-deployment manifest.

  asactors:
    '$default': 'features.autoscaler.enabled'
    operator: ~
    scalingengine: ~
    scheduler: ~
  asapi:
    '$default': 'features.autoscaler.enabled'
    golangapiserver: ~
    metricsforwarder: ~
    route_registrar: ~
  asdatabase:
    postgres: 'features.autoscaler.enabled && !features.autoscaler.mysql.enabled'
  asmetrics:
    '$default': 'features.autoscaler.enabled'
    eventgenerator: ~
    metricsserver: ~
  asnozzle:
    metricsgateway: 'features.autoscaler.enabled'

  # cf-deployement instance groups. Data here will be extended with settings from
  # the manifest. CC worker processes are created dynamically based on property values.

  api:
    cloud_controller_ng:
      # "local_worker_N" processes will be appended by _jobs.update.
      # Number of local worker processes is:
      # properties.api.cloud_controller_ng.cc.jobs.local.number_of_workers
      processes: [cloud_controller_ng, nginx, ccng_monit_http_healthcheck]
  auctioneer:
    '$default': '!features.eirini.enabled'
  cc-worker:
    cloud_controller_worker:
      # "worker_N" processes will be appended by _jobs.update.
      # Number of local worker processes is:
      # properties.cc-worker.cloud_controller_worker.cc.jobs.generic.number_of_workers
      processes: []
  credhub:
    '$default': 'features.credhub.enabled'
    # Added via ops in assets/operations/instance_groups/credhub.yaml
    route_registrar: ~
    cf-cli-7-linux:
      processes: [credhub-internal-security-group-setup]
  database:
    # database instance group is replaced by native release
    '$default': false
  diego-api:
    cfdot:
      processes: []
  diego-cell:
    '$default': '!features.eirini.enabled && !features.multiple_cluster_mode.control_plane.enabled'
    bosh-dns-adapter: false
    cfdot:
      processes: []
    garden-cni:
      processes: []
    silk-cni:
      processes: []
  routing-api:
    '$default': 'features.routing_api.enabled'
  scheduler:
    cc_deployment_updater: false
    cfdot:
      processes: []
    ssh_proxy: '!features.eirini.enabled'
    tps:
      condition: '!features.eirini.enabled'
      processes: [watcher]
  smoke-tests:
    '$default': 'testing.smoke_tests.enabled'
    # Added via ops in assets/operations/instance_groups/smoke-tests.yaml
    cf-cli-7-linux:
      processes: []
  singleton-blobstore:
    '$default': '!features.external_blobstore.enabled'
    blobstore:
      processes: [nginx, url_signer]
  tcp-router:
    '$default': 'features.routing_api.enabled'
  rotate-cc-database-key:
    rotate_cc_database_key:
      processes: [rotate]
  uaa:
    # Added via ops in assets/operations/instance_groups/uaa.yaml
    cf-cli-7-linux:
      condition: 'features.credhub.enabled'
      processes: [uaa-internal-security-group-setup]

  # additional tests defined in ops files; only smoke-tests is in cf-deployment

  acceptance-tests:
    acceptance-tests: 'testing.cf_acceptance_tests.enabled'
  brain-tests:
    acceptance-tests-brain: 'testing.brain_tests.enabled'
  sync-integration-tests:
    sync-integration-tests: 'testing.sync_integration_tests.enabled && !features.eirini.enabled'
