---
apiVersion: "v1"
data:
  # PEM encoded RSA private key used to identify host.
  app-ssh-key: {{ required "APP_SSH_KEY configuration missing" .Values.env.APP_SSH_KEY | b64enc | quote }}

  # MD5 fingerprint of the host key of the SSH proxy that brokers connections to
  # application instances.
  app-ssh-key-fingerprint: {{ required "APP_SSH_KEY_FINGERPRINT configuration missing" .Values.env.APP_SSH_KEY_FINGERPRINT | b64enc | quote }}

  # PEM-encoded certificate
  auctioneer-rep-cert: {{ required "AUCTIONEER_REP_CERT configuration missing" .Values.env.AUCTIONEER_REP_CERT | b64enc | quote }}

  # PEM-encoded key
  auctioneer-rep-key: {{ required "AUCTIONEER_REP_KEY configuration missing" .Values.env.AUCTIONEER_REP_KEY | b64enc | quote }}

  # PEM-encoded server certificate
  auctioneer-server-cert: {{ required "AUCTIONEER_SERVER_CERT configuration missing" .Values.env.AUCTIONEER_SERVER_CERT | b64enc | quote }}

  # PEM-encoded server key
  auctioneer-server-key: {{ required "AUCTIONEER_SERVER_KEY configuration missing" .Values.env.AUCTIONEER_SERVER_KEY | b64enc | quote }}

  # The password for access to the diego BBS database.
  bbs-active-key-passphrase: {{ randAlphaNum 32 | b64enc | quote }}

  # PEM-encoded certificate
  bbs-auctioneer-cert: {{ required "BBS_AUCTIONEER_CERT configuration missing" .Values.env.BBS_AUCTIONEER_CERT | b64enc | quote }}

  # PEM-encoded key
  bbs-auctioneer-key: {{ required "BBS_AUCTIONEER_KEY configuration missing" .Values.env.BBS_AUCTIONEER_KEY | b64enc | quote }}

  # PEM-encoded client certificate.
  bbs-client-crt: {{ required "BBS_CLIENT_CRT configuration missing" .Values.env.BBS_CLIENT_CRT | b64enc | quote }}

  # PEM-encoded client key.
  bbs-client-key: {{ required "BBS_CLIENT_KEY configuration missing" .Values.env.BBS_CLIENT_KEY | b64enc | quote }}

  # PEM-encoded certificate
  bbs-rep-cert: {{ required "BBS_REP_CERT configuration missing" .Values.env.BBS_REP_CERT | b64enc | quote }}

  # PEM-encoded key
  bbs-rep-key: {{ required "BBS_REP_KEY configuration missing" .Values.env.BBS_REP_KEY | b64enc | quote }}

  # PEM-encoded client certificate.
  bbs-server-crt: {{ required "BBS_SERVER_CRT configuration missing" .Values.env.BBS_SERVER_CRT | b64enc | quote }}

  # PEM-encoded client key.
  bbs-server-key: {{ required "BBS_SERVER_KEY configuration missing" .Values.env.BBS_SERVER_KEY | b64enc | quote }}

  # The basic auth password that Cloud Controller uses to connect to the
  # blobstore server. Auto-generated if not provided. Passwords must be
  # alphanumeric (URL-safe).
  blobstore-password: {{ randAlphaNum 32 | b64enc | quote }}

  # The secret used for signing URLs between Cloud Controller and blobstore.
  blobstore-secure-link: {{ randAlphaNum 32 | b64enc | quote }}

  # The PEM-encoded certificate (optionally as a certificate chain) for serving
  # blobs over TLS/SSL.
  blobstore-tls-cert: {{ required "BLOBSTORE_TLS_CERT configuration missing" .Values.env.BLOBSTORE_TLS_CERT | b64enc | quote }}

  # The PEM-encoded private key for signing TLS/SSL traffic.
  blobstore-tls-key: {{ required "BLOBSTORE_TLS_KEY configuration missing" .Values.env.BLOBSTORE_TLS_KEY | b64enc | quote }}

  # The password for the bulk api.
  bulk-api-password: {{ randAlphaNum 32 | b64enc | quote }}

  # The PEM-encoded certificate for internal cloud controller traffic.
  cc-server-crt: {{ required "CC_SERVER_CRT configuration missing" .Values.env.CC_SERVER_CRT | b64enc | quote }}

  # The PEM-encoded private key for internal cloud controller traffic.
  cc-server-key: {{ required "CC_SERVER_KEY configuration missing" .Values.env.CC_SERVER_KEY | b64enc | quote }}

  # The PEM-encoded certificate for internal cloud controller uploader traffic.
  cc-uploader-crt: {{ required "CC_UPLOADER_CRT configuration missing" .Values.env.CC_UPLOADER_CRT | b64enc | quote }}

  # The PEM-encoded private key for internal cloud controller uploader traffic.
  cc-uploader-key: {{ required "CC_UPLOADER_KEY configuration missing" .Values.env.CC_UPLOADER_KEY | b64enc | quote }}

  # The password for access to the Cloud Controller database.
  ccdb-role-password: {{ randAlphaNum 32 | b64enc | quote }}

  # PEM-encoded broker server certificate.
  cf-usb-broker-server-cert: {{ required "CF_USB_BROKER_SERVER_CERT configuration missing" .Values.env.CF_USB_BROKER_SERVER_CERT | b64enc | quote }}

  # PEM-encoded broker server key.
  cf-usb-broker-server-key: {{ required "CF_USB_BROKER_SERVER_KEY configuration missing" .Values.env.CF_USB_BROKER_SERVER_KEY | b64enc | quote }}

  # The password for access to the Universal Service Broker.
  cf-usb-password: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for the cluster administrator.
  cluster-admin-password: {{ required "CLUSTER_ADMIN_PASSWORD configuration missing" .Values.env.CLUSTER_ADMIN_PASSWORD | b64enc | quote }}

  # PEM-encoded agent certificate.
  consul-agent-cert: {{ required "CONSUL_AGENT_CERT configuration missing" .Values.env.CONSUL_AGENT_CERT | b64enc | quote }}

  # PEM-encoded client key.
  consul-agent-key: {{ required "CONSUL_AGENT_KEY configuration missing" .Values.env.CONSUL_AGENT_KEY | b64enc | quote }}

  # Part of: A list of passphrases that will be converted into encryption keys,
  # the first key in the list is the active one.
  consul-encryption-keys: {{ randAlphaNum 32 | b64enc | quote }}

  # PEM-encoded server certificate.
  consul-server-cert: {{ required "CONSUL_SERVER_CERT configuration missing" .Values.env.CONSUL_SERVER_CERT | b64enc | quote }}

  # PEM-encoded server key.
  consul-server-key: {{ required "CONSUL_SERVER_KEY configuration missing" .Values.env.CONSUL_SERVER_KEY | b64enc | quote }}

  # Key for encrypting sensitive values in the Cloud Controller database.
  db-encryption-key: {{ randAlphaNum 32 | b64enc | quote }}

  # PEM-encoded certificate.
  doppler-cert: {{ required "DOPPLER_CERT configuration missing" .Values.env.DOPPLER_CERT | b64enc | quote }}

  # PEM-encoded key.
  doppler-key: {{ required "DOPPLER_KEY configuration missing" .Values.env.DOPPLER_KEY | b64enc | quote }}

  # PEM-encoded client certificate.
  etcd-client-crt: {{ required "ETCD_CLIENT_CRT configuration missing" .Values.env.ETCD_CLIENT_CRT | b64enc | quote }}

  # PEM-encoded client key.
  etcd-client-key: {{ required "ETCD_CLIENT_KEY configuration missing" .Values.env.ETCD_CLIENT_KEY | b64enc | quote }}

  # PEM-encoded peer certificate.
  etcd-peer-crt: {{ required "ETCD_PEER_CRT configuration missing" .Values.env.ETCD_PEER_CRT | b64enc | quote }}

  # PEM-encoded peer key.
  etcd-peer-key: {{ required "ETCD_PEER_KEY configuration missing" .Values.env.ETCD_PEER_KEY | b64enc | quote }}

  # PEM-encoded server certificate.
  etcd-server-crt: {{ required "ETCD_SERVER_CRT configuration missing" .Values.env.ETCD_SERVER_CRT | b64enc | quote }}

  # PEM-encoded server key.
  etcd-server-key: {{ required "ETCD_SERVER_KEY configuration missing" .Values.env.ETCD_SERVER_KEY | b64enc | quote }}

  # The CA certificate for UAA
  hcp-ca-cert: {{ required "HCP_CA_CERT configuration missing" .Values.env.HCP_CA_CERT | b64enc | quote }}

  # Basic auth password for access to the Cloud Controller's internal API.
  internal-api-password: {{ randAlphaNum 32 | b64enc | quote }}

  # PEM-encoded CA certificate used to sign the TLS certificate used by all
  # components to secure their communications.
  internal-ca-cert: {{ required "INTERNAL_CA_CERT configuration missing" .Values.env.INTERNAL_CA_CERT | b64enc | quote }}

  # Shared secret used to verify cryptographically signed dropsonde messages.
  loggregator-shared-secret: {{ randAlphaNum 32 | b64enc | quote }}

  # PEM-encoded certificate.
  metron-cert: {{ required "METRON_CERT configuration missing" .Values.env.METRON_CERT | b64enc | quote }}

  # PEM-encoded key.
  metron-key: {{ required "METRON_KEY configuration missing" .Values.env.METRON_KEY | b64enc | quote }}

  # Password used for the monit API.
  monit-password: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for the MySQL server admin user.
  mysql-admin-password: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for access to the usb config database.
  mysql-cf-usb-password: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for the cluster logger health user.
  mysql-cluster-health-password: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for access to MySQL by diego.
  mysql-diego-password: {{ randAlphaNum 32 | b64enc | quote }}

  # Password used to authenticate to the MySQL Galera healthcheck endpoint.
  mysql-galera-healthcheck-endpoint-password: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for Basic Auth used to secure the MySQL proxy API.
  mysql-proxy-admin-password: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for access to MySQL by the routing-api
  mysql-routing-api-password: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for access to NATS.
  nats-password: {{ randAlphaNum 32 | b64enc | quote }}

  # Basic auth password to verify on incoming Service Broker requests
  persi-nfs-broker-password: {{ randAlphaNum 32 | b64enc | quote }}

  # LDAP service account password (required for LDAP integration only)
  persi-nfs-driver-ldap-password: {{ required "PERSI_NFS_DRIVER_LDAP_PASSWORD configuration missing" .Values.env.PERSI_NFS_DRIVER_LDAP_PASSWORD | b64enc | quote }}

  # Database password for storing broker state for the Persi NFS Broker
  persi-nfs-mysql-password: {{ randAlphaNum 32 | b64enc | quote }}

  # PEM-encoded client certificate
  rep-client-cert: {{ required "REP_CLIENT_CERT configuration missing" .Values.env.REP_CLIENT_CERT | b64enc | quote }}

  # PEM-encoded client key
  rep-client-key: {{ required "REP_CLIENT_KEY configuration missing" .Values.env.REP_CLIENT_KEY | b64enc | quote }}

  # PEM-encoded server certificate
  rep-server-cert: {{ required "REP_SERVER_CERT configuration missing" .Values.env.REP_SERVER_CERT | b64enc | quote }}

  # PEM-encoded server key
  rep-server-key: {{ required "REP_SERVER_KEY configuration missing" .Values.env.REP_SERVER_KEY | b64enc | quote }}

  # Support for route services is disabled when no value is configured. A robust
  # passphrase is recommended.
  router-services-secret: {{ randAlphaNum 32 | b64enc | quote }}

  # The public ssl cert for ssl termination.
  router-ssl-cert: {{ required "ROUTER_SSL_CERT configuration missing" .Values.env.ROUTER_SSL_CERT | b64enc | quote }}

  # The private ssl key for ssl termination.
  router-ssl-key: {{ required "ROUTER_SSL_KEY configuration missing" .Values.env.ROUTER_SSL_KEY | b64enc | quote }}

  # Password for HTTP basic auth to the varz/status endpoint.
  router-status-password: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for access to the uploader of staged droplets.
  staging-upload-password: {{ randAlphaNum 32 | b64enc | quote }}

  # PEM-encoded certificate
  syslogdrainbinder-cert: {{ required "SYSLOGDRAINBINDER_CERT configuration missing" .Values.env.SYSLOGDRAINBINDER_CERT | b64enc | quote }}

  # PEM-encoded key.
  syslogdrainbinder-key: {{ required "SYSLOGDRAINBINDER_KEY configuration missing" .Values.env.SYSLOGDRAINBINDER_KEY | b64enc | quote }}

  # PEM-encoded client certificate for internal communication between the cloud
  # controller and TPS.
  tps-cc-client-crt: {{ required "TPS_CC_CLIENT_CRT configuration missing" .Values.env.TPS_CC_CLIENT_CRT | b64enc | quote }}

  # PEM-encoded client key for internal communication between the cloud
  # controller and TPS.
  tps-cc-client-key: {{ required "TPS_CC_CLIENT_KEY configuration missing" .Values.env.TPS_CC_CLIENT_KEY | b64enc | quote }}

  # PEM-encoded certificate for communication with the traffic controller of the
  # log infra structure.
  trafficcontroller-cert: {{ required "TRAFFICCONTROLLER_CERT configuration missing" .Values.env.TRAFFICCONTROLLER_CERT | b64enc | quote }}

  # PEM-encoded key for communication with the traffic controller of the log
  # infra structure.
  trafficcontroller-key: {{ required "TRAFFICCONTROLLER_KEY configuration missing" .Values.env.TRAFFICCONTROLLER_KEY | b64enc | quote }}

  # The password of the admin client - a client named admin with uaa.admin as an
  # authority.
  uaa-admin-client-secret: {{ required "UAA_ADMIN_CLIENT_SECRET configuration missing" .Values.env.UAA_ADMIN_CLIENT_SECRET | b64enc | quote }}

  # The password for UAA access by the Cloud Controller.
  uaa-cc-client-secret: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for UAA access by the Routing API.
  uaa-clients-cc-routing-secret: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for UAA access by the Universal Service Broker.
  uaa-clients-cf-usb-secret: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for UAA access by the Cloud Controller for fetching usernames.
  uaa-clients-cloud-controller-username-lookup-secret: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for UAA access by the SSH proxy.
  uaa-clients-diego-ssh-proxy-secret: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for UAA access by doppler.
  uaa-clients-doppler-secret: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for UAA access by the gorouter.
  uaa-clients-gorouter-secret: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for UAA access by the task creating the cluster administrator
  # user
  uaa-clients-hcf-auto-config-secret: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for UAA access by the login client.
  uaa-clients-login-secret: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for UAA access by the TCP emitter.
  uaa-clients-tcp-emitter-secret: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for UAA access by the TCP router.
  uaa-clients-tcp-router-secret: {{ randAlphaNum 32 | b64enc | quote }}

  # The password for access to the UAA database.
  uaadb-password: {{ randAlphaNum 32 | b64enc | quote }}

kind: "Secret"
metadata:
  name: "secret"
  labels:
    skiff-role-name: "secret"
