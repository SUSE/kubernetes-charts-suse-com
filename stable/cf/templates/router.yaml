---
# The router role contains the following jobs:
#
# - global-properties: Dummy BOSH job used to host global parameters that are
#   required to configure SCF
#
# - authorize-internal-ca: Install both internal and UAA CA certificates
#
# - gorouter: Gorouter maintains a dynamic routing table based on updates
#   received from NATS and (when enabled) the Routing API. This routing table
#   maps URLs to backends. The router finds the URL in the routing table that
#   most closely matches the host header of the request and load balances across
#   the associated backends.
#
# Also: metron_agent

{{- if gt (int .Values.sizing.router.count) 65535 }}
_maxReplicas: {{ fail "router cannot have more than 65535 instances" }}
{{- end }}

{{- if and .Values.sizing.HA (and (ne (int .Values.sizing.router.count) 1) (lt (int .Values.sizing.router.count) 2)) }}
_minHAReplicas: {{ fail "router must have at least 2 instances for HA" }}
{{- end }}

{{- if lt (int .Values.sizing.memory.limit_factor) 1 }}
_minLimitFactor: {{ fail "The memory limit factor must be at least 1" }}
{{- end }}

{{- if lt (int .Values.sizing.router.count) 1 }}
_minReplicas: {{ fail "router must have at least 1 instances" }}
{{- end }}

apiVersion: "extensions/v1beta1"
kind: "Deployment"
metadata:
  name: "router"
  labels:
    skiff-role-name: "router"
spec:
  replicas: {{ if and .Values.sizing.HA (eq (int .Values.sizing.router.count) 1) -}} 2 {{- else -}} {{ .Values.sizing.router.count }} {{- end }}
  selector:
    matchLabels:
      skiff-role-name: "router"
  template:
    metadata:
      annotations:
        {{- if not (or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (int .Capabilities.KubeVersion.Minor) 6))) }}
        scheduler.alpha.kubernetes.io/affinity: "{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchExpressions\":[{\"key\":\"skiff-role-name\",\"operator\":\"In\",\"values\":[\"diego-cell\"]}]},\"topologyKey\":\"beta.kubernetes.io/os\"},\"weight\":100},{\"podAffinityTerm\":{\"labelSelector\":{\"matchExpressions\":[{\"key\":\"skiff-role-name\",\"operator\":\"In\",\"values\":[\"router\"]}]},\"topologyKey\":\"beta.kubernetes.io/os\"},\"weight\":100}]}}"
        {{- end }}
      labels:
        skiff-role-name: "router"
      name: "router"
    spec:
      {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (int .Capabilities.KubeVersion.Minor) 6)) }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "skiff-role-name"
                  operator: "In"
                  values:
                  - "diego-cell"
              topologyKey: "beta.kubernetes.io/os"
            weight: 100
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "skiff-role-name"
                  operator: "In"
                  values:
                  - "router"
              topologyKey: "beta.kubernetes.io/os"
            weight: 100
      {{- end }}
      containers:
      - env:
        - name: "CATS_SUITES"
          value: {{ .Values.env.CATS_SUITES | quote }}
        - name: "DNS_HEALTH_CHECK_HOST"
          value: {{ required "DNS_HEALTH_CHECK_HOST configuration missing" .Values.env.DNS_HEALTH_CHECK_HOST | quote }}
        - name: "FORCE_FORWARDED_PROTO_AS_HTTPS"
          value: {{ required "FORCE_FORWARDED_PROTO_AS_HTTPS configuration missing" .Values.env.FORCE_FORWARDED_PROTO_AS_HTTPS | quote }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secret-{{ .Release.Revision }}"
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secret-{{ .Release.Revision }}"
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "KUBE_AZ"
          value: "z1"
        - name: "KUBE_SERVICE_DOMAIN_SUFFIX"
          value: {{ .Values.env.KUBE_SERVICE_DOMAIN_SUFFIX | quote }}
        - name: "KUBE_SIZING_NATS_COUNT"
          value: {{ .Values.sizing.nats.count | quote }}
        - name: "LOG_LEVEL"
          value: {{ required "LOG_LEVEL configuration missing" .Values.env.LOG_LEVEL | quote }}
        - name: "METRON_CERT"
          valueFrom:
            secretKeyRef:
              key: "metron-cert"
              name: "secret-{{ .Release.Revision }}"
        - name: "METRON_KEY"
          valueFrom:
            secretKeyRef:
              key: "metron-key"
              name: "secret-{{ .Release.Revision }}"
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secret-{{ .Release.Revision }}"
        - name: "NATS_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "nats-password"
              name: "secret-{{ .Release.Revision }}"
        - name: "RELEASE_REVISION"
          value: {{ .Release.Revision | quote }}
        - name: "ROUTER_BALANCING_ALGORITHM"
          value: {{ .Values.env.ROUTER_BALANCING_ALGORITHM | quote }}
        - name: "ROUTER_SERVICES_SECRET"
          valueFrom:
            secretKeyRef:
              key: "router-services-secret"
              name: "secret-{{ .Release.Revision }}"
        - name: "ROUTER_SSL_CERT"
          valueFrom:
            secretKeyRef:
              key: "router-ssl-cert"
              name: "secret-{{ .Release.Revision }}"
        - name: "ROUTER_SSL_KEY"
          valueFrom:
            secretKeyRef:
              key: "router-ssl-key"
              name: "secret-{{ .Release.Revision }}"
        - name: "ROUTER_STATUS_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "router-status-password"
              name: "secret-{{ .Release.Revision }}"
        - name: "SCF_LOG_HOST"
          value: {{ .Values.env.SCF_LOG_HOST | quote }}
        - name: "SCF_LOG_PORT"
          value: {{ .Values.env.SCF_LOG_PORT | quote }}
        - name: "SCF_LOG_PROTOCOL"
          value: {{ required "SCF_LOG_PROTOCOL configuration missing" .Values.env.SCF_LOG_PROTOCOL | quote }}
        - name: "UAA_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "uaa-ca-cert"
              name: "secret-{{ .Release.Revision }}"
        - name: "UAA_CLIENTS_GOROUTER_SECRET"
          valueFrom:
            secretKeyRef:
              key: "uaa-clients-gorouter-secret"
              name: "secret-{{ .Release.Revision }}"
        - name: "UAA_HOST"
          value: {{ required "UAA_HOST configuration missing" .Values.env.UAA_HOST | quote }}
        - name: "UAA_PORT"
          value: {{ .Values.env.UAA_PORT | quote }}
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/scf-router:57446f1e5a1454c3ca36c7fa7edd954f29b866fb"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "router"
        ports:
        - containerPort: 80
          name: "router"
          protocol: "TCP"
        - containerPort: 443
          name: "router2"
          protocol: "TCP"
        - containerPort: 443
          name: "router3"
          protocol: "TCP"
        readinessProbe:
          failureThreshold: 0
          httpGet:
            path: "/health"
            port: 8080
            scheme: "HTTP"
          initialDelaySeconds: 0
          periodSeconds: 0
          successThreshold: 0
          timeoutSeconds: 0
        resources:
          {{- if .Values.sizing.memory.requests }}
          requests:
            memory: "{{ int .Values.sizing.router.memory }}Mi"
          {{- end }}

          {{- if .Values.sizing.memory.limits }}
          limits:
            memory: "{{ (mul (int .Values.sizing.memory.limit_factor) (int .Values.sizing.router.memory)) }}Mi"
          {{- end }}

        securityContext: ~
        volumeMounts: ~
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
      terminationGracePeriodSeconds: 600
---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "router"
  spec:
    ports:
    - name: "router"
      port: 80
      protocol: "TCP"
      targetPort: "router"
    - name: "router2"
      port: 443
      protocol: "TCP"
      targetPort: "router2"
    - name: "router3"
      port: 4443
      protocol: "TCP"
      targetPort: "router3"
    selector:
      skiff-role-name: "router"
    type: {{ if .Values.services.loadbalanced }} LoadBalancer {{ else }} ClusterIP {{ end }}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "router-public"
  spec:
    externalIPs: {{ 				default 					( append .Values.kube.external_ips 						( .Values.kube.external_ip ) 					) 					.Values.kube.external_ips 				| toJson 			}}
    ports:
    - name: "router"
      port: 80
      protocol: "TCP"
      targetPort: "router"
    - name: "router2"
      port: 443
      protocol: "TCP"
      targetPort: "router2"
    - name: "router3"
      port: 4443
      protocol: "TCP"
      targetPort: "router3"
    selector:
      skiff-role-name: "router"
    type: {{ if .Values.services.loadbalanced }} LoadBalancer {{ else }} ClusterIP {{ end }}
kind: "List"
