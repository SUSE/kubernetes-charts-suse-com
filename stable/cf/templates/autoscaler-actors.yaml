---
{{- if .Values.enable.autoscaler }}
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "autoscaler-actors-set"
    labels:
      app.kubernetes.io/component: "autoscaler-actors-set"
      skiff-role-name: "autoscaler-actors-set"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "autoscaler-actors-set"
      {{- end }}
  spec:
    clusterIP: "None"
    ports:
    - name: "scheduler"
      port: 7102
      protocol: "TCP"
      targetPort: 0
    - name: "sdhealthport"
      port: 9102
      protocol: "TCP"
      targetPort: 0
    - name: "scaling-engine"
      port: 7104
      protocol: "TCP"
      targetPort: 0
    - name: "sehealthport"
      port: 9104
      protocol: "TCP"
      targetPort: 0
    - name: "ophealthport"
      port: 9108
      protocol: "TCP"
      targetPort: 0
    selector:
      app.kubernetes.io/component: "autoscaler-actors"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "autoscaler-actors-scheduler-set"
    labels:
      app.kubernetes.io/component: "autoscaler-actors-scheduler-set"
      skiff-role-name: "autoscaler-actors-scheduler-set"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "autoscaler-actors-scheduler-set"
      {{- end }}
  spec:
    clusterIP: "None"
    ports:
    - name: "scheduler"
      port: 7102
      protocol: "TCP"
      targetPort: 0
    - name: "sdhealthport"
      port: 9102
      protocol: "TCP"
      targetPort: 0
    selector:
      app.kubernetes.io/component: "autoscaler-actors"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "autoscaler-actors-scheduler"
    labels:
      app.kubernetes.io/component: "autoscaler-actors-scheduler"
      skiff-role-name: "autoscaler-actors-scheduler"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "autoscaler-actors-scheduler"
      {{- end }}
  spec:
    ports:
    - name: "scheduler"
      port: 7102
      protocol: "TCP"
      targetPort: 7102
    - name: "sdhealthport"
      port: 9102
      protocol: "TCP"
      targetPort: 9102
    selector:
      app.kubernetes.io/component: "autoscaler-actors"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "autoscaler-actors-scalingengine-set"
    labels:
      app.kubernetes.io/component: "autoscaler-actors-scalingengine-set"
      skiff-role-name: "autoscaler-actors-scalingengine-set"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "autoscaler-actors-scalingengine-set"
      {{- end }}
  spec:
    clusterIP: "None"
    ports:
    - name: "scaling-engine"
      port: 7104
      protocol: "TCP"
      targetPort: 0
    - name: "sehealthport"
      port: 9104
      protocol: "TCP"
      targetPort: 0
    selector:
      app.kubernetes.io/component: "autoscaler-actors"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "autoscaler-actors-scalingengine"
    labels:
      app.kubernetes.io/component: "autoscaler-actors-scalingengine"
      skiff-role-name: "autoscaler-actors-scalingengine"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "autoscaler-actors-scalingengine"
      {{- end }}
  spec:
    ports:
    - name: "scaling-engine"
      port: 7104
      protocol: "TCP"
      targetPort: 7104
    - name: "sehealthport"
      port: 9104
      protocol: "TCP"
      targetPort: 9104
    selector:
      app.kubernetes.io/component: "autoscaler-actors"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "autoscaler-actors-operator-set"
    labels:
      app.kubernetes.io/component: "autoscaler-actors-operator-set"
      skiff-role-name: "autoscaler-actors-operator-set"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "autoscaler-actors-operator-set"
      {{- end }}
  spec:
    clusterIP: "None"
    ports:
    - name: "ophealthport"
      port: 9108
      protocol: "TCP"
      targetPort: 0
    selector:
      app.kubernetes.io/component: "autoscaler-actors"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "autoscaler-actors-operator"
    labels:
      app.kubernetes.io/component: "autoscaler-actors-operator"
      skiff-role-name: "autoscaler-actors-operator"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "autoscaler-actors-operator"
      {{- end }}
  spec:
    ports:
    - name: "ophealthport"
      port: 9108
      protocol: "TCP"
      targetPort: 9108
    selector:
      app.kubernetes.io/component: "autoscaler-actors"
kind: "List"
{{- end }}
---
# The autoscaler-actors instance group contains the following jobs:
#
# - global-properties: Dummy BOSH job used to host global parameters that are
#   required to configure SCF
#
# - authorize-internal-ca: Install both internal and UAA CA certificates
#
# Also: scheduler, scalingengine, operator, and bpm
{{- if .Values.enable.autoscaler }}

{{- if and (ne (typeOf .Values.sizing.autoscaler_actors.count) "<nil>") (gt (int .Values.sizing.autoscaler_actors.count) 3) }}
_maxReplicas: {{ fail "autoscaler_actors cannot have more than 3 instances" }}
{{- end }}

{{- if and .Values.config.HA .Values.config.HA_strict (ne (typeOf .Values.sizing.autoscaler_actors.count) "<nil>") (lt (int .Values.sizing.autoscaler_actors.count) 2) }}
_minHAReplicas: {{ fail "autoscaler_actors must have at least 2 instances for HA" }}
{{- end }}

{{- if and (ne (typeOf .Values.sizing.autoscaler_actors.count) "<nil>") (lt (int .Values.sizing.autoscaler_actors.count) 1) }}
_minReplicas: {{ fail "autoscaler_actors must have at least 1 instances" }}
{{- end }}

{{- if .Values.sizing.HA }}
_moved_sizing_HA: {{ fail "Bad use of moved variable sizing.HA. The new name to use is config.HA" }}
{{- end }}

{{- if .Values.sizing.cpu }}
_moved_sizing_cpu_limits: {{ if .Values.sizing.cpu.limits }} {{ fail "Bad use of moved variable sizing.cpu.limits. The new name to use is config.cpu.limits" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.cpu }}
_moved_sizing_cpu_requests: {{ if .Values.sizing.cpu.requests }} {{ fail "Bad use of moved variable sizing.cpu.requests. The new name to use is config.cpu.requests" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.memory }}
_moved_sizing_memory_limits: {{ if .Values.sizing.memory.limits }} {{ fail "Bad use of moved variable sizing.memory.limits. The new name to use is config.memory.limits" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.memory }}
_moved_sizing_memory_requests: {{ if .Values.sizing.memory.requests }} {{ fail "Bad use of moved variable sizing.memory.requests. The new name to use is config.memory.requests" }} {{else}} ok {{end}}
{{- end }}

apiVersion: {{ if (.Capabilities.APIVersions.Has "apps/v1") }}apps/v1{{ else }}apps/v1beta1{{ end }}
kind: "StatefulSet"
metadata:
  name: "autoscaler-actors"
  labels:
    app.kubernetes.io/component: "autoscaler-actors"
    skiff-role-name: "autoscaler-actors"
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}

    {{- if .Values.config.use_istio }}
    app: "autoscaler-actors"
    {{- end }}

    {{- if .Values.config.use_istio }}
    version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    {{- end }}

spec:
  podManagementPolicy: "Parallel"
  replicas: {{ if (ne (typeOf .Values.sizing.autoscaler_actors.count) "<nil>") }}{{ .Values.sizing.autoscaler_actors.count }}{{ else }}{{ if .Values.config.HA }}{{ 2 }}{{ else }}{{ 1 }}{{ end }}{{ end }}
  selector:
    matchLabels:
      skiff-role-name: "autoscaler-actors"
  serviceName: "autoscaler-actors-set"
  template:
    metadata:
      name: "autoscaler-actors"
      labels:
        app.kubernetes.io/component: "autoscaler-actors"
        skiff-role-name: "autoscaler-actors"
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
        app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
        helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}

        {{- if .Values.config.use_istio }}
        app: "autoscaler-actors"
        {{- end }}

        {{- if .Values.config.use_istio }}
        version: {{ default .Chart.Version .Chart.AppVersion | quote }}
        {{- end }}

      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if .Values.config.use_istio }}
        sidecar.istio.io/inject: "false"
        {{- end }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app.kubernetes.io/component"
                  operator: "In"
                  values:
                  - "autoscaler-actors"
              topologyKey: {{if eq (typeOf .Values.kube.podAntiAffinityTopologyKey) "<nil>"}}kubernetes.io/hostname{{else}}{{.Values.kube.podAntiAffinityTopologyKey}}{{end}}
            weight: 100
        {{- if .Values.sizing.autoscaler_actors.affinity.nodeAffinity }}
        nodeAffinity: {{ toJson .Values.sizing.autoscaler_actors.affinity.nodeAffinity }}
        {{- end }}
      containers:
      {{- if .Values.enable.autoscaler }}
      - env:
        - name: "AUTOSCALER_DB_ADDRESS"
          value: {{if ne (typeOf .Values.env.AUTOSCALER_DB_ADDRESS) "<nil>"}}{{if has (kindOf .Values.env.AUTOSCALER_DB_ADDRESS) (list "map" "slice")}}{{.Values.env.AUTOSCALER_DB_ADDRESS | toJson | quote}}{{else}}{{.Values.env.AUTOSCALER_DB_ADDRESS | quote}}{{end}}{{else}}""{{end}}

        {{- if not .Values.secrets.AUTOSCALER_DB_PASSWORD }}
        - name: "AUTOSCALER_DB_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-db-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.AUTOSCALER_DB_PASSWORD }}
        - name: "AUTOSCALER_DB_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-db-password"
              name: "secrets"
        {{- end }}

        - name: "AUTOSCALER_DB_PORT"
          value: {{if ne (typeOf .Values.env.AUTOSCALER_DB_PORT) "<nil>"}}{{if has (kindOf .Values.env.AUTOSCALER_DB_PORT) (list "map" "slice")}}{{.Values.env.AUTOSCALER_DB_PORT | toJson | quote}}{{else}}{{.Values.env.AUTOSCALER_DB_PORT | quote}}{{end}}{{else}}""{{end}}
        - name: "AUTOSCALER_DB_ROLE_NAME"
          value: {{if ne (typeOf .Values.env.AUTOSCALER_DB_ROLE_NAME) "<nil>"}}{{if has (kindOf .Values.env.AUTOSCALER_DB_ROLE_NAME) (list "map" "slice")}}{{.Values.env.AUTOSCALER_DB_ROLE_NAME | toJson | quote}}{{else}}{{.Values.env.AUTOSCALER_DB_ROLE_NAME | quote}}{{end}}{{else}}""{{end}}

        {{- if .Values.secrets.AUTOSCALER_SCALING_ENGINE_CLIENT_CERT }}
        - name: "AUTOSCALER_SCALING_ENGINE_CLIENT_CERT"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scaling-engine-client-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.AUTOSCALER_SCALING_ENGINE_CLIENT_CERT }}
        - name: "AUTOSCALER_SCALING_ENGINE_CLIENT_CERT"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scaling-engine-client-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if not .Values.secrets.AUTOSCALER_SCALING_ENGINE_CLIENT_CERT_KEY }}
        - name: "AUTOSCALER_SCALING_ENGINE_CLIENT_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scaling-engine-client-cert-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.AUTOSCALER_SCALING_ENGINE_CLIENT_CERT_KEY }}
        - name: "AUTOSCALER_SCALING_ENGINE_CLIENT_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scaling-engine-client-cert-key"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.AUTOSCALER_SCALING_ENGINE_SERVER_CERT }}
        - name: "AUTOSCALER_SCALING_ENGINE_SERVER_CERT"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scaling-engine-server-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.AUTOSCALER_SCALING_ENGINE_SERVER_CERT }}
        - name: "AUTOSCALER_SCALING_ENGINE_SERVER_CERT"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scaling-engine-server-cert"
              name: "secrets"
        {{- end }}

        {{- if .Values.secrets.AUTOSCALER_SCALING_ENGINE_SERVER_CERT_KEY }}
        - name: "AUTOSCALER_SCALING_ENGINE_SERVER_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scaling-engine-server-cert-key"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.AUTOSCALER_SCALING_ENGINE_SERVER_CERT_KEY }}
        - name: "AUTOSCALER_SCALING_ENGINE_SERVER_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scaling-engine-server-cert-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if not .Values.secrets.AUTOSCALER_SCHEDULER_CLIENT_CERT }}
        - name: "AUTOSCALER_SCHEDULER_CLIENT_CERT"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scheduler-client-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.AUTOSCALER_SCHEDULER_CLIENT_CERT }}
        - name: "AUTOSCALER_SCHEDULER_CLIENT_CERT"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scheduler-client-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.AUTOSCALER_SCHEDULER_CLIENT_CERT_KEY }}
        - name: "AUTOSCALER_SCHEDULER_CLIENT_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scheduler-client-cert-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.AUTOSCALER_SCHEDULER_CLIENT_CERT_KEY }}
        - name: "AUTOSCALER_SCHEDULER_CLIENT_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scheduler-client-cert-key"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.AUTOSCALER_SCHEDULER_SERVER_CERT }}
        - name: "AUTOSCALER_SCHEDULER_SERVER_CERT"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scheduler-server-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.AUTOSCALER_SCHEDULER_SERVER_CERT }}
        - name: "AUTOSCALER_SCHEDULER_SERVER_CERT"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scheduler-server-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.AUTOSCALER_SCHEDULER_SERVER_CERT_KEY }}
        - name: "AUTOSCALER_SCHEDULER_SERVER_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scheduler-server-cert-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.AUTOSCALER_SCHEDULER_SERVER_CERT_KEY }}
        - name: "AUTOSCALER_SCHEDULER_SERVER_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-scheduler-server-cert-key"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.AUTOSCALER_UAA_CLIENT_SECRET }}
        - name: "AUTOSCALER_UAA_CLIENT_SECRET"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-uaa-client-secret"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.AUTOSCALER_UAA_CLIENT_SECRET }}
        - name: "AUTOSCALER_UAA_CLIENT_SECRET"
          valueFrom:
            secretKeyRef:
              key: "autoscaler-uaa-client-secret"
              name: "secrets"
        {{- end }}

        - name: "AZ_LABEL_NAME"
          value: {{if ne (typeOf .Values.env.AZ_LABEL_NAME) "<nil>"}}{{if has (kindOf .Values.env.AZ_LABEL_NAME) (list "map" "slice")}}{{.Values.env.AZ_LABEL_NAME | toJson | quote}}{{else}}{{.Values.env.AZ_LABEL_NAME | quote}}{{end}}{{else}}""{{end}}
        - name: "CATS_SUITES"
          value: {{if ne (typeOf .Values.env.CATS_SUITES) "<nil>"}}{{if has (kindOf .Values.env.CATS_SUITES) (list "map" "slice")}}{{.Values.env.CATS_SUITES | toJson | quote}}{{else}}{{.Values.env.CATS_SUITES | quote}}{{end}}{{else}}""{{end}}
        - name: "CONFIGGIN_SA_TOKEN"
          valueFrom:
            secretKeyRef:
              name: "configgin"
              key: "token"
        - name: "CONFIGGIN_VERSION_TAG"
          value: {{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}
        - name: "GARDEN_ROOTFS_DRIVER"
          value: {{if ne (typeOf .Values.env.GARDEN_ROOTFS_DRIVER) "<nil>"}}{{if has (kindOf .Values.env.GARDEN_ROOTFS_DRIVER) (list "map" "slice")}}{{.Values.env.GARDEN_ROOTFS_DRIVER | toJson | quote}}{{else}}{{.Values.env.GARDEN_ROOTFS_DRIVER | quote}}{{end}}{{else}}{{fail "env.GARDEN_ROOTFS_DRIVER has not been set"}}{{end}}

        {{- if not .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets"
        {{- end }}

        - name: "KUBERNETES_CLUSTER_DOMAIN"
          value: {{if ne (typeOf .Values.env.KUBERNETES_CLUSTER_DOMAIN) "<nil>"}}{{if has (kindOf .Values.env.KUBERNETES_CLUSTER_DOMAIN) (list "map" "slice")}}{{.Values.env.KUBERNETES_CLUSTER_DOMAIN | toJson | quote}}{{else}}{{.Values.env.KUBERNETES_CLUSTER_DOMAIN | quote}}{{end}}{{else}}""{{end}}
        - name: "KUBERNETES_CONTAINER_NAME"
          value: "autoscaler-actors"
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"

        {{- if not .Values.secrets.MONIT_PASSWORD }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MONIT_PASSWORD }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets"
        {{- end }}

        - name: "PZ_LABEL_NAME"
          value: {{if ne (typeOf .Values.env.PZ_LABEL_NAME) "<nil>"}}{{if has (kindOf .Values.env.PZ_LABEL_NAME) (list "map" "slice")}}{{.Values.env.PZ_LABEL_NAME | toJson | quote}}{{else}}{{.Values.env.PZ_LABEL_NAME | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_HOST"
          value: {{if ne (typeOf .Values.env.SCF_LOG_HOST) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_HOST) (list "map" "slice")}}{{.Values.env.SCF_LOG_HOST | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_HOST | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_PORT"
          value: {{if ne (typeOf .Values.env.SCF_LOG_PORT) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_PORT) (list "map" "slice")}}{{.Values.env.SCF_LOG_PORT | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_PORT | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_PROTOCOL"
          value: {{if ne (typeOf .Values.env.SCF_LOG_PROTOCOL) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_PROTOCOL) (list "map" "slice")}}{{.Values.env.SCF_LOG_PROTOCOL | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_PROTOCOL | quote}}{{end}}{{else}}{{fail "env.SCF_LOG_PROTOCOL has not been set"}}{{end}}
        - name: "UAA_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "uaa-ca-cert"
              name: "secrets"
        - name: "VCAP_HARD_NPROC"
          value: {{ .Values.kube.limits.nproc.hard | quote }}
        - name: "VCAP_SOFT_NPROC"
          value: {{ .Values.kube.limits.nproc.soft | quote }}
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/scf-autoscaler-actors:76a2de51e3236e9bfbfb4037c839a6f966d4ec51"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "autoscaler-actors"
        ports:
        - containerPort: 7102
          name: "scheduler"
          protocol: "TCP"
        - containerPort: 9102
          name: "sdhealthport"
          protocol: "TCP"
        - containerPort: 7104
          name: "scaling-engine"
          protocol: "TCP"
        - containerPort: 9104
          name: "sehealthport"
          protocol: "TCP"
        - containerPort: 9108
          name: "ophealthport"
          protocol: "TCP"
        readinessProbe:
          exec:
            command:
            - "/opt/fissile/readiness-probe.sh"
            - "curl --silent --fail --head http://${HOSTNAME}:9102"
            - "curl --silent --fail --head http://${HOSTNAME}:9104"
            - "curl --silent --fail --head http://${HOSTNAME}:9108"
        resources:
          requests:
            {{- if and .Values.config.memory.requests .Values.sizing.autoscaler_actors.memory.request }}
            memory: "{{ int .Values.sizing.autoscaler_actors.memory.request }}Mi"
            {{- end }}

            {{- if and .Values.config.cpu.requests .Values.sizing.autoscaler_actors.cpu.request }}
            cpu: "{{ int .Values.sizing.autoscaler_actors.cpu.request }}m"
            {{- end }}

          limits:
            {{- if and .Values.config.memory.limits .Values.sizing.autoscaler_actors.memory.limit }}
            memory: "{{ int .Values.sizing.autoscaler_actors.memory.limit }}Mi"
            {{- end }}

            {{- if and .Values.config.cpu.limits .Values.sizing.autoscaler_actors.cpu.limit }}
            cpu: "{{ int .Values.sizing.autoscaler_actors.cpu.limit }}m"
            {{- end }}

        securityContext:
          allowPrivilegeEscalation: true
          privileged: true
        volumeMounts:
        - mountPath: "/opt/fissile/config"
          name: "deployment-manifest"
          readOnly: true
      {{- end }}
      - env:
        - name: "AZ_LABEL_NAME"
          value: {{if ne (typeOf .Values.env.AZ_LABEL_NAME) "<nil>"}}{{if has (kindOf .Values.env.AZ_LABEL_NAME) (list "map" "slice")}}{{.Values.env.AZ_LABEL_NAME | toJson | quote}}{{else}}{{.Values.env.AZ_LABEL_NAME | quote}}{{end}}{{else}}""{{end}}
        - name: "CATS_SUITES"
          value: {{if ne (typeOf .Values.env.CATS_SUITES) "<nil>"}}{{if has (kindOf .Values.env.CATS_SUITES) (list "map" "slice")}}{{.Values.env.CATS_SUITES | toJson | quote}}{{else}}{{.Values.env.CATS_SUITES | quote}}{{end}}{{else}}""{{end}}
        - name: "CONFIGGIN_IMPORT_DOPPLER"
          valueFrom:
            secretKeyRef:
              name: "doppler"
              key: {{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}
        - name: "CONFIGGIN_SA_TOKEN"
          valueFrom:
            secretKeyRef:
              name: "configgin"
              key: "token"
        - name: "CONFIGGIN_VERSION_TAG"
          value: {{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}
        - name: "GARDEN_ROOTFS_DRIVER"
          value: {{if ne (typeOf .Values.env.GARDEN_ROOTFS_DRIVER) "<nil>"}}{{if has (kindOf .Values.env.GARDEN_ROOTFS_DRIVER) (list "map" "slice")}}{{.Values.env.GARDEN_ROOTFS_DRIVER | toJson | quote}}{{else}}{{.Values.env.GARDEN_ROOTFS_DRIVER | quote}}{{end}}{{else}}{{fail "env.GARDEN_ROOTFS_DRIVER has not been set"}}{{end}}

        {{- if not .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets"
        {{- end }}

        - name: "KUBERNETES_CLUSTER_DOMAIN"
          value: {{if ne (typeOf .Values.env.KUBERNETES_CLUSTER_DOMAIN) "<nil>"}}{{if has (kindOf .Values.env.KUBERNETES_CLUSTER_DOMAIN) (list "map" "slice")}}{{.Values.env.KUBERNETES_CLUSTER_DOMAIN | toJson | quote}}{{else}}{{.Values.env.KUBERNETES_CLUSTER_DOMAIN | quote}}{{end}}{{else}}""{{end}}
        - name: "KUBERNETES_CONTAINER_NAME"
          value: "loggregator-agent"
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "KUBE_AZ"
          value: "z1"

        {{- if .Values.secrets.LOGGREGATOR_AGENT_CERT }}
        - name: "LOGGREGATOR_AGENT_CERT"
          valueFrom:
            secretKeyRef:
              key: "loggregator-agent-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.LOGGREGATOR_AGENT_CERT }}
        - name: "LOGGREGATOR_AGENT_CERT"
          valueFrom:
            secretKeyRef:
              key: "loggregator-agent-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if not .Values.secrets.LOGGREGATOR_AGENT_CERT_KEY }}
        - name: "LOGGREGATOR_AGENT_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "loggregator-agent-cert-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.LOGGREGATOR_AGENT_CERT_KEY }}
        - name: "LOGGREGATOR_AGENT_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "loggregator-agent-cert-key"
              name: "secrets"
        {{- end }}

        {{- if .Values.secrets.MONIT_PASSWORD }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MONIT_PASSWORD }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.PROM_SCRAPER_METRICS_TLS_CERT }}
        - name: "PROM_SCRAPER_METRICS_TLS_CERT"
          valueFrom:
            secretKeyRef:
              key: "prom-scraper-metrics-tls-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.PROM_SCRAPER_METRICS_TLS_CERT }}
        - name: "PROM_SCRAPER_METRICS_TLS_CERT"
          valueFrom:
            secretKeyRef:
              key: "prom-scraper-metrics-tls-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if not .Values.secrets.PROM_SCRAPER_METRICS_TLS_CERT_KEY }}
        - name: "PROM_SCRAPER_METRICS_TLS_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "prom-scraper-metrics-tls-cert-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.PROM_SCRAPER_METRICS_TLS_CERT_KEY }}
        - name: "PROM_SCRAPER_METRICS_TLS_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "prom-scraper-metrics-tls-cert-key"
              name: "secrets"
        {{- end }}

        {{- if .Values.secrets.PROM_SCRAPER_SCRAPE_TLS_CERT }}
        - name: "PROM_SCRAPER_SCRAPE_TLS_CERT"
          valueFrom:
            secretKeyRef:
              key: "prom-scraper-scrape-tls-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.PROM_SCRAPER_SCRAPE_TLS_CERT }}
        - name: "PROM_SCRAPER_SCRAPE_TLS_CERT"
          valueFrom:
            secretKeyRef:
              key: "prom-scraper-scrape-tls-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.PROM_SCRAPER_SCRAPE_TLS_CERT_KEY }}
        - name: "PROM_SCRAPER_SCRAPE_TLS_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "prom-scraper-scrape-tls-cert-key"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.PROM_SCRAPER_SCRAPE_TLS_CERT_KEY }}
        - name: "PROM_SCRAPER_SCRAPE_TLS_CERT_KEY"
          valueFrom:
            secretKeyRef:
              key: "prom-scraper-scrape-tls-cert-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        - name: "PZ_LABEL_NAME"
          value: {{if ne (typeOf .Values.env.PZ_LABEL_NAME) "<nil>"}}{{if has (kindOf .Values.env.PZ_LABEL_NAME) (list "map" "slice")}}{{.Values.env.PZ_LABEL_NAME | toJson | quote}}{{else}}{{.Values.env.PZ_LABEL_NAME | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_HOST"
          value: {{if ne (typeOf .Values.env.SCF_LOG_HOST) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_HOST) (list "map" "slice")}}{{.Values.env.SCF_LOG_HOST | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_HOST | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_PORT"
          value: {{if ne (typeOf .Values.env.SCF_LOG_PORT) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_PORT) (list "map" "slice")}}{{.Values.env.SCF_LOG_PORT | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_PORT | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_PROTOCOL"
          value: {{if ne (typeOf .Values.env.SCF_LOG_PROTOCOL) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_PROTOCOL) (list "map" "slice")}}{{.Values.env.SCF_LOG_PROTOCOL | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_PROTOCOL | quote}}{{end}}{{else}}{{fail "env.SCF_LOG_PROTOCOL has not been set"}}{{end}}
        - name: "VCAP_HARD_NPROC"
          value: {{ .Values.kube.limits.nproc.hard | quote }}
        - name: "VCAP_SOFT_NPROC"
          value: {{ .Values.kube.limits.nproc.soft | quote }}
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/scf-loggregator-agent:98a13dd53091f3cfc60126204d00aa5033ea7e1f"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "loggregator-agent"
        ports: ~
        readinessProbe: ~
        resources:
          requests:
            {{- if and .Values.config.memory.requests .Values.sizing.loggregator_agent.memory.request }}
            memory: "{{ int .Values.sizing.loggregator_agent.memory.request }}Mi"
            {{- end }}

            {{- if and .Values.config.cpu.requests .Values.sizing.loggregator_agent.cpu.request }}
            cpu: "{{ int .Values.sizing.loggregator_agent.cpu.request }}m"
            {{- end }}

          limits:
            {{- if and .Values.config.memory.limits .Values.sizing.loggregator_agent.memory.limit }}
            memory: "{{ int .Values.sizing.loggregator_agent.memory.limit }}Mi"
            {{- end }}

            {{- if and .Values.config.cpu.limits .Values.sizing.loggregator_agent.cpu.limit }}
            cpu: "{{ int .Values.sizing.loggregator_agent.cpu.limit }}m"
            {{- end }}

        securityContext:
          allowPrivilegeEscalation: true
          privileged: true
        volumeMounts:
        - mountPath: "/opt/fissile/config"
          name: "deployment-manifest"
          readOnly: true
      dnsPolicy: "ClusterFirst"

      {{- if ne .Values.kube.registry.username "" }}
      imagePullSecrets:
      - name: "registry-credentials"
      {{- end }}

      restartPolicy: "Always"

      {{- if and (eq (printf "%s" .Values.kube.auth) "rbac") (.Capabilities.APIVersions.Has "rbac.authorization.k8s.io/v1") }}
      serviceAccountName: "default"
      {{- end }}

      terminationGracePeriodSeconds: 600
      volumes:
      - name: "deployment-manifest"
        secret:
          secretName: "deployment-manifest"
          items:
          - key: "deployment-manifest"
            path: "deployment-manifest.yml"
  {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 7)) }}
  updateStrategy:
    type: "RollingUpdate"
  {{- end }}
{{- end }}
