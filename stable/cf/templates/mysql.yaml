---
# The mysql role contains the following jobs:
#
# - global-properties: Dummy BOSH job used to host global parameters that are
#   required to configure SCF
#
# - patch-properties: Dummy BOSH job used to host parameters that are used in
#   SCF patches for upstream bugs
#
# Also: mysql

{{- if gt (int .Values.sizing.mysql.count) 3 }}
_maxReplicas: {{ fail "mysql cannot have more than 3 instances" }}
{{- end }}

{{- if and .Values.sizing.HA (and (ne (int .Values.sizing.mysql.count) 1) (lt (int .Values.sizing.mysql.count) 2)) }}
_minHAReplicas: {{ fail "mysql must have at least 2 instances for HA" }}
{{- end }}

{{- if lt (int .Values.sizing.mysql.count) 1 }}
_minReplicas: {{ fail "mysql must have at least 1 instances" }}
{{- end }}

apiVersion: "apps/v1beta1"
kind: "StatefulSet"
metadata:
  name: "mysql"
  labels:
    skiff-role-name: "mysql"
spec:
  replicas: {{ if and .Values.sizing.HA (eq (int .Values.sizing.mysql.count) 1) -}} 2 {{- else -}} {{ .Values.sizing.mysql.count }} {{- end }}
  serviceName: "mysql-set"
  template:
    metadata:
      name: "mysql"
      labels:
        skiff-role-name: "mysql"
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if not (or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 6))) }}
        scheduler.alpha.kubernetes.io/affinity: "{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchExpressions\":[{\"key\":\"skiff-role-name\",\"operator\":\"In\",\"values\":[\"mysql\"]}]},\"topologyKey\":\"beta.kubernetes.io/os\"},\"weight\":100}]}}"
        {{- end }}
    spec:
      {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 6)) }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "skiff-role-name"
                  operator: "In"
                  values:
                  - "mysql"
              topologyKey: "beta.kubernetes.io/os"
            weight: 100
        {{- if .Values.sizing.mysql.affinity.nodeAffinity }}
        nodeAffinity: {{ toJson .Values.sizing.mysql.affinity.nodeAffinity }}
        {{- end }}
      {{- end }}
      containers:
      - env:
        - name: "CATS_SUITES"
          value: {{ .Values.env.CATS_SUITES | quote }}

        {{- if not .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.INTERNAL_CA_KEY }}
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_KEY }}
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secrets"
        {{- end }}

        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "KUBE_SERVICE_DOMAIN_SUFFIX"
          value: {{ .Values.env.KUBE_SERVICE_DOMAIN_SUFFIX | quote }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "MYSQL_ADMIN_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-admin-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "MYSQL_CCDB_ROLE_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-ccdb-role-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "MYSQL_CF_USB_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-cf-usb-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "MYSQL_CLUSTER_HEALTH_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-cluster-health-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "MYSQL_DIEGO_LOCKET_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-diego-locket-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "MYSQL_DIEGO_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-diego-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-galera-healthcheck-endpoint-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "MYSQL_PERSI_NFS_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-persi-nfs-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "MYSQL_ROUTING_API_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-routing-api-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "SCF_LOG_HOST"
          value: {{ .Values.env.SCF_LOG_HOST | quote }}
        - name: "SCF_LOG_PORT"
          value: {{ .Values.env.SCF_LOG_PORT | quote }}
        - name: "SCF_LOG_PROTOCOL"
          value: {{ required "SCF_LOG_PROTOCOL configuration missing" .Values.env.SCF_LOG_PROTOCOL | quote }}
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/scf-mysql:8b871defe2417a8181f6c893683e5be8e59e9521"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "mysql"
        ports:
        - containerPort: 3306
          name: "mysql"
          protocol: "TCP"
        - containerPort: 4567
          name: "galera-tcp"
          protocol: "TCP"
        - containerPort: 4567
          name: "galera-udp"
          protocol: "UDP"
        - containerPort: 4568
          name: "galera-ist"
          protocol: "TCP"
        - containerPort: 9200
          name: "healthcheck"
          protocol: "TCP"
        - containerPort: 4444
          name: "xtrabackup"
          protocol: "TCP"
        readinessProbe:
          failureThreshold: 0
          httpGet:
            path: "/"
            port: 9200
            scheme: "HTTP"
          initialDelaySeconds: 0
          periodSeconds: 0
          successThreshold: 0
          timeoutSeconds: 0
        resources:
          requests:
            {{- if and .Values.sizing.memory.requests .Values.sizing.mysql.memory.request }}
            memory: "{{ int .Values.sizing.mysql.memory.request }}Mi"
            {{- end }}

            {{- if and .Values.sizing.cpu.requests .Values.sizing.mysql.cpu.request }}
            cpu: "{{ int .Values.sizing.mysql.cpu.request }}m"
            {{- end }}

          limits:
            {{- if and .Values.sizing.memory.limits .Values.sizing.mysql.memory.limit }}
            memory: "{{ int .Values.sizing.mysql.memory.limit }}Mi"
            {{- end }}

            {{- if and .Values.sizing.cpu.limits .Values.sizing.mysql.cpu.limit }}
            cpu: "{{ int .Values.sizing.mysql.cpu.limit }}m"
            {{- end }}

        securityContext: ~
        volumeMounts:
        - mountPath: "/var/vcap/store"
          name: "mysql-data"
          readOnly: false
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
      terminationGracePeriodSeconds: 600
  {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 7)) }}
  updateStrategy:
    type: "RollingUpdate"
  {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: "mysql-data"
      annotations:
        volume.beta.kubernetes.io/storage-class: {{ .Values.kube.storage_class.persistent | quote }}
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "{{ .Values.sizing.mysql.disk_sizes.mysql_data }}G"
---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "mysql-set"
  spec:
    {{- if not .Values.services.loadbalanced }}
    clusterIP: "None"
    {{- end }}
    ports:
    - name: "mysql"
      port: 3306
      protocol: "TCP"
      targetPort: 0
    - name: "galera-tcp"
      port: 4567
      protocol: "TCP"
      targetPort: 0
    - name: "galera-udp"
      port: 4567
      protocol: "UDP"
      targetPort: 0
    - name: "galera-ist"
      port: 4568
      protocol: "TCP"
      targetPort: 0
    - name: "healthcheck"
      port: 9200
      protocol: "TCP"
      targetPort: 0
    - name: "xtrabackup"
      port: 4444
      protocol: "TCP"
      targetPort: 0
    selector:
      skiff-role-name: "mysql"
    type: {{ if .Values.services.loadbalanced }} LoadBalancer {{ else }} ClusterIP {{ end }}
kind: "List"
