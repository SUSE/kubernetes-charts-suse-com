---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "mysql-set"
    labels:
      app.kubernetes.io/component: "mysql-set"
      skiff-role-name: "mysql-set"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "mysql-set"
      {{- end }}
  spec:
    clusterIP: "None"
    ports:
    - name: "mysql"
      port: 13306
      protocol: "TCP"
      targetPort: 0
    - name: "galera-tcp"
      port: 4567
      protocol: "TCP"
      targetPort: 0
    - name: "galera-udp"
      port: 4567
      protocol: "UDP"
      targetPort: 0
    - name: "galera-ist"
      port: 4568
      protocol: "TCP"
      targetPort: 0
    - name: "healthcheck"
      port: 9200
      protocol: "TCP"
      targetPort: 0
    - name: "xtrabackup"
      port: 4444
      protocol: "TCP"
      targetPort: 0
    - name: "api-proxy"
      port: 8080
      protocol: "TCP"
      targetPort: 0
    - name: "mysql-proxy"
      port: 3306
      protocol: "TCP"
      targetPort: 0
    - name: "healthck-proxy"
      port: 1936
      protocol: "TCP"
      targetPort: 0
    selector:
      app.kubernetes.io/component: "mysql"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "mysql-mysql-set"
    labels:
      app.kubernetes.io/component: "mysql-mysql-set"
      skiff-role-name: "mysql-mysql-set"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "mysql-mysql-set"
      {{- end }}
  spec:
    clusterIP: "None"
    ports:
    - name: "mysql"
      port: 13306
      protocol: "TCP"
      targetPort: 0
    - name: "galera-tcp"
      port: 4567
      protocol: "TCP"
      targetPort: 0
    - name: "galera-udp"
      port: 4567
      protocol: "UDP"
      targetPort: 0
    - name: "galera-ist"
      port: 4568
      protocol: "TCP"
      targetPort: 0
    - name: "healthcheck"
      port: 9200
      protocol: "TCP"
      targetPort: 0
    - name: "xtrabackup"
      port: 4444
      protocol: "TCP"
      targetPort: 0
    selector:
      app.kubernetes.io/component: "mysql"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "mysql-mysql"
    labels:
      app.kubernetes.io/component: "mysql-mysql"
      skiff-role-name: "mysql-mysql"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "mysql-mysql"
      {{- end }}
  spec:
    ports:
    - name: "mysql"
      port: 13306
      protocol: "TCP"
      targetPort: 13306
    - name: "galera-tcp"
      port: 4567
      protocol: "TCP"
      targetPort: 4567
    - name: "galera-udp"
      port: 4567
      protocol: "UDP"
      targetPort: 4567
    - name: "galera-ist"
      port: 4568
      protocol: "TCP"
      targetPort: 4568
    - name: "healthcheck"
      port: 9200
      protocol: "TCP"
      targetPort: 9200
    - name: "xtrabackup"
      port: 4444
      protocol: "TCP"
      targetPort: 4444
    selector:
      app.kubernetes.io/component: "mysql"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "mysql-proxy-set"
    labels:
      app.kubernetes.io/component: "mysql-proxy-set"
      skiff-role-name: "mysql-proxy-set"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "mysql-proxy-set"
      {{- end }}
  spec:
    clusterIP: "None"
    ports:
    - name: "api-proxy"
      port: 8080
      protocol: "TCP"
      targetPort: 0
    - name: "mysql-proxy"
      port: 3306
      protocol: "TCP"
      targetPort: 0
    - name: "healthck-proxy"
      port: 1936
      protocol: "TCP"
      targetPort: 0
    selector:
      app.kubernetes.io/component: "mysql"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "mysql-proxy"
    labels:
      app.kubernetes.io/component: "mysql-proxy"
      skiff-role-name: "mysql-proxy"
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
      app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
      app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
      app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
      helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}
      {{- if .Values.config.use_istio }}
      app: "mysql-proxy"
      {{- end }}
  spec:
    ports:
    - name: "api-proxy"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    - name: "mysql-proxy"
      port: 3306
      protocol: "TCP"
      targetPort: 3306
    - name: "healthck-proxy"
      port: 1936
      protocol: "TCP"
      targetPort: 1936
    selector:
      app.kubernetes.io/component: "mysql"
kind: "List"
---
# The mysql instance group contains the following jobs:
#
# - global-properties: Dummy BOSH job used to host global parameters that are
#   required to configure SCF
#
# - patch-properties: Dummy BOSH job used to host parameters that are used in
#   SCF patches for upstream bugs
#
# Also: mysql and proxy

{{- if gt (int .Values.sizing.mysql.count) 3 }}
_maxReplicas: {{ fail "mysql cannot have more than 3 instances" }}
{{- end }}

{{- if and .Values.config.HA (and (ne (int .Values.sizing.mysql.count) 1) (lt (int .Values.sizing.mysql.count) 2)) }}
_minHAReplicas: {{ fail "mysql must have at least 2 instances for HA" }}
{{- end }}

{{- if lt (int .Values.sizing.mysql.count) 1 }}
_minReplicas: {{ fail "mysql must have at least 1 instances" }}
{{- end }}

{{- if .Values.sizing.HA }}
_moved_sizing_HA: {{ fail "Bad use of moved variable sizing.HA. The new name to use is config.HA" }}
{{- end }}

{{- if .Values.sizing.cpu }}
_moved_sizing_cpu_limits: {{ if .Values.sizing.cpu.limits }} {{ fail "Bad use of moved variable sizing.cpu.limits. The new name to use is config.cpu.limits" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.cpu }}
_moved_sizing_cpu_requests: {{ if .Values.sizing.cpu.requests }} {{ fail "Bad use of moved variable sizing.cpu.requests. The new name to use is config.cpu.requests" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.memory }}
_moved_sizing_memory_limits: {{ if .Values.sizing.memory.limits }} {{ fail "Bad use of moved variable sizing.memory.limits. The new name to use is config.memory.limits" }} {{else}} ok {{end}}
{{- end }}

{{- if .Values.sizing.memory }}
_moved_sizing_memory_requests: {{ if .Values.sizing.memory.requests }} {{ fail "Bad use of moved variable sizing.memory.requests. The new name to use is config.memory.requests" }} {{else}} ok {{end}}
{{- end }}

apiVersion: "apps/v1beta1"
kind: "StatefulSet"
metadata:
  name: "mysql"
  labels:
    app.kubernetes.io/component: "mysql"
    skiff-role-name: "mysql"
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
    app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}

    {{- if .Values.config.use_istio }}
    app: "mysql"
    {{- end }}

    {{- if .Values.config.use_istio }}
    version: {{ default .Chart.Version .Chart.AppVersion | quote }}
    {{- end }}

spec:
  podManagementPolicy: "OrderedReady"
  replicas: {{ if and .Values.config.HA (eq (int .Values.sizing.mysql.count) 1) -}} 2 {{- else -}} {{ .Values.sizing.mysql.count }} {{- end }}
  selector:
    matchLabels:
      skiff-role-name: "mysql"
  serviceName: "mysql-set"
  template:
    metadata:
      name: "mysql"
      labels:
        app.kubernetes.io/component: "mysql"
        skiff-role-name: "mysql"
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/name: {{ default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" | quote }}
        app.kubernetes.io/version: {{ default .Chart.Version .Chart.AppVersion | quote }}
        helm.sh/chart: {{ printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_") | quote }}

        {{- if .Values.config.use_istio }}
        app: "mysql"
        {{- end }}

        {{- if .Values.config.use_istio }}
        version: {{ default .Chart.Version .Chart.AppVersion | quote }}
        {{- end }}

      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if .Values.config.use_istio }}
        sidecar.istio.io/inject: "false"
        {{- end }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app.kubernetes.io/component"
                  operator: "In"
                  values:
                  - "mysql"
              topologyKey: "beta.kubernetes.io/os"
            weight: 100
        {{- if .Values.sizing.mysql.affinity.nodeAffinity }}
        nodeAffinity: {{ toJson .Values.sizing.mysql.affinity.nodeAffinity }}
        {{- end }}
      containers:
      - env:
        - name: "AZ_LABEL_NAME"
          value: {{if ne (typeOf .Values.env.AZ_LABEL_NAME) "<nil>"}}{{if has (kindOf .Values.env.AZ_LABEL_NAME) (list "map" "slice")}}{{.Values.env.AZ_LABEL_NAME | toJson | quote}}{{else}}{{.Values.env.AZ_LABEL_NAME | quote}}{{end}}{{else}}""{{end}}
        - name: "CATS_SUITES"
          value: {{if ne (typeOf .Values.env.CATS_SUITES) "<nil>"}}{{if has (kindOf .Values.env.CATS_SUITES) (list "map" "slice")}}{{.Values.env.CATS_SUITES | toJson | quote}}{{else}}{{.Values.env.CATS_SUITES | quote}}{{end}}{{else}}""{{end}}
        - name: "GARDEN_ROOTFS_DRIVER"
          value: {{if ne (typeOf .Values.env.GARDEN_ROOTFS_DRIVER) "<nil>"}}{{if has (kindOf .Values.env.GARDEN_ROOTFS_DRIVER) (list "map" "slice")}}{{.Values.env.GARDEN_ROOTFS_DRIVER | toJson | quote}}{{else}}{{.Values.env.GARDEN_ROOTFS_DRIVER | quote}}{{end}}{{else}}{{fail "env.GARDEN_ROOTFS_DRIVER has not been set"}}{{end}}

        {{- if not .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets"
        {{- end }}

        - name: "KUBERNETES_CLUSTER_DOMAIN"
          value: {{if ne (typeOf .Values.env.KUBERNETES_CLUSTER_DOMAIN) "<nil>"}}{{if has (kindOf .Values.env.KUBERNETES_CLUSTER_DOMAIN) (list "map" "slice")}}{{.Values.env.KUBERNETES_CLUSTER_DOMAIN | toJson | quote}}{{else}}{{.Values.env.KUBERNETES_CLUSTER_DOMAIN | quote}}{{end}}{{else}}""{{end}}
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"

        {{- if .Values.secrets.MONIT_PASSWORD }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MONIT_PASSWORD }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_ADMIN_PASSWORD }}
        - name: "MYSQL_ADMIN_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-admin-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_ADMIN_PASSWORD }}
        - name: "MYSQL_ADMIN_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-admin-password"
              name: "secrets"
        {{- end }}

        {{- if .Values.secrets.MYSQL_CCDB_ROLE_PASSWORD }}
        - name: "MYSQL_CCDB_ROLE_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-ccdb-role-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_CCDB_ROLE_PASSWORD }}
        - name: "MYSQL_CCDB_ROLE_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-ccdb-role-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_CF_USB_PASSWORD }}
        - name: "MYSQL_CF_USB_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-cf-usb-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_CF_USB_PASSWORD }}
        - name: "MYSQL_CF_USB_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-cf-usb-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_CLUSTER_HEALTH_PASSWORD }}
        - name: "MYSQL_CLUSTER_HEALTH_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-cluster-health-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_CLUSTER_HEALTH_PASSWORD }}
        - name: "MYSQL_CLUSTER_HEALTH_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-cluster-health-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_CREDHUB_USER_PASSWORD }}
        - name: "MYSQL_CREDHUB_USER_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-credhub-user-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_CREDHUB_USER_PASSWORD }}
        - name: "MYSQL_CREDHUB_USER_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-credhub-user-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_DIEGO_LOCKET_PASSWORD }}
        - name: "MYSQL_DIEGO_LOCKET_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-diego-locket-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_DIEGO_LOCKET_PASSWORD }}
        - name: "MYSQL_DIEGO_LOCKET_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-diego-locket-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_DIEGO_PASSWORD }}
        - name: "MYSQL_DIEGO_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-diego-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_DIEGO_PASSWORD }}
        - name: "MYSQL_DIEGO_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-diego-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD }}
        - name: "MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-galera-healthcheck-endpoint-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD }}
        - name: "MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-galera-healthcheck-endpoint-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_PERSI_NFS_PASSWORD }}
        - name: "MYSQL_PERSI_NFS_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-persi-nfs-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_PERSI_NFS_PASSWORD }}
        - name: "MYSQL_PERSI_NFS_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-persi-nfs-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_PROXY_ADMIN_PASSWORD }}
        - name: "MYSQL_PROXY_ADMIN_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-proxy-admin-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.MYSQL_PROXY_ADMIN_PASSWORD }}
        - name: "MYSQL_PROXY_ADMIN_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-proxy-admin-password"
              name: "secrets"
        {{- end }}

        - name: "MYSQL_PROXY_HEALTHCHECK_TIMEOUT"
          value: {{if ne (typeOf .Values.env.MYSQL_PROXY_HEALTHCHECK_TIMEOUT) "<nil>"}}{{if has (kindOf .Values.env.MYSQL_PROXY_HEALTHCHECK_TIMEOUT) (list "map" "slice")}}{{.Values.env.MYSQL_PROXY_HEALTHCHECK_TIMEOUT | toJson | quote}}{{else}}{{.Values.env.MYSQL_PROXY_HEALTHCHECK_TIMEOUT | quote}}{{end}}{{else}}{{fail "env.MYSQL_PROXY_HEALTHCHECK_TIMEOUT has not been set"}}{{end}}

        {{- if .Values.secrets.MYSQL_ROUTING_API_PASSWORD }}
        - name: "MYSQL_ROUTING_API_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-routing-api-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MYSQL_ROUTING_API_PASSWORD }}
        - name: "MYSQL_ROUTING_API_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-routing-api-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        - name: "PZ_LABEL_NAME"
          value: {{if ne (typeOf .Values.env.PZ_LABEL_NAME) "<nil>"}}{{if has (kindOf .Values.env.PZ_LABEL_NAME) (list "map" "slice")}}{{.Values.env.PZ_LABEL_NAME | toJson | quote}}{{else}}{{.Values.env.PZ_LABEL_NAME | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_HOST"
          value: {{if ne (typeOf .Values.env.SCF_LOG_HOST) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_HOST) (list "map" "slice")}}{{.Values.env.SCF_LOG_HOST | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_HOST | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_PORT"
          value: {{if ne (typeOf .Values.env.SCF_LOG_PORT) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_PORT) (list "map" "slice")}}{{.Values.env.SCF_LOG_PORT | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_PORT | quote}}{{end}}{{else}}""{{end}}
        - name: "SCF_LOG_PROTOCOL"
          value: {{if ne (typeOf .Values.env.SCF_LOG_PROTOCOL) "<nil>"}}{{if has (kindOf .Values.env.SCF_LOG_PROTOCOL) (list "map" "slice")}}{{.Values.env.SCF_LOG_PROTOCOL | toJson | quote}}{{else}}{{.Values.env.SCF_LOG_PROTOCOL | quote}}{{end}}{{else}}{{fail "env.SCF_LOG_PROTOCOL has not been set"}}{{end}}
        - name: "VCAP_HARD_NPROC"
          value: {{ .Values.kube.limits.nproc.hard | quote }}
        - name: "VCAP_SOFT_NPROC"
          value: {{ .Values.kube.limits.nproc.soft | quote }}
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/scf-mysql:27b2976814a27e78fb741d7c6bbd4ec008609398"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "mysql"
        ports:
        - containerPort: 13306
          name: "mysql"
          protocol: "TCP"
        - containerPort: 4567
          name: "galera-tcp"
          protocol: "TCP"
        - containerPort: 4567
          name: "galera-udp"
          protocol: "UDP"
        - containerPort: 4568
          name: "galera-ist"
          protocol: "TCP"
        - containerPort: 9200
          name: "healthcheck"
          protocol: "TCP"
        - containerPort: 4444
          name: "xtrabackup"
          protocol: "TCP"
        - containerPort: 8080
          name: "api-proxy"
          protocol: "TCP"
        - containerPort: 3306
          name: "mysql-proxy"
          protocol: "TCP"
        - containerPort: 1936
          name: "healthck-proxy"
          protocol: "TCP"
        readinessProbe:
          exec:
            command:
            - "/opt/fissile/readiness-probe.sh"
            - "curl --silent --fail --head http://${HOSTNAME}:9200/"
            - "curl --silent --fail --head http://${HOSTNAME}:1936/"
        resources:
          requests:
            {{- if and .Values.config.memory.requests .Values.sizing.mysql.memory.request }}
            memory: "{{ int .Values.sizing.mysql.memory.request }}Mi"
            {{- end }}

            {{- if and .Values.config.cpu.requests .Values.sizing.mysql.cpu.request }}
            cpu: "{{ int .Values.sizing.mysql.cpu.request }}m"
            {{- end }}

          limits:
            {{- if and .Values.config.memory.limits .Values.sizing.mysql.memory.limit }}
            memory: "{{ int .Values.sizing.mysql.memory.limit }}Mi"
            {{- end }}

            {{- if and .Values.config.cpu.limits .Values.sizing.mysql.cpu.limit }}
            cpu: "{{ int .Values.sizing.mysql.cpu.limit }}m"
            {{- end }}

        securityContext:
          {{- if has "ALL" .Values.sizing.mysql.capabilities }}
          privileged: true
          {{- end }}

          {{- if not (has "ALL" .Values.sizing.mysql.capabilities) }}
          capabilities:
            add:
            {{- range .Values.sizing.mysql.capabilities }}
            - {{ . | upper }}
            {{- end }}
          {{- end }}

          allowPrivilegeEscalation: {{ if has "ALL" .Values.sizing.mysql.capabilities -}} true {{- else -}} false {{- end }}
        volumeMounts:
        - mountPath: "/var/vcap/store"
          name: "mysql-data"
          readOnly: false
        - mountPath: "/opt/fissile/config"
          name: "deployment-manifest"
          readOnly: true
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
      terminationGracePeriodSeconds: 600
      volumes:
      - name: "deployment-manifest"
        secret:
          secretName: "deployment-manifest"
          items:
          - key: "deployment-manifest"
            path: "deployment-manifest.yml"
  {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 7)) }}
  updateStrategy:
    type: "RollingUpdate"
  {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: "mysql-data"
      annotations:
        volume.beta.kubernetes.io/storage-class: {{ .Values.kube.storage_class.persistent | quote }}
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "{{ .Values.sizing.mysql.disk_sizes.mysql_data }}G"
