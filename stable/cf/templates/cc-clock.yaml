---
# The cc-clock role contains the following jobs:
#
# - global-properties: Dummy BOSH job used to host global parameters that are
#   required to configure SCF
#
# - authorize-internal-ca: Install both internal and UAA CA certificates
#
# - cloud_controller_clock: The Cloud Controller clock periodically schedules
#   Cloud Controller clean up tasks for app usage events, audit events, failed
#   jobs, and more. Only single instance of this job is necessary.
#
# Also: metron_agent, statsd_injector

{{- if gt (int .Values.sizing.cc_clock.count) 1 }}
_maxReplicas: {{ fail "cc_clock cannot have more than 1 instances" }}
{{- end }}

{{- if lt (int .Values.sizing.memory.limit_factor) 1 }}
_minLimitFactor: {{ fail "The memory limit factor must be at least 1" }}
{{- end }}

{{- if lt (int .Values.sizing.cc_clock.count) 1 }}
_minReplicas: {{ fail "cc_clock must have at least 1 instances" }}
{{- end }}

apiVersion: "extensions/v1beta1"
kind: "Deployment"
metadata:
  name: "cc-clock"
  labels:
    skiff-role-name: "cc-clock"
spec:
  replicas: {{ .Values.sizing.cc_clock.count }}
  selector:
    matchLabels:
      skiff-role-name: "cc-clock"
  template:
    metadata:
      annotations:
        {{- if not (or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (int .Capabilities.KubeVersion.Minor) 6))) }}
        scheduler.alpha.kubernetes.io/affinity: "{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchExpressions\":[{\"key\":\"skiff-role-name\",\"operator\":\"In\",\"values\":[\"cc-clock\"]}]},\"topologyKey\":\"beta.kubernetes.io/os\"},\"weight\":100}]}}"
        {{- end }}
      labels:
        skiff-role-name: "cc-clock"
      name: "cc-clock"
    spec:
      {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (int .Capabilities.KubeVersion.Minor) 6)) }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "skiff-role-name"
                  operator: "In"
                  values:
                  - "cc-clock"
              topologyKey: "beta.kubernetes.io/os"
            weight: 100
      {{- end }}
      containers:
      - env:
        - name: "ALLOW_APP_SSH_ACCESS"
          value: {{ required "ALLOW_APP_SSH_ACCESS configuration missing" .Values.env.ALLOW_APP_SSH_ACCESS | quote }}
        - name: "BLOBSTORE_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "blobstore-password"
              name: "secret-{{ .Release.Revision }}"
        - name: "CATS_SUITES"
          value: {{ .Values.env.CATS_SUITES | quote }}
        - name: "CC_SERVER_CRT"
          valueFrom:
            secretKeyRef:
              key: "cc-server-crt"
              name: "secret-{{ .Release.Revision }}"
        - name: "CC_SERVER_KEY"
          valueFrom:
            secretKeyRef:
              key: "cc-server-key"
              name: "secret-{{ .Release.Revision }}"
        - name: "CDN_URI"
          value: {{ .Values.env.CDN_URI | quote }}
        - name: "DB_ENCRYPTION_KEY"
          valueFrom:
            secretKeyRef:
              key: "db-encryption-key"
              name: "secret-{{ .Release.Revision }}"
        - name: "DEFAULT_APP_DISK_IN_MB"
          value: {{ required "DEFAULT_APP_DISK_IN_MB configuration missing" .Values.env.DEFAULT_APP_DISK_IN_MB | quote }}
        - name: "DEFAULT_APP_MEMORY"
          value: {{ required "DEFAULT_APP_MEMORY configuration missing" .Values.env.DEFAULT_APP_MEMORY | quote }}
        - name: "DEFAULT_APP_SSH_ACCESS"
          value: {{ required "DEFAULT_APP_SSH_ACCESS configuration missing" .Values.env.DEFAULT_APP_SSH_ACCESS | quote }}
        - name: "DEFAULT_STACK"
          value: {{ .Values.env.DEFAULT_STACK | quote }}
        - name: "DOMAIN"
          value: {{ required "DOMAIN configuration missing" .Values.env.DOMAIN | quote }}
        - name: "INTERNAL_API_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "internal-api-password"
              name: "secret-{{ .Release.Revision }}"
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secret-{{ .Release.Revision }}"
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secret-{{ .Release.Revision }}"
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "KUBE_AZ"
          value: "z1"
        - name: "KUBE_SERVICE_DOMAIN_SUFFIX"
          value: {{ .Values.env.KUBE_SERVICE_DOMAIN_SUFFIX | quote }}
        - name: "LOG_LEVEL"
          value: {{ required "LOG_LEVEL configuration missing" .Values.env.LOG_LEVEL | quote }}
        - name: "MAX_APP_DISK_IN_MB"
          value: {{ required "MAX_APP_DISK_IN_MB configuration missing" .Values.env.MAX_APP_DISK_IN_MB | quote }}
        - name: "METRON_CERT"
          valueFrom:
            secretKeyRef:
              key: "metron-cert"
              name: "secret-{{ .Release.Revision }}"
        - name: "METRON_KEY"
          valueFrom:
            secretKeyRef:
              key: "metron-key"
              name: "secret-{{ .Release.Revision }}"
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secret-{{ .Release.Revision }}"
        - name: "MYSQL_CCDB_ROLE_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "mysql-ccdb-role-password"
              name: "secret-{{ .Release.Revision }}"
        - name: "RELEASE_REVISION"
          value: {{ .Release.Revision | quote }}
        - name: "SCF_LOG_HOST"
          value: {{ .Values.env.SCF_LOG_HOST | quote }}
        - name: "SCF_LOG_PORT"
          value: {{ .Values.env.SCF_LOG_PORT | quote }}
        - name: "SCF_LOG_PROTOCOL"
          value: {{ required "SCF_LOG_PROTOCOL configuration missing" .Values.env.SCF_LOG_PROTOCOL | quote }}
        - name: "STAGING_TIMEOUT"
          value: {{ required "STAGING_TIMEOUT configuration missing" .Values.env.STAGING_TIMEOUT | quote }}
        - name: "STAGING_UPLOAD_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "staging-upload-password"
              name: "secret-{{ .Release.Revision }}"
        - name: "SUSE_STACK"
          value: "sle12"
        - name: "SUSE_STACK_DESCRIPTION"
          value: "SLE-based filesystem"
        - name: "UAA_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "uaa-ca-cert"
              name: "secret-{{ .Release.Revision }}"
        - name: "UAA_CLIENTS_CC_ROUTING_SECRET"
          valueFrom:
            secretKeyRef:
              key: "uaa-clients-cc-routing-secret"
              name: "secret-{{ .Release.Revision }}"
        - name: "UAA_CLIENTS_CC_SERVICE_DASHBOARDS_CLIENT_SECRET"
          valueFrom:
            secretKeyRef:
              key: "uaa-clients-cc-service-dashboards-client-secret"
              name: "secret-{{ .Release.Revision }}"
        - name: "UAA_HOST"
          value: {{ required "UAA_HOST configuration missing" .Values.env.UAA_HOST | quote }}
        - name: "UAA_PORT"
          value: {{ .Values.env.UAA_PORT | quote }}
        - name: "USE_DIEGO_PRIVILEGED_CONTAINERS"
          value: {{ required "USE_DIEGO_PRIVILEGED_CONTAINERS configuration missing" .Values.env.USE_DIEGO_PRIVILEGED_CONTAINERS | quote }}
        - name: "USE_STAGER_PRIVILEGED_CONTAINERS"
          value: {{ required "USE_STAGER_PRIVILEGED_CONTAINERS configuration missing" .Values.env.USE_STAGER_PRIVILEGED_CONTAINERS | quote }}
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/scf-cc-clock:1206c6a5c154d6e31f53cc28ba50e422343bb068"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "cc-clock"
        ports: ~
        readinessProbe: ~
        resources:
          {{- if .Values.sizing.memory.requests }}
          requests:
            memory: "{{ int .Values.sizing.cc_clock.memory }}Mi"
          {{- end }}

          {{- if .Values.sizing.memory.limits }}
          limits:
            memory: "{{ (mul (int .Values.sizing.memory.limit_factor) (int .Values.sizing.cc_clock.memory)) }}Mi"
          {{- end }}

        securityContext: ~
        volumeMounts: ~
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
      terminationGracePeriodSeconds: 600
