---
# The doppler role contains the following jobs:
#
# - global-properties: Dummy BOSH job used to host global parameters that are
#   required to configure SCF
#
# Also: doppler, metron_agent

{{- if gt (int .Values.sizing.doppler.count) 65535 }}
_maxReplicas: {{ fail "doppler cannot have more than 65535 instances" }}
{{- end }}

{{- if and .Values.sizing.HA (and (ne (int .Values.sizing.doppler.count) 1) (lt (int .Values.sizing.doppler.count) 2)) }}
_minHAReplicas: {{ fail "doppler must have at least 2 instances for HA" }}
{{- end }}

{{- if lt (int .Values.sizing.doppler.count) 1 }}
_minReplicas: {{ fail "doppler must have at least 1 instances" }}
{{- end }}

apiVersion: "apps/v1beta1"
kind: "StatefulSet"
metadata:
  name: "doppler"
  labels:
    skiff-role-name: "doppler"
spec:
  replicas: {{ if and .Values.sizing.HA (eq (int .Values.sizing.doppler.count) 1) -}} 2 {{- else -}} {{ .Values.sizing.doppler.count }} {{- end }}
  serviceName: "doppler-set"
  template:
    metadata:
      name: "doppler"
      labels:
        skiff-role-name: "doppler"
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if not (or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 6))) }}
        scheduler.alpha.kubernetes.io/affinity: "{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchExpressions\":[{\"key\":\"skiff-role-name\",\"operator\":\"In\",\"values\":[\"doppler\"]}]},\"topologyKey\":\"beta.kubernetes.io/os\"},\"weight\":100}]}}"
        {{- end }}
    spec:
      {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 6)) }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "skiff-role-name"
                  operator: "In"
                  values:
                  - "doppler"
              topologyKey: "beta.kubernetes.io/os"
            weight: 100
        {{- if .Values.sizing.doppler.affinity.nodeAffinity }}
        nodeAffinity: {{ toJson .Values.sizing.doppler.affinity.nodeAffinity }}
        {{- end }}
      {{- end }}
      containers:
      - env:
        - name: "CATS_SUITES"
          value: {{ .Values.env.CATS_SUITES | quote }}

        {{- if not .Values.secrets.DOPPLER_CERT }}
        - name: "DOPPLER_CERT"
          valueFrom:
            secretKeyRef:
              key: "doppler-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.DOPPLER_CERT }}
        - name: "DOPPLER_CERT"
          valueFrom:
            secretKeyRef:
              key: "doppler-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.DOPPLER_KEY }}
        - name: "DOPPLER_KEY"
          valueFrom:
            secretKeyRef:
              key: "doppler-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.DOPPLER_KEY }}
        - name: "DOPPLER_KEY"
          valueFrom:
            secretKeyRef:
              key: "doppler-key"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.INTERNAL_CA_KEY }}
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_KEY }}
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secrets"
        {{- end }}

        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "KUBE_AZ"
          value: "z1"
        - name: "KUBE_SERVICE_DOMAIN_SUFFIX"
          value: {{ .Values.env.KUBE_SERVICE_DOMAIN_SUFFIX | quote }}

        {{- if not .Values.secrets.METRON_CERT }}
        - name: "METRON_CERT"
          valueFrom:
            secretKeyRef:
              key: "metron-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.METRON_CERT }}
        - name: "METRON_CERT"
          valueFrom:
            secretKeyRef:
              key: "metron-cert"
              name: "secrets"
        {{- end }}

        {{- if .Values.secrets.METRON_KEY }}
        - name: "METRON_KEY"
          valueFrom:
            secretKeyRef:
              key: "metron-key"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.METRON_KEY }}
        - name: "METRON_KEY"
          valueFrom:
            secretKeyRef:
              key: "metron-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "SCF_LOG_HOST"
          value: {{ .Values.env.SCF_LOG_HOST | quote }}
        - name: "SCF_LOG_PORT"
          value: {{ .Values.env.SCF_LOG_PORT | quote }}
        - name: "SCF_LOG_PROTOCOL"
          value: {{ required "SCF_LOG_PROTOCOL configuration missing" .Values.env.SCF_LOG_PROTOCOL | quote }}
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/scf-doppler:d870e73710c5c367b720afae9d4bd254471349bd"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "doppler"
        ports:
        - containerPort: 3457
          name: "dropsonde-udp"
          protocol: "UDP"
        - containerPort: 3458
          name: "dropsonde-tcp"
          protocol: "TCP"
        - containerPort: 3459
          name: "doppler-tls"
          protocol: "TCP"
        - containerPort: 8081
          name: "doppler-ws"
          protocol: "TCP"
        - containerPort: 8082
          name: "doppler-grpc"
          protocol: "TCP"
        readinessProbe:
          failureThreshold: 0
          initialDelaySeconds: 0
          periodSeconds: 0
          successThreshold: 0
          tcpSocket:
            port: 8082
          timeoutSeconds: 0
        resources:
          requests:
            {{- if and .Values.sizing.memory.requests .Values.sizing.doppler.memory.request }}
            memory: "{{ int .Values.sizing.doppler.memory.request }}Mi"
            {{- end }}

            {{- if and .Values.sizing.cpu.requests .Values.sizing.doppler.cpu.request }}
            cpu: "{{ int .Values.sizing.doppler.cpu.request }}m"
            {{- end }}

          limits:
            {{- if and .Values.sizing.memory.limits .Values.sizing.doppler.memory.limit }}
            memory: "{{ int .Values.sizing.doppler.memory.limit }}Mi"
            {{- end }}

            {{- if and .Values.sizing.cpu.limits .Values.sizing.doppler.cpu.limit }}
            cpu: "{{ int .Values.sizing.doppler.cpu.limit }}m"
            {{- end }}

        securityContext: ~
        volumeMounts: ~
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
      terminationGracePeriodSeconds: 600
  {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 7)) }}
  updateStrategy:
    type: "RollingUpdate"
  {{- end }}
---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "doppler-set"
  spec:
    {{- if not .Values.services.loadbalanced }}
    clusterIP: "None"
    {{- end }}
    ports:
    - name: "dropsonde-udp"
      port: 3457
      protocol: "UDP"
      targetPort: 0
    - name: "dropsonde-tcp"
      port: 3458
      protocol: "TCP"
      targetPort: 0
    - name: "doppler-tls"
      port: 3459
      protocol: "TCP"
      targetPort: 0
    - name: "doppler-ws"
      port: 8081
      protocol: "TCP"
      targetPort: 0
    - name: "doppler-grpc"
      port: 8082
      protocol: "TCP"
      targetPort: 0
    selector:
      skiff-role-name: "doppler"
    type: {{ if .Values.services.loadbalanced }} LoadBalancer {{ else }} ClusterIP {{ end }}
kind: "List"
