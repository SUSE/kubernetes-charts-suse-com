---
# The doppler role contains the following jobs:
#
# - global-properties: Dummy BOSH job used to host global parameters that are
#   required to configure SCF
#
# Also: doppler, metron_agent

{{- if gt (int .Values.sizing.doppler.count) 65535 }}
_maxReplicas: {{ fail "doppler cannot have more than 65535 instances" }}
{{- end }}

{{- if and .Values.sizing.HA (and (ne (int .Values.sizing.doppler.count) 1) (lt (int .Values.sizing.doppler.count) 2)) }}
_minHAReplicas: {{ fail "doppler must have at least 2 instances for HA" }}
{{- end }}

{{- if lt (int .Values.sizing.doppler.count) 1 }}
_minReplicas: {{ fail "doppler must have at least 1 instances" }}
{{- end }}

apiVersion: "extensions/v1beta1"
kind: "Deployment"
metadata:
  name: "doppler"
  labels:
    skiff-role-name: "doppler"
spec:
  replicas: {{ if and .Values.sizing.HA (eq (int .Values.sizing.doppler.count) 1) -}} 2 {{- else -}} {{ .Values.sizing.doppler.count }} {{- end }}
  selector:
    matchLabels:
      skiff-role-name: "doppler"
  template:
    metadata:
      annotations:
        {{- if not (or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (int .Capabilities.KubeVersion.Minor) 6))) }}
        scheduler.alpha.kubernetes.io/affinity: "{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchExpressions\":[{\"key\":\"skiff-role-name\",\"operator\":\"In\",\"values\":[\"doppler\"]}]},\"topologyKey\":\"beta.kubernetes.io/os\"},\"weight\":100}]}}"
        {{- end }}
      labels:
        skiff-role-name: "doppler"
      name: "doppler"
    spec:
      {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (int .Capabilities.KubeVersion.Minor) 6)) }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "skiff-role-name"
                  operator: "In"
                  values:
                  - "doppler"
              topologyKey: "beta.kubernetes.io/os"
            weight: 100
      {{- end }}
      containers:
      - env:
        - name: "CATS_SUITES"
          value: {{ .Values.env.CATS_SUITES | quote }}
        - name: "DOPPLER_CERT"
          valueFrom:
            secretKeyRef:
              key: "doppler-cert"
              name: "secret"
        - name: "DOPPLER_KEY"
          valueFrom:
            secretKeyRef:
              key: "doppler-key"
              name: "secret"
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secret"
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secret"
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "KUBE_AZ"
          value: "z1"
        - name: "KUBE_SERVICE_DOMAIN_SUFFIX"
          value: {{ .Values.env.KUBE_SERVICE_DOMAIN_SUFFIX | quote }}
        - name: "METRON_CERT"
          valueFrom:
            secretKeyRef:
              key: "metron-cert"
              name: "secret"
        - name: "METRON_KEY"
          valueFrom:
            secretKeyRef:
              key: "metron-key"
              name: "secret"
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secret"
        - name: "RELEASE_REVISION"
          value: {{ .Release.Revision | quote }}
        - name: "SCF_LOG_HOST"
          value: {{ .Values.env.SCF_LOG_HOST | quote }}
        - name: "SCF_LOG_PORT"
          value: {{ .Values.env.SCF_LOG_PORT | quote }}
        - name: "SCF_LOG_PROTOCOL"
          value: {{ required "SCF_LOG_PROTOCOL configuration missing" .Values.env.SCF_LOG_PROTOCOL | quote }}
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/scf-doppler:2556f0f814b4b26c0f67c74dfcd7b2d5a98993e9"
        livenessProbe: ~
        name: "doppler"
        ports:
        - containerPort: 3457
          name: "dropsonde-udp"
          protocol: "UDP"
        - containerPort: 3458
          name: "dropsonde-tcp"
          protocol: "TCP"
        - containerPort: 3459
          name: "doppler-tls"
          protocol: "TCP"
        - containerPort: 8081
          name: "doppler-ws"
          protocol: "TCP"
        - containerPort: 8082
          name: "doppler-grpc"
          protocol: "TCP"
        readinessProbe:
          failureThreshold: 0
          initialDelaySeconds: 0
          periodSeconds: 0
          successThreshold: 0
          tcpSocket:
            port: 8082
          timeoutSeconds: 0
        resources: ~
        securityContext: ~
        volumeMounts: ~
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "doppler"
  spec:
    ports:
    - name: "dropsonde-udp"
      port: 3457
      protocol: "UDP"
      targetPort: "dropsonde-udp"
    - name: "dropsonde-tcp"
      port: 3458
      protocol: "TCP"
      targetPort: "dropsonde-tcp"
    - name: "doppler-tls"
      port: 3459
      protocol: "TCP"
      targetPort: "doppler-tls"
    - name: "doppler-ws"
      port: 8081
      protocol: "TCP"
      targetPort: "doppler-ws"
    - name: "doppler-grpc"
      port: 8082
      protocol: "TCP"
      targetPort: "doppler-grpc"
    selector:
      skiff-role-name: "doppler"
    type: {{ if .Values.services.loadbalanced }} LoadBalancer {{ else }} ClusterIP {{ end }}
kind: "List"
