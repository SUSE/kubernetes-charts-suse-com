---
# The tcp-router role contains the following jobs:
#
# - global-properties: Dummy BOSH job used to host global parameters that are
#   required to configure SCF
#
# - authorize-internal-ca: Install both internal and UAA CA certificates
#
# - wait-for-uaa: Wait for UAA to be ready before starting any jobs
#
# Also: tcp_router, metron_agent

{{- if gt (int .Values.sizing.tcp_router.count) 3 }}
_maxReplicas: {{ fail "tcp_router cannot have more than 3 instances" }}
{{- end }}

{{- if and .Values.sizing.HA (and (ne (int .Values.sizing.tcp_router.count) 1) (lt (int .Values.sizing.tcp_router.count) 2)) }}
_minHAReplicas: {{ fail "tcp_router must have at least 2 instances for HA" }}
{{- end }}

{{- if lt (int .Values.sizing.tcp_router.count) 1 }}
_minReplicas: {{ fail "tcp_router must have at least 1 instances" }}
{{- end }}

apiVersion: "extensions/v1beta1"
kind: "Deployment"
metadata:
  name: "tcp-router"
  labels:
    skiff-role-name: "tcp-router"
spec:
  replicas: {{ if and .Values.sizing.HA (eq (int .Values.sizing.tcp_router.count) 1) -}} 2 {{- else -}} {{ .Values.sizing.tcp_router.count }} {{- end }}
  selector:
    matchLabels:
      skiff-role-name: "tcp-router"
  template:
    metadata:
      name: "tcp-router"
      labels:
        skiff-role-name: "tcp-router"
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if not (or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 6))) }}
        scheduler.alpha.kubernetes.io/affinity: "{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchExpressions\":[{\"key\":\"skiff-role-name\",\"operator\":\"In\",\"values\":[\"tcp-router\"]}]},\"topologyKey\":\"beta.kubernetes.io/os\"},\"weight\":100}]}}"
        {{- end }}
    spec:
      {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 6)) }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "skiff-role-name"
                  operator: "In"
                  values:
                  - "tcp-router"
              topologyKey: "beta.kubernetes.io/os"
            weight: 100
        {{- if .Values.sizing.tcp_router.affinity.nodeAffinity }}
        nodeAffinity: {{ toJson .Values.sizing.tcp_router.affinity.nodeAffinity }}
        {{- end }}
      {{- end }}
      containers:
      - env:
        - name: "CATS_SUITES"
          value: {{ .Values.env.CATS_SUITES | quote }}
        - name: "DNS_HEALTH_CHECK_HOST"
          value: {{ required "DNS_HEALTH_CHECK_HOST configuration missing" .Values.env.DNS_HEALTH_CHECK_HOST | quote }}

        {{- if not .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.INTERNAL_CA_KEY }}
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_KEY }}
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secrets"
        {{- end }}

        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "KUBE_AZ"
          value: "z1"
        - name: "KUBE_SERVICE_DOMAIN_SUFFIX"
          value: {{ .Values.env.KUBE_SERVICE_DOMAIN_SUFFIX | quote }}
        - name: "LOG_LEVEL"
          value: {{ required "LOG_LEVEL configuration missing" .Values.env.LOG_LEVEL | quote }}

        {{- if not .Values.secrets.METRON_CERT }}
        - name: "METRON_CERT"
          valueFrom:
            secretKeyRef:
              key: "metron-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.METRON_CERT }}
        - name: "METRON_CERT"
          valueFrom:
            secretKeyRef:
              key: "metron-cert"
              name: "secrets"
        {{- end }}

        {{- if .Values.secrets.METRON_KEY }}
        - name: "METRON_KEY"
          valueFrom:
            secretKeyRef:
              key: "metron-key"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.METRON_KEY }}
        - name: "METRON_KEY"
          valueFrom:
            secretKeyRef:
              key: "metron-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "SCF_LOG_HOST"
          value: {{ .Values.env.SCF_LOG_HOST | quote }}
        - name: "SCF_LOG_PORT"
          value: {{ .Values.env.SCF_LOG_PORT | quote }}
        - name: "SCF_LOG_PROTOCOL"
          value: {{ required "SCF_LOG_PROTOCOL configuration missing" .Values.env.SCF_LOG_PROTOCOL | quote }}
        - name: "UAA_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "uaa-ca-cert"
              name: "secrets"
        - name: "UAA_CLIENTS_TCP_ROUTER_SECRET"
          valueFrom:
            secretKeyRef:
              key: "uaa-clients-tcp-router-secret"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "UAA_HOST"
          value: {{ required "UAA_HOST configuration missing" .Values.env.UAA_HOST | quote }}
        - name: "UAA_PORT"
          value: {{ .Values.env.UAA_PORT | quote }}
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/scf-tcp-router:2c34edff3f12d7b79657b623fc4b60b103b4fbf6"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "tcp-router"
        ports:
        - containerPort: 80
          name: "healthcheck"
          protocol: "TCP"

        {{- if gt (int .Values.sizing.tcp_router.ports.tcp_route.count) 20 }}
        - {{ fail ".Values.sizing.tcp_router.ports.tcp_route.count must not exceed 20" }}
        {{- end }}

        {{- if lt (int .Values.sizing.tcp_router.ports.tcp_route.count) 1 }}
        - {{ fail ".Values.sizing.tcp_router.ports.tcp_route.count must be at least 1" }}
        {{- end }}

        {{- range $port := until (int .Values.sizing.tcp_router.ports.tcp_route.count) }}
        - containerPort: {{ add 20000 $port }}
          name: "tcp-route-{{ $port }}"
          protocol: "TCP"
        {{- end }}

        readinessProbe:
          failureThreshold: 0
          httpGet:
            path: "/health"
            port: 80
            scheme: "HTTP"
          initialDelaySeconds: 0
          periodSeconds: 0
          successThreshold: 0
          timeoutSeconds: 0
        resources:
          requests:
            {{- if and .Values.sizing.memory.requests .Values.sizing.tcp_router.memory.request }}
            memory: "{{ int .Values.sizing.tcp_router.memory.request }}Mi"
            {{- end }}

            {{- if and .Values.sizing.cpu.requests .Values.sizing.tcp_router.cpu.request }}
            cpu: "{{ int .Values.sizing.tcp_router.cpu.request }}m"
            {{- end }}

          limits:
            {{- if and .Values.sizing.memory.limits .Values.sizing.tcp_router.memory.limit }}
            memory: "{{ int .Values.sizing.tcp_router.memory.limit }}Mi"
            {{- end }}

            {{- if and .Values.sizing.cpu.limits .Values.sizing.tcp_router.cpu.limit }}
            cpu: "{{ int .Values.sizing.tcp_router.cpu.limit }}m"
            {{- end }}

        securityContext: ~
        volumeMounts: ~
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
      terminationGracePeriodSeconds: 600
---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "tcp-router"
  spec:
    ports:
    - name: "healthcheck"
      port: 2341
      protocol: "TCP"
      targetPort: "healthcheck"
    {{- range $port := until (int .Values.sizing.tcp_router.ports.tcp_route.count) }}
    - name: "tcp-route-{{ $port }}"
      port: {{ add 20000 $port }}
      protocol: "TCP"
      targetPort: "tcp-route-{{ $port }}"
    {{- end }}
    selector:
      skiff-role-name: "tcp-router"
    type: {{ if .Values.services.loadbalanced }} LoadBalancer {{ else }} ClusterIP {{ end }}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "tcp-router-public"
  spec:
    externalIPs: {{ .Values.kube.external_ips | toJson }}
    ports:
    - name: "healthcheck"
      port: 2341
      protocol: "TCP"
      targetPort: "healthcheck"
    {{- range $port := until (int .Values.sizing.tcp_router.ports.tcp_route.count) }}
    - name: "tcp-route-{{ $port }}"
      port: {{ add 20000 $port }}
      protocol: "TCP"
      targetPort: "tcp-route-{{ $port }}"
    {{- end }}
    selector:
      skiff-role-name: "tcp-router"
    type: {{ if .Values.services.loadbalanced }} LoadBalancer {{ else }} ClusterIP {{ end }}
kind: "List"
