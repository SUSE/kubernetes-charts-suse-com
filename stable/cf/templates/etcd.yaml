---
# The etcd role contains the following jobs:
#
# - global-properties: Dummy BOSH job used to host global parameters that are
#   required to configure HCF
#
# - authorize-internal-ca: Install both internal and UAA CA certificates
#
# - patch-properties: Dummy BOSH job used to host parameters that are used in
#   HCF patches for upstream bugs
#
# - etcd_metrics_server: The etcd Metrics Server is meant to be collocated with
#   the etcd server to collect and expose runtime statistics for the Collector.
#
# Also: etcd, metron_agent

{{- if gt (int .Values.sizing.etcd.count) 3 }}
_maxReplicas: {{ fail "etcd cannot have more than 3 instances" }}
{{- end }}

{{- if and .Values.sizing.HA (and (ne (int .Values.sizing.etcd.count) 1) (lt (int .Values.sizing.etcd.count) 3)) }}
_minHAReplicas: {{ fail "etcd must have at least 3 instances for HA" }}
{{- end }}

{{- if lt (int .Values.sizing.etcd.count) 1 }}
_minReplicas: {{ fail "etcd must have at least 1 instances" }}
{{- end }}

{{- if eq (mod (int .Values.sizing.etcd.count) 2) 0 }}
_oddReplicas: {{ fail "etcd must have an odd instance count" }}
{{- end }}

apiVersion: "apps/v1beta1"
kind: "StatefulSet"
metadata:
  name: "etcd"
  labels:
    skiff-role-name: "etcd"
spec:
  replicas: {{ if and .Values.sizing.HA (eq (int .Values.sizing.etcd.count) 1) -}} 3 {{- else -}} {{ .Values.sizing.etcd.count }} {{- end }}
  serviceName: "etcd-set"
  template:
    metadata:
      annotations:
        {{- if not (or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (int .Capabilities.KubeVersion.Minor) 6))) }}
        scheduler.alpha.kubernetes.io/affinity: "{\"podAntiAffinity\":{\"preferredDuringSchedulingIgnoredDuringExecution\":[{\"podAffinityTerm\":{\"labelSelector\":{\"matchExpressions\":[{\"key\":\"skiff-role-name\",\"operator\":\"In\",\"values\":[\"etcd\"]}]},\"topologyKey\":\"beta.kubernetes.io/os\"},\"weight\":100}]}}"
        {{- end }}
      labels:
        skiff-role-name: "etcd"
      name: "etcd"
    spec:
      {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (int .Capabilities.KubeVersion.Minor) 6)) }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "skiff-role-name"
                  operator: "In"
                  values:
                  - "etcd"
              topologyKey: "beta.kubernetes.io/os"
            weight: 100
      {{- end }}
      containers:
      - env:
        - name: "CATS_SUITES"
          value: {{ .Values.env.CATS_SUITES | quote }}
        - name: "DNS_HEALTH_CHECK_HOST"
          value: {{ required "DNS_HEALTH_CHECK_HOST configuration missing" .Values.env.DNS_HEALTH_CHECK_HOST | quote }}
        - name: "ETCD_CLIENT_CRT"
          valueFrom:
            secretKeyRef:
              key: "etcd-client-crt"
              name: "secret"
        - name: "ETCD_CLIENT_KEY"
          valueFrom:
            secretKeyRef:
              key: "etcd-client-key"
              name: "secret"
        - name: "ETCD_PEER_CRT"
          valueFrom:
            secretKeyRef:
              key: "etcd-peer-crt"
              name: "secret"
        - name: "ETCD_PEER_KEY"
          valueFrom:
            secretKeyRef:
              key: "etcd-peer-key"
              name: "secret"
        - name: "ETCD_SERVER_CRT"
          valueFrom:
            secretKeyRef:
              key: "etcd-server-crt"
              name: "secret"
        - name: "ETCD_SERVER_KEY"
          valueFrom:
            secretKeyRef:
              key: "etcd-server-key"
              name: "secret"
        - name: "HCF_LOG_HOST"
          value: {{ .Values.env.HCF_LOG_HOST | quote }}
        - name: "HCF_LOG_PORT"
          value: {{ .Values.env.HCF_LOG_PORT | quote }}
        - name: "HCF_LOG_PROTOCOL"
          value: {{ required "HCF_LOG_PROTOCOL configuration missing" .Values.env.HCF_LOG_PROTOCOL | quote }}
        - name: "HCP_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "hcp-ca-cert"
              name: "secret"
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secret"
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secret"
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "KUBE_SERVICE_DOMAIN_SUFFIX"
          value: {{ .Values.env.KUBE_SERVICE_DOMAIN_SUFFIX | quote }}
        - name: "KUBE_SIZING_ETCD_COUNT"
          value: {{ .Values.sizing.etcd.count | quote }}
        - name: "METRON_CERT"
          valueFrom:
            secretKeyRef:
              key: "metron-cert"
              name: "secret"
        - name: "METRON_KEY"
          valueFrom:
            secretKeyRef:
              key: "metron-key"
              name: "secret"
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secret"
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/scf-etcd:a066e6c0c6de66b3673132c7aea5c96919aed910"
        livenessProbe: ~
        name: "etcd"
        ports:
        - containerPort: 4001
          name: "etcd-client"
          protocol: "TCP"
        - containerPort: 7001
          name: "etcd-peer"
          protocol: "TCP"
        readinessProbe:
          exec:
            command:
            - "/var/vcap/jobs/global-properties/bin/readiness/etcd"
          failureThreshold: 0
          initialDelaySeconds: 0
          periodSeconds: 0
          successThreshold: 0
          timeoutSeconds: 0
        resources: ~
        securityContext: ~
        volumeMounts:
        - mountPath: "/var/vcap/store"
          name: "cf-etcd-data"
          readOnly: false
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
  volumeClaimTemplates:
  - metadata:
      name: "cf-etcd-data"
      annotations:
        volume.beta.kubernetes.io/storage-class: {{ .Values.kube.storage_class.persistent | quote }}
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "{{ .Values.sizing.etcd.disk_sizes.cf_etcd_data }}G"
---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "etcd-set"
  spec:
    {{- if not .Values.services.loadbalanced }}
    clusterIP: "None"
    {{- end }}
    ports:
    - name: "etcd-client"
      port: 4001
      protocol: "TCP"
      targetPort: 0
    - name: "etcd-peer"
      port: 7001
      protocol: "TCP"
      targetPort: 0
    selector:
      skiff-role-name: "etcd"
    type: {{ if .Values.services.loadbalanced }} LoadBalancer {{ else }} ClusterIP {{ end }}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "etcd"
  spec:
    ports:
    - name: "etcd-client"
      port: 4001
      protocol: "TCP"
      targetPort: "etcd-client"
    - name: "etcd-peer"
      port: 7001
      protocol: "TCP"
      targetPort: "etcd-peer"
    selector:
      skiff-role-name: "etcd"
    type: {{ if .Values.services.loadbalanced }} LoadBalancer {{ else }} ClusterIP {{ end }}
kind: "List"
