---
# The blobstore role contains the following jobs:
#
# - global-properties: Dummy BOSH job used to host global parameters that are
#   required to configure SCF
#
# - route_registrar: Used for registering routes
#
# Also: blobstore, metron_agent

{{- if gt (int .Values.sizing.blobstore.count) 1 }}
_maxReplicas: {{ fail "blobstore cannot have more than 1 instances" }}
{{- end }}

{{- if lt (int .Values.sizing.blobstore.count) 1 }}
_minReplicas: {{ fail "blobstore must have at least 1 instances" }}
{{- end }}

apiVersion: "apps/v1beta1"
kind: "StatefulSet"
metadata:
  name: "blobstore"
  labels:
    skiff-role-name: "blobstore"
spec:
  replicas: {{ .Values.sizing.blobstore.count }}
  serviceName: "blobstore-set"
  template:
    metadata:
      name: "blobstore"
      labels:
        skiff-role-name: "blobstore"
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
    spec:
      containers:
      - env:
        - name: "BLOBSTORE_ACCESS_RULES"
          value: {{ required "BLOBSTORE_ACCESS_RULES configuration missing" .Values.env.BLOBSTORE_ACCESS_RULES | quote }}
        - name: "BLOBSTORE_MAX_UPLOAD_SIZE"
          value: {{ required "BLOBSTORE_MAX_UPLOAD_SIZE configuration missing" .Values.env.BLOBSTORE_MAX_UPLOAD_SIZE | quote }}
        - name: "BLOBSTORE_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "blobstore-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "BLOBSTORE_SECURE_LINK"
          valueFrom:
            secretKeyRef:
              key: "blobstore-secure-link"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"

        {{- if not .Values.secrets.BLOBSTORE_TLS_CERT }}
        - name: "BLOBSTORE_TLS_CERT"
          valueFrom:
            secretKeyRef:
              key: "blobstore-tls-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.BLOBSTORE_TLS_CERT }}
        - name: "BLOBSTORE_TLS_CERT"
          valueFrom:
            secretKeyRef:
              key: "blobstore-tls-cert"
              name: "secrets"
        {{- end }}

        {{- if .Values.secrets.BLOBSTORE_TLS_KEY }}
        - name: "BLOBSTORE_TLS_KEY"
          valueFrom:
            secretKeyRef:
              key: "blobstore-tls-key"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.BLOBSTORE_TLS_KEY }}
        - name: "BLOBSTORE_TLS_KEY"
          valueFrom:
            secretKeyRef:
              key: "blobstore-tls-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        - name: "CATS_SUITES"
          value: {{ .Values.env.CATS_SUITES | quote }}
        - name: "DOMAIN"
          value: {{ required "DOMAIN configuration missing" .Values.env.DOMAIN | quote }}

        {{- if not .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.INTERNAL_CA_KEY }}
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_KEY }}
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secrets"
        {{- end }}

        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "KUBE_AZ"
          value: "z1"
        - name: "KUBE_SERVICE_DOMAIN_SUFFIX"
          value: {{ .Values.env.KUBE_SERVICE_DOMAIN_SUFFIX | quote }}
        - name: "KUBE_SIZING_NATS_COUNT"
          value: {{ .Values.sizing.nats.count | quote }}

        {{- if not .Values.secrets.METRON_CERT }}
        - name: "METRON_CERT"
          valueFrom:
            secretKeyRef:
              key: "metron-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.METRON_CERT }}
        - name: "METRON_CERT"
          valueFrom:
            secretKeyRef:
              key: "metron-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.METRON_KEY }}
        - name: "METRON_KEY"
          valueFrom:
            secretKeyRef:
              key: "metron-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.METRON_KEY }}
        - name: "METRON_KEY"
          valueFrom:
            secretKeyRef:
              key: "metron-key"
              name: "secrets"
        {{- end }}

        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "NATS_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "nats-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "SCF_LOG_HOST"
          value: {{ .Values.env.SCF_LOG_HOST | quote }}
        - name: "SCF_LOG_PORT"
          value: {{ .Values.env.SCF_LOG_PORT | quote }}
        - name: "SCF_LOG_PROTOCOL"
          value: {{ required "SCF_LOG_PROTOCOL configuration missing" .Values.env.SCF_LOG_PROTOCOL | quote }}
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/scf-blobstore:b01d7e01a625f8d8f2a6c1c8138fbe18ada1099e"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "blobstore"
        ports:
        - containerPort: 8080
          name: "blobstore-ext"
          protocol: "TCP"
        - containerPort: 4443
          name: "blobstore"
          protocol: "TCP"
        readinessProbe:
          tcpSocket:
            port: 8080
        resources:
          requests:
            {{- if and .Values.sizing.memory.requests .Values.sizing.blobstore.memory.request }}
            memory: "{{ int .Values.sizing.blobstore.memory.request }}Mi"
            {{- end }}

            {{- if and .Values.sizing.cpu.requests .Values.sizing.blobstore.cpu.request }}
            cpu: "{{ int .Values.sizing.blobstore.cpu.request }}m"
            {{- end }}

          limits:
            {{- if and .Values.sizing.memory.limits .Values.sizing.blobstore.memory.limit }}
            memory: "{{ int .Values.sizing.blobstore.memory.limit }}Mi"
            {{- end }}

            {{- if and .Values.sizing.cpu.limits .Values.sizing.blobstore.cpu.limit }}
            cpu: "{{ int .Values.sizing.blobstore.cpu.limit }}m"
            {{- end }}

        securityContext: ~
        volumeMounts:
        - mountPath: "/var/vcap/store"
          name: "blobstore-data"
          readOnly: false
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
      terminationGracePeriodSeconds: 600
  {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 7)) }}
  updateStrategy:
    type: "RollingUpdate"
  {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: "blobstore-data"
      annotations:
        volume.beta.kubernetes.io/storage-class: {{ .Values.kube.storage_class.persistent | quote }}
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "{{ .Values.sizing.blobstore.disk_sizes.blobstore_data }}G"
---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "blobstore-set"
  spec:
    {{- if not .Values.services.loadbalanced }}
    clusterIP: "None"
    {{- end }}
    ports:
    - name: "blobstore-ext"
      port: 8080
      protocol: "TCP"
      targetPort: 0
    - name: "blobstore"
      port: 4443
      protocol: "TCP"
      targetPort: 0
    selector:
      skiff-role-name: "blobstore"
    type: {{ if .Values.services.loadbalanced }} LoadBalancer {{ else }} ClusterIP {{ end }}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "blobstore"
  spec:
    ports:
    - name: "blobstore-ext"
      port: 8080
      protocol: "TCP"
      targetPort: "blobstore-ext"
    - name: "blobstore"
      port: 4443
      protocol: "TCP"
      targetPort: "blobstore"
    selector:
      skiff-role-name: "blobstore"
    type: {{ if .Values.services.loadbalanced }} LoadBalancer {{ else }} ClusterIP {{ end }}
kind: "List"
