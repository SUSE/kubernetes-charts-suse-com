---
# The postgres role contains the following jobs:
#
# - global-properties: Dummy BOSH job used to host global parameters that are
#   required to configure SCF
#
# - postgres: The Postgres server provides a single instance Postgres database
#   that can be used with the Cloud Controller or the UAA. It does not provide
#   highly-available configuration.

{{- if gt (int .Values.sizing.postgres.count) 3 }}
_maxReplicas: {{ fail "postgres cannot have more than 3 instances" }}
{{- end }}

{{- if and .Values.sizing.HA (and (ne (int .Values.sizing.postgres.count) 1) (lt (int .Values.sizing.postgres.count) 2)) }}
_minHAReplicas: {{ fail "postgres must have at least 2 instances for HA" }}
{{- end }}

{{- if lt (int .Values.sizing.postgres.count) 1 }}
_minReplicas: {{ fail "postgres must have at least 1 instances" }}
{{- end }}

apiVersion: "apps/v1beta1"
kind: "StatefulSet"
metadata:
  name: "postgres"
  labels:
    skiff-role-name: "postgres"
spec:
  replicas: {{ if and .Values.sizing.HA (eq (int .Values.sizing.postgres.count) 1) -}} 2 {{- else -}} {{ .Values.sizing.postgres.count }} {{- end }}
  serviceName: "postgres-set"
  template:
    metadata:
      name: "postgres"
      labels:
        skiff-role-name: "postgres"
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "skiff-role-name"
                  operator: "In"
                  values:
                  - "postgres"
              topologyKey: "beta.kubernetes.io/os"
            weight: 100
        {{- if .Values.sizing.postgres.affinity.nodeAffinity }}
        nodeAffinity: {{ toJson .Values.sizing.postgres.affinity.nodeAffinity }}
        {{- end }}
      containers:
      - env:
        - name: "CATS_SUITES"
          value: {{ .Values.env.CATS_SUITES | quote }}

        {{- if not .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_CERT }}
        - name: "INTERNAL_CA_CERT"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-cert"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.INTERNAL_CA_KEY }}
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        {{- if .Values.secrets.INTERNAL_CA_KEY }}
        - name: "INTERNAL_CA_KEY"
          valueFrom:
            secretKeyRef:
              key: "internal-ca-key"
              name: "secrets"
        {{- end }}

        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: "KUBE_SERVICE_DOMAIN_SUFFIX"
          value: {{ .Values.env.KUBE_SERVICE_DOMAIN_SUFFIX | quote }}

        {{- if .Values.secrets.MONIT_PASSWORD }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets"
        {{- end }}

        {{- if not .Values.secrets.MONIT_PASSWORD }}
        - name: "MONIT_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "monit-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        {{- end }}

        - name: "POSTGRES_PASSWORD"
          valueFrom:
            secretKeyRef:
              key: "postgres-password"
              name: "secrets-{{ .Chart.Version }}-{{ .Values.kube.secrets_generation_counter }}"
        - name: "SCF_LOG_HOST"
          value: {{ .Values.env.SCF_LOG_HOST | quote }}
        - name: "SCF_LOG_PORT"
          value: {{ .Values.env.SCF_LOG_PORT | quote }}
        - name: "SCF_LOG_PROTOCOL"
          value: {{ required "SCF_LOG_PROTOCOL configuration missing" .Values.env.SCF_LOG_PROTOCOL | quote }}
        image: "{{ .Values.kube.registry.hostname }}/{{ .Values.kube.organization }}/scf-postgres:e6625d124aa695902da99a16544c215216694112"
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/fissile/pre-stop.sh"
        livenessProbe: ~
        name: "postgres"
        ports:
        - containerPort: 5524
          name: "postgres"
          protocol: "TCP"
        readinessProbe:
          tcpSocket:
            port: 5524
        resources:
          requests:
            {{- if and .Values.sizing.memory.requests .Values.sizing.postgres.memory.request }}
            memory: "{{ int .Values.sizing.postgres.memory.request }}Mi"
            {{- end }}

            {{- if and .Values.sizing.cpu.requests .Values.sizing.postgres.cpu.request }}
            cpu: "{{ int .Values.sizing.postgres.cpu.request }}m"
            {{- end }}

          limits:
            {{- if and .Values.sizing.memory.limits .Values.sizing.postgres.memory.limit }}
            memory: "{{ int .Values.sizing.postgres.memory.limit }}Mi"
            {{- end }}

            {{- if and .Values.sizing.cpu.limits .Values.sizing.postgres.cpu.limit }}
            cpu: "{{ int .Values.sizing.postgres.cpu.limit }}m"
            {{- end }}

        securityContext:
          {{- if has "ALL" .Values.sizing.postgres.capabilities }}
          privileged: true
          {{- end }}

          {{- if not (has "ALL" .Values.sizing.postgres.capabilities) }}
          capabilities:
            add:
            {{- range .Values.sizing.postgres.capabilities }}
            - {{ . | upper }}
            {{- end }}
          {{- end }}

        volumeMounts:
        - mountPath: "/var/vcap/store"
          name: "postgres-data"
          readOnly: false
      dnsPolicy: "ClusterFirst"
      imagePullSecrets:
      - name: "registry-credentials"
      restartPolicy: "Always"
      terminationGracePeriodSeconds: 600
      volumes: ~
  {{- if or (gt (int .Capabilities.KubeVersion.Major) 1) (and (eq (int .Capabilities.KubeVersion.Major) 1) (ge (.Capabilities.KubeVersion.Minor | trimSuffix "+" | int) 7)) }}
  updateStrategy:
    type: "RollingUpdate"
  {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: "postgres-data"
      annotations:
        volume.beta.kubernetes.io/storage-class: {{ .Values.kube.storage_class.persistent | quote }}
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "{{ .Values.sizing.postgres.disk_sizes.postgres_data }}G"
---
apiVersion: "v1"
items:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "postgres-set"
  spec:
    {{- if not .Values.services.loadbalanced }}
    clusterIP: "None"
    {{- end }}
    ports:
    - name: "postgres"
      port: 5524
      protocol: "TCP"
      targetPort: 0
    selector:
      skiff-role-name: "postgres"
    type: {{ if .Values.services.loadbalanced }} LoadBalancer {{ else }} ClusterIP {{ end }}
kind: "List"
