---
env:
  # List of domains (including scheme) from which Cross-Origin requests will be
  # accepted, a * can be used as a wildcard for any part of a domain.
  ALLOWED_CORS_DOMAINS: "[]"

  # Allow users to change the value of the app-level allow_ssh attribute.
  ALLOW_APP_SSH_ACCESS: "true"

  # PEM encoded RSA private key used to identify host.
  APP_SSH_KEY: ~

  # MD5 fingerprint of the host key of the SSH proxy that brokers connections to
  # application instances.
  APP_SSH_KEY_FINGERPRINT: ~

  # Extra token expiry time while uploading big apps, in seconds.
  APP_TOKEN_UPLOAD_GRACE_PERIOD: "1200"

  # PEM-encoded certificate
  AUCTIONEER_REP_CERT: ~

  # PEM-encoded key
  AUCTIONEER_REP_KEY: ~

  # PEM-encoded server certificate
  AUCTIONEER_SERVER_CERT: ~

  # PEM-encoded server key
  AUCTIONEER_SERVER_KEY: ~

  # The password for access to the diego BBS database.
  BBS_ACTIVE_KEY_PASSPHRASE: ~

  # PEM-encoded certificate
  BBS_AUCTIONEER_CERT: ~

  # PEM-encoded key
  BBS_AUCTIONEER_KEY: ~

  # PEM-encoded client certificate.
  BBS_CLIENT_CRT: ~

  # PEM-encoded client key.
  BBS_CLIENT_KEY: ~

  # PEM-encoded certificate
  BBS_REP_CERT: ~

  # PEM-encoded key
  BBS_REP_KEY: ~

  # PEM-encoded client certificate.
  BBS_SERVER_CRT: ~

  # PEM-encoded client key.
  BBS_SERVER_KEY: ~

  # List of allow / deny rules for the blobstore internal server. Will be
  # followed by 'deny all'. Each entry must be follow by a semicolon.
  BLOBSTORE_ACCESS_RULES: "allow 10.0.0.0/8; allow 172.16.0.0/12; allow 192.168.0.0/16;"

  # Maximal allowed file size for upload to blobstore, in megabytes.
  BLOBSTORE_MAX_UPLOAD_SIZE: "5000"

  # The basic auth password that Cloud Controller uses to connect to the
  # blobstore server. Auto-generated if not provided. Passwords must be
  # alphanumeric (URL-safe).
  BLOBSTORE_PASSWORD: ~

  # The secret used for signing URLs between Cloud Controller and blobstore.
  BLOBSTORE_SECURE_LINK: ~

  # The PEM-encoded certificate (optionally as a certificate chain) for serving
  # blobs over TLS/SSL.
  BLOBSTORE_TLS_CERT: ~

  # The PEM-encoded private key for signing TLS/SSL traffic.
  BLOBSTORE_TLS_KEY: ~

  # The password for the bulk api.
  BULK_API_PASSWORD: ~

  # The set of CAT test suites to run. If not specified it falls back to a
  # hardwired set of suites.
  CATS_SUITES: ~

  # The password for access to the Cloud Controller database.
  CCDB_ROLE_PASSWORD: ~

  # The PEM-encoded certificate for internal cloud controller traffic.
  CC_SERVER_CRT: ~

  # The PEM-encoded private key for internal cloud controller traffic.
  CC_SERVER_KEY: ~

  # The PEM-encoded certificate for internal cloud controller uploader traffic.
  CC_UPLOADER_CRT: ~

  # The PEM-encoded private key for internal cloud controller uploader traffic.
  CC_UPLOADER_KEY: ~

  # URI for a CDN to use for buildpack downloads.
  CDN_URI: ""

  # PEM-encoded broker server certificate.
  CF_USB_BROKER_SERVER_CERT: ~

  # PEM-encoded broker server key.
  CF_USB_BROKER_SERVER_KEY: ~

  # The password for access to the Universal Service Broker.
  # Example: password
  CF_USB_PASSWORD: ~

  # The Oauth2 authorities available to the cluster administrator.
  CLUSTER_ADMIN_AUTHORITIES: "scim.write,scim.read,openid,cloud_controller.admin,clients.read,clients.write,doppler.firehose,routing.router_groups.read,routing.router_groups.write"

  # The password for the cluster administrator.
  CLUSTER_ADMIN_PASSWORD: ~

  # 'build' attribute in the /v2/info endpoint
  CLUSTER_BUILD: "2.0.2"

  # 'description' attribute in the /v2/info endpoint
  CLUSTER_DESCRIPTION: "SUSE Cloud Foundry"

  # 'name' attribute in the /v2/info endpoint
  CLUSTER_NAME: "SCF"

  # 'version' attribute in the /v2/info endpoint
  CLUSTER_VERSION: "2"

  # PEM-encoded agent certificate.
  CONSUL_AGENT_CERT: ~

  # PEM-encoded client key.
  CONSUL_AGENT_KEY: ~

  # Part of: A list of passphrases that will be converted into encryption keys,
  # the first key in the list is the active one.
  CONSUL_ENCRYPTION_KEYS: ~

  # PEM-encoded server certificate.
  CONSUL_SERVER_CERT: ~

  # PEM-encoded server key.
  CONSUL_SERVER_KEY: ~

  # Key for encrypting sensitive values in the Cloud Controller database.
  DB_ENCRYPTION_KEY: ~

  # The standard amount of disk (in MB) given to an application when not
  # overriden by the user via manifest, command line, etc.
  DEFAULT_APP_DISK_IN_MB: "1024"

  # The standard amount of memory (in MB) given to an application when not
  # overriden by the user via manifest, command line, etc.
  DEFAULT_APP_MEMORY: "1024"

  # If set apps pushed to spaces that allow SSH access will have SSH enabled by
  # default.
  DEFAULT_APP_SSH_ACCESS: "true"

  # The default stack to use if no custom stack is specified by an app.
  DEFAULT_STACK: "opensuse42"

  # The container disk capacity the cell should manage. If this capacity is
  # larger than the actual disk quota of the cell component, over-provisioning
  # will occur.
  DIEGO_CELL_DISK_CAPACITY_MB: "auto"

  # The memory capacity the cell should manage. If this capacity is larger than
  # the actual memory of the cell component, over-provisioning will occur.
  DIEGO_CELL_MEMORY_CAPACITY_MB: "auto"

  # Maximum network transmission unit length in bytes for application
  # containers.
  DIEGO_CELL_NETWORK_MTU: "1400"

  # A CIDR subnet mask specifying the range of subnets available to be assigned
  # to containers.
  DIEGO_CELL_SUBNET: "10.38.0.0/16"

  # Disable external buildpacks. Only admin buildpacks and system buildpacks
  # will be available to users.
  DISABLE_CUSTOM_BUILDPACKS: "false"

  # The host to ping for confirmation of DNS resolution.
  DNS_HEALTH_CHECK_HOST: "127.0.0.1"

  # Base domain of the SCF cluster.
  # Example: my-scf-cluster.com
  DOMAIN: ~

  # PEM-encoded certificate.
  DOPPLER_CERT: ~

  # PEM-encoded key.
  DOPPLER_KEY: ~

  # The number of versions of an application to keep. You will be able to
  # rollback to this amount of versions.
  DROPLET_MAX_STAGED_STORED: "5"

  # PEM-encoded client certificate.
  ETCD_CLIENT_CRT: ~

  # PEM-encoded client key.
  ETCD_CLIENT_KEY: ~

  # PEM-encoded peer certificate.
  ETCD_PEER_CRT: ~

  # PEM-encoded peer key.
  ETCD_PEER_KEY: ~

  # PEM-encoded server certificate.
  ETCD_SERVER_CRT: ~

  # PEM-encoded server key.
  ETCD_SERVER_KEY: ~

  # Enables setting the X-Forwarded-Proto header if SSL termination happened
  # upstream and the header value was set incorrectly. When this property is set
  # to true, the gorouter sets the header X-Forwarded-Proto to https. When this
  # value set to false, the gorouter sets the header X-Forwarded-Proto to the
  # protocol of the incoming request.
  FORCE_FORWARDED_PROTO_AS_HTTPS: "false"

  # URL pointing to the Docker registry used for fetching Docker images. If not
  # set, the Docker service default is used.
  GARDEN_DOCKER_REGISTRY: "registry-1.docker.io"

  # Whitelist of IP:PORT tuples and CIDR subnet masks. Pulling from docker
  # registries with self signed certificates will not be permitted if the
  # registry's address is not listed here.
  GARDEN_INSECURE_DOCKER_REGISTRIES: ""

  # Override DNS servers to be used in containers; defaults to the same as the
  # host.
  GARDEN_LINUX_DNS_SERVER: ""

  # The filesystem driver to use (btrfs or overlay-xfs).
  GARDEN_ROOTFS_DRIVER: "btrfs"

  # The log destination to talk to. This has to point to a syslog server.
  HCF_LOG_HOST: ~

  # The port used by rsyslog to talk to the log destination. If not set it
  # defaults to 514, the standard port of syslog.
  HCF_LOG_PORT: ~

  # The protocol used by rsyslog to talk to the log destination. The allowed
  # values are tcp, and udp. The default is tcp.
  HCF_LOG_PROTOCOL: "tcp"

  # The CA certificate for UAA
  HCP_CA_CERT: "-----BEGIN CERTIFICATE-----\nMIIE6jCCAtKgAwIBAgIBATANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwppbnRl\ncm5hbENBMB4XDTE3MTEyOTIwMDQ0NVoXDTI3MTEyOTIwMDUwNFowFTETMBEGA1UE\nAxMKaW50ZXJuYWxDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAL5z\nVDPeStTCiwOwDPIEYHv5ucUmb9qqaujYZHN7UFQ+6GjLlo0Y3aG/D4RRj/EuUg8Z\n/C4LjXl5qti6wm/dqjNzi6YJ0GvcVG41lVPi1lyX0MB4E2l2dvNCWPsApbzDZYEp\nEw3qn/VjdK9gHSUTVK4ZNDBdFkB149Su6zqVDotmlANM3H2+PWPv9nEa15nNWdLR\nHnVjA8ysAvrEJa0ZjyY3Zlg+Ix4VYhLCwZFkLB1PyBktpCRiS47dsXu8btFzes2N\n+pPdhZUV4ZLyiopkgL3lFOiP0YrgmLH+jPNa93QJrziwx11xXZXec94Bld/PX9+6\nCfT+o9mAtfMs1ZERCKsYogjeKilRa9kirwKt1AZxku70xIdJQkZ3HuX2X+Pv7CWt\n+7k691PWJ1V55sSt9S77dPAjOd6IyswpdyDy62I8JoLjtOnzg70Y6BJS8HQ8mfg8\nikv49hT0qhYCoOLKr6kmtRvULk66wzmmxc3G9yKEewF7P6yHG1q4sI8cQJ6APMP0\ngtLXVAlOcwvdyuXEJ3Xw3ZYYCeYPicb9tmOlatA/YDY0sYgeqIBDCP5xCxE4ki0p\n8MT8SLtD/FR9WhfYJ1ABGSjSjamXfuYzxN6onNr45W1H4SO+5xH0EOfKZKlJqqAO\nA1hcS2oH6zo8L/nDfFDLauBlg/KyXIqgmufEFxYbAgMBAAGjRTBDMA4GA1UdDwEB\n/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/AgEAMB0GA1UdDgQWBBRC4gfa4grn1yOi\nn6Z2W+GKU3of1DANBgkqhkiG9w0BAQsFAAOCAgEAV6ihPbxhdEzkzj7UIAU54Jsh\ngHthu4JqqSO3qyK7qcnXrUYY+HzBlJKMJFB1oj+YG4tqVTlMquCigXH02d4Gq/wC\nLlUqUr6UcIuf3XHryOlIpNCHt+TVxx0tDLnAv3BexpOeUAqZtw+JI6t2s6psXXq3\noyQIVowCj3sQm5Ekfa6BLj6C14OD73WFIUoIlWT+lQYJuhzOPJy8kRzKqScbqPm4\nte/Jb5KBM/tL+a+DnIvTDcKcyKgc2uCogvdikjESJqoyEYUjvkIobZwJ/2Sci3/c\nUbvbnHQJc4OUCVuFZYNCc1q0B6szGsKUY6asYKwaY0PNiPOwimFPrDoY5orc3eu9\npvLHASFBX6+Da8lMjLUtA5wlKmceCqmqj8ecLDlhgQTZZlubEOfyHY+a24U64Ijd\ncff99B2tWhYu4gEKjsVSDODCEnMuMOb/K8afRzxG1zM65Cxd41m4xP3YmO5AR7ng\nBfCkEgbJZC6SfI+gQKOP2iLZGseVXoa1MiOIFFSR+q43OrBHX9mxH5C7tQMATAIh\naCDrBDUMEAWTdAdfyoUzwU9GhDDWMxTJVXrN5mnXb2VlyvjCI7ZgpZ1xh62NG66u\n5RAAple76mOKq2g4Kx21KM4OFPXc1YaGQy2YjvPV6o9oDPNRAPpSxICiAJ6DkU34\nMb2WLKTZXGlV2vkJBzo=\n-----END CERTIFICATE-----\n"

  # Location of the proxy to use for secure web access.
  HTTPS_PROXY: ~

  # Location of the proxy to use for regular web access.
  HTTP_PROXY: ~

  # Basic auth password for access to the Cloud Controller's internal API.
  INTERNAL_API_PASSWORD: ~

  # PEM-encoded CA certificate used to sign the TLS certificate used by all
  # components to secure their communications.
  INTERNAL_CA_CERT: ~

  # PEM-encoded CA key.
  INTERNAL_CA_KEY: ~

  KUBE_SERVICE_DOMAIN_SUFFIX: ~

  # The cluster's log level: off, fatal, error, warn, info, debug, debug1,
  # debug2.
  LOG_LEVEL: "info"

  # The maximum amount of disk a user can request for an application via
  # manifest, command line, etc., in MB. See also DEFAULT_APP_DISK_IN_MB for the
  # standard amount.
  MAX_APP_DISK_IN_MB: "2048"

  # Maximum health check timeout that can be set for an app, in seconds.
  MAX_HEALTH_CHECK_TIMEOUT: "180"

  # PEM-encoded certificate.
  METRON_CERT: ~

  # PEM-encoded key.
  METRON_KEY: ~

  # Password used for the monit API.
  MONIT_PASSWORD: ~

  # The password for the MySQL server admin user.
  MYSQL_ADMIN_PASSWORD: ~

  # The password for access to the usb config database.
  # Example: password
  MYSQL_CF_USB_PASSWORD: ~

  # The password for the cluster logger health user.
  MYSQL_CLUSTER_HEALTH_PASSWORD: ~

  # The password for access to MySQL by diego.
  MYSQL_DIEGO_PASSWORD: ~

  # Password used to authenticate to the MySQL Galera healthcheck endpoint.
  MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD: ~

  # The password for Basic Auth used to secure the MySQL proxy API.
  MYSQL_PROXY_ADMIN_PASSWORD: ~

  # The password for access to MySQL by the routing-api
  MYSQL_ROUTING_API_PASSWORD: ~

  # The password for access to NATS.
  NATS_PASSWORD: ~

  # Sets the maximum allowed size of the client request body, specified in the
  # “Content-Length” request header field, in megabytes. If the size in a
  # request exceeds the configured value, the 413 (Request Entity Too Large)
  # error is returned to the client. Please be aware that browsers cannot
  # correctly display this error. Setting size to 0 disables checking of client
  # request body size. This limits application uploads, buildpack uploads, etc.
  NGINX_MAX_REQUEST_BODY_SIZE: "1536"

  # Comma separated list of IP addresses and domains which should not be
  # directoed through a proxy, if any.
  NO_PROXY: ~

  # Comma separated list of white-listed options that may be set during create
  # or bind operations.
  # Example:
  # uid,gid,allow_root,allow_other,nfs_uid,nfs_gid,auto_cache,fsname,username,password
  PERSI_NFS_ALLOWED_OPTIONS: "uid,gid,auto_cache,username,password"

  # Basic auth password to verify on incoming Service Broker requests
  PERSI_NFS_BROKER_PASSWORD: ~

  # Comma separated list of default values for nfs mount options. If a default
  # is specified with an option not included in PERSI_NFS_ALLOWED_OPTIONS, then
  # this default value will be set and it won't be overridable.
  PERSI_NFS_DEFAULT_OPTIONS: ~

  # Comma separated list of white-listed options that may be accepted in the
  # mount_config options. Note a specific 'sloppy_mount:true' volume option
  # tells the driver to ignore non-white-listed options, while a
  # 'sloppy_mount:false' tells the driver to fail fast instead when receiving a
  # non-white-listed option."
  #
  # Example:
  # allow_root,allow_other,nfs_uid,nfs_gid,auto_cache,sloppy_mount,fsname
  PERSI_NFS_DRIVER_ALLOWED_IN_MOUNT: "auto_cache"

  # Comma separated list of white-listed options that may be configured in
  # supported in the mount_config.source URL query params
  #
  # Example: uid,gid,auto-traverse-mounts,dircache
  PERSI_NFS_DRIVER_ALLOWED_IN_SOURCE: "uid,gid"

  # Comma separated list default values for options that may be configured in
  # the mount_config options, formatted as 'option:default'. If an option is not
  # specified in the volume mount, or the option is not white-listed, then the
  # specified default value will be used instead.
  #
  # Example:
  # allow_root:false,nfs_uid:2000,nfs_gid:2000,auto_cache:true,sloppy_mount:true
  PERSI_NFS_DRIVER_DEFAULT_IN_MOUNT: "auto_cache:true"

  # Comma separated list of default values for options in the source URL query
  # params, formatted as 'option:default'. If an option is not specified in the
  # volume mount, or the option is not white-listed, then the specified default
  # value will be applied.
  PERSI_NFS_DRIVER_DEFAULT_IN_SOURCE: ~

  # Disable Persi NFS driver
  PERSI_NFS_DRIVER_DISABLE: "false"

  # LDAP server host name or ip address (required for LDAP integration only)
  PERSI_NFS_DRIVER_LDAP_HOST: ""

  # LDAP service account password (required for LDAP integration only)
  PERSI_NFS_DRIVER_LDAP_PASSWORD: "-"

  # LDAP server port (required for LDAP integration only)
  PERSI_NFS_DRIVER_LDAP_PORT: "389"

  # LDAP server protocol (required for LDAP integration only)
  PERSI_NFS_DRIVER_LDAP_PROTOCOL: "tcp"

  # LDAP service account user name (required for LDAP integration only)
  PERSI_NFS_DRIVER_LDAP_USER: ""

  # LDAP fqdn for user records we will search against when looking up user uids
  # (required for LDAP integration only)
  # Example: cn=Users,dc=corp,dc=test,dc=com
  PERSI_NFS_DRIVER_LDAP_USER_FQDN: ""

  # Database password for storing broker state for the Persi NFS Broker
  PERSI_NFS_MYSQL_PASSWORD: ~

  # PEM-encoded client certificate
  REP_CLIENT_CERT: ~

  # PEM-encoded client key
  REP_CLIENT_KEY: ~

  # PEM-encoded server certificate
  REP_SERVER_CERT: ~

  # PEM-encoded server key
  REP_SERVER_KEY: ~

  # Modifying this value will break TCP port forwarding.
  RESERVABLE_PORTS: "20000-20008"

  # Certficates to add to the rootfs trust store. Multiple certs are possible by
  # concatenating their definitions into one big block of text.
  ROOTFS_TRUSTED_CERTS: ""

  # The algorithm used by the router to distribute requests for a route across
  # backends. Supported values are round-robin and least-connection.
  ROUTER_BALANCING_ALGORITHM: "round-robin"

  # Support for route services is disabled when no value is configured. A robust
  # passphrase is recommended.
  ROUTER_SERVICES_SECRET: ~

  # The public ssl cert for ssl termination.
  ROUTER_SSL_CERT: ~

  # The private ssl key for ssl termination.
  ROUTER_SSL_KEY: ~

  # Password for HTTP basic auth to the varz/status endpoint.
  ROUTER_STATUS_PASSWORD: ~

  # A comma-separated list of insecure Docker registries in the form of
  # '<HOSTNAME|IP>:PORT'. Each registry must be quoted separately.
  #
  # Example: "docker-registry.example.com:80", "hello.example.org:443"
  STAGER_INSECURE_DOCKER_REGISTRIES: ""

  # Timeout for staging an app, in seconds.
  STAGING_TIMEOUT: "900"

  # The password for access to the uploader of staged droplets.
  STAGING_UPLOAD_PASSWORD: ~

  # Support contact information for the cluster
  SUPPORT_ADDRESS: "support@example.com"

  # PEM-encoded certificate
  SYSLOGDRAINBINDER_CERT: ~

  # PEM-encoded key.
  SYSLOGDRAINBINDER_KEY: ~

  # TCP routing domain of the SCF cluster; only used for testing;
  # Example: tcp.my-scf-cluster.com
  TCP_DOMAIN: ~

  # PEM-encoded client certificate for internal communication between the cloud
  # controller and TPS.
  TPS_CC_CLIENT_CRT: ~

  # PEM-encoded client key for internal communication between the cloud
  # controller and TPS.
  TPS_CC_CLIENT_KEY: ~

  # PEM-encoded certificate for communication with the traffic controller of the
  # log infra structure.
  TRAFFICCONTROLLER_CERT: ~

  # PEM-encoded key for communication with the traffic controller of the log
  # infra structure.
  TRAFFICCONTROLLER_KEY: ~

  # Concatenation of trusted CA certificates to be made available on the cell.
  TRUSTED_CERTS: ~

  # The password for access to the UAA database.
  UAADB_PASSWORD: ~

  # The password of the admin client - a client named admin with uaa.admin as an
  # authority.
  UAA_ADMIN_CLIENT_SECRET: ~

  # The password for UAA access by the Cloud Controller.
  UAA_CC_CLIENT_SECRET: ~

  # The password for UAA access by the Routing API.
  UAA_CLIENTS_CC_ROUTING_SECRET: ~

  # Used for fetching service key values from CredHub.
  UAA_CLIENTS_CC_SERVICE_KEY_CLIENT_SECRET: ~

  # The password for UAA access by the Universal Service Broker.
  UAA_CLIENTS_CF_USB_SECRET: ~

  # The password for UAA access by the Cloud Controller for fetching usernames.
  UAA_CLIENTS_CLOUD_CONTROLLER_USERNAME_LOOKUP_SECRET: ~

  # The password for UAA access by the SSH proxy.
  UAA_CLIENTS_DIEGO_SSH_PROXY_SECRET: ~

  # The password for UAA access by doppler.
  UAA_CLIENTS_DOPPLER_SECRET: ~

  # The password for UAA access by the gorouter.
  UAA_CLIENTS_GOROUTER_SECRET: ~

  # The password for UAA access by the task creating the cluster administrator
  # user
  UAA_CLIENTS_HCF_AUTO_CONFIG_SECRET: ~

  # The password for UAA access by the login client.
  UAA_CLIENTS_LOGIN_SECRET: ~

  # The password for UAA access by the TCP emitter.
  UAA_CLIENTS_TCP_EMITTER_SECRET: ~

  # The password for UAA access by the TCP router.
  UAA_CLIENTS_TCP_ROUTER_SECRET: ~

  # The host name of the UAA server (root zone)
  UAA_HOST: ~

  # The tcp port the UAA server (root zone) listens on for requests.
  UAA_PORT: "2793"

  # Whether or not to use privileged containers for buildpack based
  # applications. Containers with a docker-image-based rootfs will continue to
  # always be unprivileged.
  USE_DIEGO_PRIVILEGED_CONTAINERS: "false"

  # Whether or not to use privileged containers for staging tasks.
  USE_STAGER_PRIVILEGED_CONTAINERS: "false"

sizing:
  HA: false

  # The api role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # - patch-properties: Dummy BOSH job used to host parameters that are used in
  #   HCF patches for upstream bugs
  #
  # - cloud_controller_ng: The Cloud Controller provides primary Cloud Foundry
  #   API that is by the CF CLI. The Cloud Controller uses a database to keep
  #   tables for organizations, spaces, apps, services, service instances, user
  #   roles, and more. Typically multiple instances of Cloud Controller are load
  #   balanced.
  #
  # - route_registrar: Used for registering routes
  #
  # Also: consul_agent, metron_agent, statsd_injector, go-buildpack,
  # binary-buildpack, nodejs-buildpack, ruby-buildpack, php-buildpack,
  # python-buildpack, staticfile-buildpack, java-offline-buildpack,
  # dotnet-core-buildpack
  api:
    # The api role can scale between 1 and 65535 instances.
    # For high availability it needs at least 2 instances.
    count: 1
    memory: 2560
    vcpu_count: 4

  # The blobstore role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - route_registrar: Used for registering routes
  #
  # Also: consul_agent, blobstore, metron_agent
  blobstore:
    # The blobstore role cannot be scaled.
    count: 1
    disk_sizes:
      blobstore_data: 50
    memory: 1536
    vcpu_count: 2

  # The cc-clock role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # - cloud_controller_clock: The Cloud Controller clock periodically schedules
  #   Cloud Controller clean up tasks for app usage events, audit events, failed
  #   jobs, and more. Only single instance of this job is necessary.
  #
  # Also: consul_agent, metron_agent, statsd_injector
  cc_clock:
    # The cc-clock role cannot be scaled.
    count: 1
    memory: 512
    vcpu_count: 2

  # The cc-uploader role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # Also: tps, cc_uploader, consul_agent, metron_agent
  cc_uploader:
    # The cc-uploader role can scale between 1 and 3 instances.
    # For high availability it needs at least 2 instances.
    count: 1
    memory: 512
    vcpu_count: 4

  # The cc-worker role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # - cloud_controller_worker: Cloud Controller worker processes background
  #   tasks submitted via the.
  #
  # Also: consul_agent, metron_agent
  cc_worker:
    # The cc-worker role can scale between 1 and 65535 instances.
    # For high availability it needs at least 2 instances.
    count: 1
    memory: 512
    vcpu_count: 2

  # The cf-usb role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # - route_registrar: Used for registering routes
  #
  # Also: cf-usb, consul_agent
  cf_usb:
    # The cf-usb role can scale between 1 and 3 instances.
    # For high availability it needs at least 2 instances.
    count: 1
    memory: 256
    vcpu_count: 2

  # The consul role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # Also: consul_agent, metron_agent
  consul:
    # The consul role can scale between 1 and 3 instances.
    # The instance count must be an odd number (not divisible by 2).
    # For high availability it needs at least 3 instances.
    count: 1
    disk_sizes:
      consul_data: 1
    memory: 256
    vcpu_count: 2

  # The diego-access role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # Also: ssh_proxy, consul_agent, metron_agent, file_server
  diego_access:
    # The diego-access role can scale between 1 and 3 instances.
    # For high availability it needs at least 2 instances.
    count: 1
    memory: 256
    vcpu_count: 2

  # The diego-api role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # Also: rep-certstrap, bbs, consul_agent, metron_agent
  diego_api:
    # The diego-api role can scale between 1 and 3 instances.
    # The instance count must be an odd number (not divisible by 2).
    # For high availability it needs at least 3 instances.
    count: 1
    memory: 256
    vcpu_count: 2

  # The diego-brain role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # Also: consul_agent, rep-certstrap, auctioneer, metron_agent
  diego_brain:
    # The diego-brain role can scale between 1 and 3 instances.
    # For high availability it needs at least 2 instances.
    count: 1
    memory: 256
    vcpu_count: 4

  # The diego-cell role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # - wait-for-uaa: Wait for UAA to be ready before starting any jobs
  #
  # Also: rep, route_emitter, consul_agent, garden, cflinuxfs2-rootfs-setup,
  # opensuse42-rootfs-setup, cf-sle12-setup, metron_agent, grootfs, nfsv3driver
  diego_cell:
    # The diego-cell role can scale between 1 and 254 instances.
    # For high availability it needs at least 3 instances.
    count: 1
    disk_sizes:
      garden_data: 50
      grootfs_data: 50
    memory: 4096
    vcpu_count: 4

  # The doppler role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # Also: doppler, syslog_drain_binder, metron_agent, consul_agent
  doppler:
    # The doppler role can scale between 1 and 65535 instances.
    # For high availability it needs at least 2 instances.
    count: 1
    memory: 256
    vcpu_count: 2

  # The etcd role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # - patch-properties: Dummy BOSH job used to host parameters that are used in
  #   HCF patches for upstream bugs
  #
  # - etcd_metrics_server: The etcd Metrics Server is meant to be collocated
  #   with the etcd server to collect and expose runtime statistics for the
  #   Collector.
  #
  # Also: etcd, metron_agent
  etcd:
    # The etcd role can scale between 1 and 3 instances.
    # The instance count must be an odd number (not divisible by 2).
    # For high availability it needs at least 3 instances.
    count: 1
    disk_sizes:
      cf_etcd_data: 2
    memory: 256
    vcpu_count: 2

  # The loggregator role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # - route_registrar: Used for registering routes
  #
  # Also: loggregator_trafficcontroller, metron_agent
  loggregator:
    # The loggregator role can scale between 1 and 65535 instances.
    # For high availability it needs at least 2 instances.
    count: 1
    memory: 256
    vcpu_count: 2

  # The mysql role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - patch-properties: Dummy BOSH job used to host parameters that are used in
  #   HCF patches for upstream bugs
  #
  # Also: mysql
  mysql:
    # The mysql role can scale between 1 and 3 instances.
    # For high availability it needs at least 2 instances.
    count: 1
    disk_sizes:
      mysql_data: 20
    memory: 3072
    vcpu_count: 2

  # The mysql-proxy role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - patch-properties: Dummy BOSH job used to host parameters that are used in
  #   HCF patches for upstream bugs
  #
  # Also: proxy
  mysql_proxy:
    # The mysql-proxy role cannot be scaled.
    count: 1
    memory: 256
    vcpu_count: 2

  # The nats role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - nats: The NATS server provides publish-subscribe messaging system for the
  #   Cloud Controller, the DEA , HM9000, and other Cloud Foundry components.
  #
  # Also: metron_agent, consul_agent
  nats:
    # The nats role can scale between 1 and 3 instances.
    # For high availability it needs at least 2 instances.
    count: 1
    memory: 256
    vcpu_count: 2

  # The nfs-broker role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # Also: metron_agent, nfsbroker
  nfs_broker:
    # The nfs-broker role can scale between 1 and 3 instances.
    count: 1
    memory: 128
    vcpu_count: 2

  # The post-deployment-setup role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # - uaa-create-user: Create the initial user in UAA
  #
  # - configure-scf: Uses the cf CLI to configure SCF once it's online (things
  #   like proxy settings, service brokers, etc.)
  post_deployment_setup:
    # The post-deployment-setup role cannot be scaled.
    count: 1
    memory: 256
    vcpu_count: 1

  # The router role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # - gorouter: Gorouter maintains a dynamic routing table based on updates
  #   received from NATS and (when enabled) the Routing API. This routing table
  #   maps URLs to backends. The router finds the URL in the routing table that
  #   most closely matches the host header of the request and load balances
  #   across the associated backends.
  #
  # Also: consul_agent, metron_agent
  router:
    # The router role can scale between 1 and 65535 instances.
    # For high availability it needs at least 2 instances.
    count: 1
    memory: 256
    vcpu_count: 4

  # The routing-api role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # Also: consul_agent, metron_agent, routing-api
  routing_api:
    # The routing-api role can scale between 1 and 3 instances.
    # For high availability it needs at least 2 instances.
    count: 1
    memory: 512
    vcpu_count: 4

  # The secret-generation role contains the following jobs:
  #
  # - generate-secrets: This job will generate the secrets for the cluster
  secret_generation:
    # The secret-generation role cannot be scaled.
    count: 1
    memory: 256
    vcpu_count: 1

  # The tcp-router role contains the following jobs:
  #
  # - global-properties: Dummy BOSH job used to host global parameters that are
  #   required to configure HCF
  #
  # - authorize-internal-ca: Install both internal and UAA CA certificates
  #
  # - wait-for-uaa: Wait for UAA to be ready before starting any jobs
  #
  # Also: tcp_router, consul_agent, metron_agent
  tcp_router:
    # The tcp-router role can scale between 1 and 3 instances.
    # For high availability it needs at least 2 instances.
    count: 1
    memory: 256
    vcpu_count: 2

services:
  loadbalanced: false
kube:
  external_ip: "192.168.77.77"
  storage_class:
    persistent: "persistent"
    shared: "shared"
  registry:
    hostname: "staging.registry.howdoi.website"
    username: ""
    password: ""
  organization: "splatform"
  auth: ~
