---
{{- if semverCompare ">=1.16" (printf "%s.%s" .Capabilities.KubeVersion.Major (trimSuffix "+" .Capabilities.KubeVersion.Minor) )}}
apiVersion: apps/v1
{{- else }}
apiVersion: apps/v1beta1
{{- end }}
kind: StatefulSet
metadata:
  name: stratos
spec:
  serviceName: stratos
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "stratos"
      app.kubernetes.io/component: "stratos"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "stratos"
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
        app.kubernetes.io/component: "stratos"
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        app: "{{ .Release.Name }}"
        component: stratos
    spec:
      containers:
      - image: {{.Values.kube.registry.hostname}}/{{.Values.kube.organization}}/{{.Values.images.console}}:2.7.0-35f5964bd-cap
        imagePullPolicy: {{.Values.imagePullPolicy}}
        name: ui
        env:
        - name: ENCRYPTION_KEY_VOLUME
          value: "{{ .Release.Name }}-encryption-key-volume"
        volumeMounts:
        - mountPath: /etc/secrets/
          name: "{{ .Release.Name }}-secret"
          readOnly: true
        - mountPath: "/{{ .Release.Name }}-encryption-key-volume"
          name: "{{ .Release.Name }}-encryption-key-volume"
          readOnly: true
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
      - image: {{.Values.kube.registry.hostname}}/{{.Values.kube.organization}}/{{.Values.images.postflight}}:2.7.0-35f5964bd-cap
        imagePullPolicy: {{.Values.imagePullPolicy}}
        name: "postflight"
        env:
        - name: DB_HOST
          value: "{{ .Release.Name }}-mariadb"
        - name: DB_PORT
          value: "3306"
        - name: DB_ADMIN_USER
          value:  "{{ .Values.mariadb.adminUser }}"
        - name: DB_ADMIN_PASSWORD
          value:  "{{ .Values.mariadb.mariadbRootPassword }}"
        - name: DATABASE_PROVIDER
          value: "{{ .Values.dbProvider }}"
        - name: DB_PASSWORD
          value: "{{ .Values.mariadb.mariadbPassword }}"
        - name: DB_USER
          value: "{{ .Values.mariadb.mariadbUser }}"
        - name: DB_DATABASE_NAME
          value: "{{ .Values.mariadb.mariadbDatabase }}"
        - name: DO_NOT_QUIT
          value: "true"
        - name: UPGRADE_VOLUME
          value: "{{ .Release.Name }}-upgrade-volume"
        - name: UPGRADE_LOCK_FILENAME
          value: upgrade.lock
        - name: HTTP_PROXY
        {{- if .Values.httpProxy }}
          value: {{.Values.httpProxy}}
        {{- end }}
        - name: HTTPS_PROXY
        {{- if .Values.httpsProxy }}
          value: {{.Values.httpsProxy}}
        {{- end }}
        - name: NO_PROXY
        {{- if .Values.noProxy }}
          value: {{.Values.noProxy}}
        {{- end }}
        - name: FTP_PROXY
        {{- if .Values.ftpProxy }}
          value: {{.Values.ftpProxy}}
        {{- end }}
        - name: SOCKS_PROXY
        {{- if .Values.socksProxy }}  
          value: {{.Values.socksProxy}}
        {{- end }}
        volumeMounts:
          - mountPath: "/{{ .Release.Name }}-upgrade-volume"
            name: "{{ .Release.Name }}-upgrade-volume"
          - mountPath: /etc/secrets/
            name: "{{ .Release.Name }}-secret"
      - image: {{.Values.kube.registry.hostname}}/{{.Values.kube.organization}}/{{.Values.images.proxy}}:2.7.0-35f5964bd-cap
        imagePullPolicy: {{.Values.imagePullPolicy}}
        name: proxy
        env:
        - name: DB_USER
          value: "{{ .Values.mariadb.mariadbUser }}"
        - name: DB_PASSWORD
          value: "{{ .Values.mariadb.mariadbPassword }}"
        - name: DB_DATABASE_NAME
          value: "{{ .Values.mariadb.mariadbDatabase }}"
        - name: DB_HOST
          value: "{{ .Release.Name }}-mariadb"
        - name: DB_PORT
          value: "3306"
        - name: DATABASE_PROVIDER
          value: "{{ .Values.dbProvider }}"
        - name: DB_ADMIN_USER
          value:  "{{ .Values.mariadb.adminUser }}"
        - name: DB_ADMIN_PASSWORD
          value:  "{{ .Values.mariadb.mariadbRootPassword }}"
        - name: HTTP_CONNECTION_TIMEOUT_IN_SECS
          value: "10"
        - name: HTTP_CLIENT_TIMEOUT_IN_SECS
          value: "30"
        - name: HTTP_CLIENT_TIMEOUT_MUTATING_IN_SECS
          value: "120"
        - name: HTTP_CLIENT_TIMEOUT_LONGRUNNING_IN_SECS
          value: "600"
        - name: SKIP_TLS_VERIFICATION
          value: "false"
        - name: CONSOLE_PROXY_TLS_ADDRESS
          value: :3003
        - name: CF_CLIENT
          value: cf
        - name: UPGRADE_VOLUME
          value: "{{ .Release.Name }}-upgrade-volume"
        - name: UPGRADE_LOCK_FILENAME
          value: upgrade.lock
        - name: ALLOWED_ORIGINS
          value: https://localhost
        - name: ENCRYPTION_KEY_VOLUME
          value: "{{ .Release.Name }}-encryption-key-volume"
        - name: ENCRYPTION_KEY_FILENAME
          value: key
        - name: SESSION_STORE_SECRET
          {{- if .Values.console.sessionStoreSecret }}
          value: {{ .Values.console.sessionStoreSecret | quote }}
          {{- else }}
          value: {{ randAlphaNum 64 | quote }}
          {{- end }}          
        {{- if .Values.consoleCert }}
        - name: CONSOLE_CERT
          value: | 
{{ .Values.consoleCert | indent 12 }}
        {{- end }}
        {{- if .Values.consoleCertKey }}
        - name: CONSOLE_CERT_KEY
          value: |
{{ .Values.consoleCertKey | indent 12 }}
        {{- end }}
        - name: CONSOLE_PROXY_CERT_PATH
          value: "/{{ .Release.Name }}-encryption-key-volume/console.crt" 
        - name: CONSOLE_PROXY_CERT_KEY_PATH
          value: "/{{ .Release.Name }}-encryption-key-volume/console.key" 
        - name: NO_SHARED_MODE
          value: "true"
        - name: HTTP_PROXY
        {{- if .Values.httpProxy }}
          value: {{.Values.httpProxy}}
        {{- end }}
        - name: HTTPS_PROXY
        {{- if .Values.httpsProxy }}
          value: {{.Values.httpsProxy}}
        {{- end }}
        - name: NO_PROXY
        {{- if .Values.noProxy }}
          value: {{.Values.noProxy}}
        {{- end }}
        - name: FTP_PROXY
        {{- if .Values.ftpProxy }}
          value: {{.Values.ftpProxy}}
        {{- end }}
        - name: SOCKS_PROXY
        {{- if .Values.socksProxy }}
          value: {{.Values.socksProxy}}
        {{- end }}
        {{- if .Values.console.backendLogLevel }}
        - name: LOG_LEVEL
          value: {{.Values.console.backendLogLevel}}
        {{- end }}
        # Local admin user
        {{- if .Values.console.localAdminPassword }}
        - name: CONSOLE_CLIENT 
          value: cf
        - name: CONSOLE_ADMIN_SCOPE 
          value: stratos.admin
        - name: SKIP_SSL_VALIDATION 
          value: "true"
        - name: AUTH_ENDPOINT_TYPE 
          value: local
        - name: LOCAL_USER 
          value: admin
        - name: LOCAL_USER_PASSWORD 
          value: "{{.Values.console.localAdminPassword}}"
        - name: LOCAL_USER_SCOPE 
          value: stratos.admin
        {{- else }}
        # UAA
        {{- if or .Values.env.UAA_HOST .Values.env.DOMAIN }}  
        - name: UAA_ENDPOINT 
          value: {{ template "scfUaaEndpoint" . }}
        - name: CONSOLE_CLIENT 
          value: cf
        - name: CONSOLE_CLIENT_SECRET
          value:
        {{- if .Values.env.DOMAIN }}  
        - name: AUTO_REG_CF_URL
          value: https://api.{{.Values.env.DOMAIN}}
        {{- end }}
        - name: CONSOLE_ADMIN_SCOPE 
          value: cloud_controller.admin
        - name: SKIP_SSL_VALIDATION 
          value: "true"
        {{- else if .Values.uaa.host }}  
        - name: UAA_ENDPOINT 
          value: {{default "https://" .Values.uaa.protocol}}{{.Values.uaa.host}}:{{.Values.uaa.port}}
        - name: CONSOLE_CLIENT 
          value: {{.Values.uaa.consoleClient}}
        - name: CONSOLE_CLIENT_SECRET 
          value: {{.Values.uaa.consoleClientSecret}}
        - name: CONSOLE_ADMIN_SCOPE 
          value: {{.Values.uaa.consoleAdminIdentifier}}
        - name: SKIP_SSL_VALIDATION 
          value: {{default "true" .Values.uaa.skipSSLValidation | quote}}
        {{- end }}
        {{- end }}
        {{- if .Values.console.cookieDomain }}{{ if ne .Values.console.cookieDomain "-" }}
        - name: COOKIE_DOMAIN
          value: {{.Values.console.cookieDomain}}
        {{- end }}
        {{- else if .Values.env.DOMAIN }}  
        - name: COOKIE_DOMAIN
          value: {{.Values.env.DOMAIN}}
        {{- end }}
        - name: HELM_NAME
          value: "{{ .Release.Namespace }}/{{ .Release.Name }}"
        - name: HELM_REVISION
          value: "{{ .Release.Revision }}"
        - name: HELM_CHART_VERSION
          value: "{{ .Chart.Version }}"
        - name: HELM_LAST_MODIFIED
          value: "{{ .Release.Time }}"
        - name: SSO_LOGIN
          value: {{default "false" .Values.console.ssoLogin | quote}}
        - name: SSO_OPTIONS
          value: {{default "" .Values.console.ssoOptions | quote}}
        - name: SSO_WHITELIST
          value: {{ default "" .Values.console.ssoWhiteList | quote }}
        {{- if .Values.console.templatesConfigMapName }}
        - name: TEMPLATE_DIR
          value: /etc/templates
        {{- else }}
        - name: TEMPLATE_DIR
          value: /srv/templates
        {{- end }}
        - name: SMTP_AUTH
          value: {{ default "false" .Values.env.SMTP_AUTH | quote }}
        - name: SMTP_FROM_ADDRESS
          value: {{ default "" .Values.env.SMTP_FROM_ADDRESS | quote }}
        - name: SMTP_HOST
          value: {{ default "" .Values.env.SMTP_HOST | quote }}
        - name: SMTP_PORT
          value: {{ default "" .Values.env.SMTP_PORT | quote }}
        - name: SMTP_USER
          value: {{ default "" .Values.env.SMTP_USER | quote }}
        - name: SMTP_PASSWORD
          value: {{ default "" .Values.env.SMTP_PASSWORD | quote }}
        - name: INVITE_USER_SUBJECT
          value: {{ default "" .Values.console.userInviteSubject | quote }}
        - name: ENABLE_TECH_PREVIEW
          value: {{ default "false" .Values.console.techPreview | quote }}
        ports:
        - containerPort: 3003
          name: proxy
          protocol: TCP
        volumeMounts:
        - mountPath: "/{{ .Release.Name }}-upgrade-volume"
          name: "{{ .Release.Name }}-upgrade-volume"
        - mountPath: "/{{ .Release.Name }}-encryption-key-volume"
          name: "{{ .Release.Name }}-encryption-key-volume"
        - mountPath: /etc/secrets/
          name: "{{ .Release.Name }}-secret"
          readOnly: true
        {{- if .Values.console.templatesConfigMapName }}
        - mountPath: /etc/templates/
          name: "{{ .Release.Name }}-templates"
          readOnly: true
        {{- end }}
      {{- if and .Values.kube.registry.username .Values.kube.registry.password }}
      imagePullSecrets:
      - name: {{.Values.dockerRegistrySecret}}
      {{- end }}
      volumes:
      - name: "{{ .Release.Name }}-upgrade-volume"
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-upgrade-volume"
      - name: "{{ .Release.Name }}-encryption-key-volume"
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-encryption-key-volume"
      - name: "{{ .Release.Name }}-secret"
        secret:
          secretName: "{{ .Release.Name }}-secret"
      {{- if .Values.console.templatesConfigMapName }}
      - name: {{ .Release.Name }}-templates
        configMap:
          name: {{ .Values.console.templatesConfigMapName }}
      {{- end }}
---
{{- if semverCompare ">=1.16" (printf "%s.%s" .Capabilities.KubeVersion.Major (trimSuffix "+" .Capabilities.KubeVersion.Minor) )}}
apiVersion: apps/v1
{{- else }}
apiVersion: extensions/v1beta1
{{- end }}
kind: Deployment
metadata:
  name: stratos-db
  labels:
    app.kubernetes.io/name: "stratos"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
    app.kubernetes.io/component: "stratos-db"
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "stratos"
      app.kubernetes.io/component: "stratos-db"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "stratos"
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
        app.kubernetes.io/component: "stratos-db"
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        app: "{{ .Release.Name }}"
    spec:
      containers:
      - name: mariadb
        image: {{.Values.kube.registry.hostname}}/{{.Values.kube.organization}}/{{.Values.images.mariadb}}:2.7.0-35f5964bd-cap
        imagePullPolicy: {{.Values.imagePullPolicy}}
        env:
        {{- if .Values.mariadb.usePassword }}
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-mariadb-secret"
              key: mariadb-root-password
        {{- if .Values.mariadb.mariadbUser }}
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Release.Name }}-mariadb-secret"
              key: mariadb-password
        {{- end }}
        {{- else }}
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        {{- end }}
        - name: MYSQL_USER
          value: {{ default "" .Values.mariadb.mariadbUser | quote }}
        - name: MYSQL_DATABASE
          value: {{ default "" .Values.mariadb.mariadbDatabase | quote }}
        ports:
        - name: mysql
          containerPort: 3306
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - mysqladmin
            - ping
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
{{ toYaml .Values.mariadb.resources | indent 10 }}
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
      {{- if and .Values.kube.registry.username .Values.kube.registry.password }}
      imagePullSecrets:
      - name: {{.Values.dockerRegistrySecret}}
      {{- end }}
      volumes:
      - name: data
      {{- if .Values.mariadb.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.mariadb.persistence.existingClaim | default "console-mariadb" }}
      {{- else }}
        emptyDir: {}
      {{- end -}}
