{{- if not .Values.noShared }}
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: "{{ .Release.Name }}"
  annotations:
    "helm.sh/hook": post-install, post-upgrade
  name: "{{ .Release.Name }}-postflight-job"

spec:
 template:
     metadata:
       labels:
         app: "{{ .Release.Name }}"
         job: postflight
     spec:
       containers:
        - env:
          - name: DB_HOST
            value: "{{ .Release.Name }}-mariadb"
          - name: DB_PORT
            value: "3306"
          - name: DB_ADMIN_USER
            value:  "{{ .Values.mariadb.adminUser }}"
          - name: DB_ADMIN_PASSWORD
            value:  "{{ .Values.mariadb.mariadbRootPassword }}"
          - name: DATABASE_PROVIDER
            value: "{{ .Values.dbProvider }}"
          - name: DB_PASSWORD
            value: "{{ .Values.mariadb.mariadbPassword }}"
          - name: DB_USER
            value: "{{ .Values.mariadb.mariadbUser }}"
          - name: DB_DATABASE_NAME
            value: "{{ .Values.mariadb.mariadbDatabase }}"
          - name: UPGRADE_VOLUME
            value: "{{ .Release.Name }}-upgrade-volume"
          - name: UPGRADE_LOCK_FILENAME
            value: upgrade.lock
          - name: HTTP_PROXY
          {{- if .Values.httpProxy }}
            value: {{.Values.httpProxy}}
          {{- end }}
          - name: HTTPS_PROXY
          {{- if .Values.httpsProxy }}
            value: {{.Values.httpsProxy}}
          {{- end }}
          - name: NO_PROXY
          {{- if .Values.noProxy }}
            value: {{.Values.noProxy}}
          {{- end }}
          - name: FTP_PROXY
          {{- if .Values.ftpProxy }}
            value: {{.Values.ftpProxy}}
          {{- end }}
          - name: SOCKS_PROXY
          {{- if .Values.socksProxy }}
            value: {{.Values.socksProxy}}
          {{- end }}
          image: {{.Values.dockerRegistry}}/{{.Values.dockerOrg}}/{{.Values.images.postflight}}:{{.Values.consoleVersion}}
          name: "{{ .Release.Name }}-postflight-job"
          volumeMounts:
          - mountPath: "/{{ .Release.Name }}-upgrade-volume"
            name: "{{ .Release.Name }}-upgrade-volume"
          - mountPath: /etc/secrets/
            name: "{{ .Release.Name }}-secret"
       restartPolicy: OnFailure
       {{- if .Values.dockerRegistrySecret }}
       imagePullSecrets:
       - name: {{.Values.dockerRegistrySecret}}
       {{- end }}
       volumes:
       - name: "{{ .Release.Name }}-upgrade-volume"
         persistentVolumeClaim:
           claimName: "{{ .Release.Name }}-upgrade-volume"
       - name: "{{ .Release.Name }}-secret"
         secret:
           secretName: "{{ .Release.Name }}-secret"
{{- end }}
